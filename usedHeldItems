build/emerald/src/battle_tv.i:    tvPtr = &gBattleStruct->tv;
build/emerald/src/battle_tv.i:        gBattleStruct->anyMonHasTransformed = 1;
build/emerald/src/battle_tv.i:    tvPtr = &gBattleStruct->tv;
build/emerald/src/battle_tv.i:    tvPtr = &gBattleStruct->tv;
build/emerald/src/battle_tv.i:    if (gBattleStruct->anyMonHasTransformed)
build/emerald/src/battle_tv.i:    movePoints = &gBattleStruct->tvMovePoints;
build/emerald/src/battle_tv.i:    struct BattleTvMovePoints *movePoints = &gBattleStruct->tvMovePoints;
build/emerald/src/battle_tv.i:    struct BattleTv *tvPtr = &gBattleStruct->tv;
build/emerald/src/battle_tv.i:    struct BattleTv *tvPtr = &gBattleStruct->tv;
build/emerald/src/battle_tv.i:        struct BattleTv *tvPtr = &gBattleStruct->tv;
build/emerald/src/battle_ai_script_commands.i:        gBattleStruct->aiFinalScore[sBattler_AI][gBattlerTarget][i] = ((struct AI_ThinkingStruct *)(gBattleResources->ai))->score[i];
build/emerald/src/battle_ai_script_commands.i:                BattleAI_SetupAIData(gBattleStruct->palaceFlags >> 4);
build/emerald/src/battle_ai_script_commands.i:                gBattleStruct->aiFinalScore[sBattler_AI][gBattlerTarget][j] = ((struct AI_ThinkingStruct *)(gBattleResources->ai))->score[j];
build/emerald/src/battle_ai_script_commands.i:    gBattleStruct->dynamicMoveType = 0;
build/emerald/src/battle_ai_script_commands.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[move].type; };
build/emerald/src/battle_ai_script_commands.i:    gBattleStruct->dynamicMoveType = 0;
build/emerald/src/battle_ai_script_commands.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[move].type; };
build/emerald/src/battle_ai_script_commands.i:    u8 safariFleeRate = gBattleStruct->safariEscapeFactor * 5;
build/emerald/src/battle_ai_script_commands.i:    ((struct AI_ThinkingStruct *)(gBattleResources->ai))->funcResult = gBattleStruct->usedHeldItems[battlerId];
build/emerald/src/battle_ai_script_commands.i:        ((struct AI_ThinkingStruct *)(gBattleResources->ai))->funcResult = gBattleMons[partnerBattler].moves[gBattleStruct->chosenMovePositions[partnerBattler]];
build/emerald/src/battle_ai_script_commands.i:            { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[moves[i]].type; };
build/emerald/src/battle_ai_script_commands.i:    if (gBattleStruct->ateBerry[battler & 1] & gBitTable[gBattlerPartyIndexes[battler]])
build/emerald/src/battle_ai_script_commands.i:        { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[moves[i]].type; };
build/emerald/src/battle_util.i:    if (gBattleStruct->field_91 & gBitTable[gBattlerAttacker] || !IsBattlerAlive(gBattlerAttacker))
build/emerald/src/battle_util.i:    gBattleStruct->atkCancellerTracker = 0;
build/emerald/src/battle_util.i:    gCurrMovePos = gChosenMovePos = *(gBattleStruct->chosenMovePositions + gBattlerAttacker);
build/emerald/src/battle_util.i:        *(gBattleStruct->moveTarget + gBattlerAttacker) = GetMoveTarget(165, 0);
build/emerald/src/battle_util.i:        *(gBattleStruct->moveTarget + gBattlerAttacker) = GetMoveTarget(gCurrentMove, 0);
build/emerald/src/battle_util.i:        *(gBattleStruct->moveTarget + gBattlerAttacker) = GetMoveTarget(gCurrentMove, 0);
build/emerald/src/battle_util.i:        *(gBattleStruct->moveTarget + gBattlerAttacker) = GetMoveTarget(gCurrentMove, 0);
build/emerald/src/battle_util.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[gChosenMove].type; };
build/emerald/src/battle_util.i:             && ((gBattleMons[*(gBattleStruct->moveTarget + gBattlerAttacker)].ability != 31 && moveType == 13)
build/emerald/src/battle_util.i:                 || (gBattleMons[*(gBattleStruct->moveTarget + gBattlerAttacker)].ability != 114 && moveType == 11)
build/emerald/src/battle_util.i:                && *(gBattleStruct->moveTarget + gBattlerAttacker) != gActiveBattler
build/emerald/src/battle_util.i:                gBattlerTarget = *(gBattleStruct->moveTarget + gBattlerAttacker);
build/emerald/src/battle_util.i:        gBattlerTarget = *(gBattleStruct->moveTarget + gBattlerAttacker);
build/emerald/src/battle_util.i:        gBattleStruct->hpBefore[i] = gBattleMons[i].hp;
build/emerald/src/battle_util.i:    { gBattleTextBuff1[0] = 0xFD; gBattleTextBuff1[1] = 7; gBattleTextBuff1[2] = gBattlerAttacker; gBattleTextBuff1[3] = *(gBattleStruct->field_58 + gBattlerAttacker); gBattleTextBuff1[4] = 0xFF; }
build/emerald/src/battle_util.i:        switch (*(gBattleStruct->AI_itemType + (gBattlerAttacker >> 1)))
build/emerald/src/battle_util.i:            if (*(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) & 1)
build/emerald/src/battle_util.i:                if (*(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) & 0x3E)
build/emerald/src/battle_util.i:                while (!(*(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) & 1))
build/emerald/src/battle_util.i:                    *(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) >>= 1;
build/emerald/src/battle_util.i:            if (*(gBattleStruct->AI_itemFlags + (gBattlerAttacker >> 1)) & 0x80)
build/emerald/src/battle_util.i:                while (!((*(gBattleStruct->AI_itemFlags + (gBattlerAttacker >> 1))) & 1))
build/emerald/src/battle_util.i:                    *(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) >>= 1;
build/emerald/src/battle_util.i:        gBattlescriptCurrInstr = gBattlescriptsForUsingItem[*(gBattleStruct->AI_itemType + gBattlerAttacker / 2)];
build/emerald/src/battle_util.i:            gBattleStruct->runTries++;
build/emerald/src/battle_util.i:            speedVar = (gBattleMons[battler].speed * pyramidMultiplier) / (gBattleMons[((battler) ^ 1)].speed) + (gBattleStruct->runTries * 30);
build/emerald/src/battle_util.i:            speedVar = (gBattleMons[battler].speed * pyramidMultiplier) / (gBattleMons[runningFromBattler].speed) + (gBattleStruct->runTries * 30);
build/emerald/src/battle_util.i:            speedVar = (gBattleMons[battler].speed * 128) / (gBattleMons[runningFromBattler].speed) + (gBattleStruct->runTries * 30);
build/emerald/src/battle_util.i:        gBattleStruct->runTries++;
build/emerald/src/battle_util.i:    if (gBattleStruct->safariPkblThrowCounter < 3)
build/emerald/src/battle_util.i:        gBattleStruct->safariPkblThrowCounter++;
build/emerald/src/battle_util.i:    if (gBattleStruct->safariEscapeFactor > 1)
build/emerald/src/battle_util.i:        if (gBattleStruct->safariEscapeFactor < sPkblToEscapeFactor[gBattleStruct->safariPkblThrowCounter][gBattleCommunication[0x5]])
build/emerald/src/battle_util.i:            gBattleStruct->safariEscapeFactor = 1;
build/emerald/src/battle_util.i:            gBattleStruct->safariEscapeFactor -= sPkblToEscapeFactor[gBattleStruct->safariPkblThrowCounter][gBattleCommunication[0x5]];
build/emerald/src/battle_util.i:    gBattleStruct->safariCatchFactor += sGoNearCounterToCatchFactor[gBattleStruct->safariGoNearCounter];
build/emerald/src/battle_util.i:    if (gBattleStruct->safariCatchFactor > 20)
build/emerald/src/battle_util.i:        gBattleStruct->safariCatchFactor = 20;
build/emerald/src/battle_util.i:    gBattleStruct->safariEscapeFactor += sGoNearCounterToEscapeFactor[gBattleStruct->safariGoNearCounter];
build/emerald/src/battle_util.i:    if (gBattleStruct->safariEscapeFactor > 20)
build/emerald/src/battle_util.i:        gBattleStruct->safariEscapeFactor = 20;
build/emerald/src/battle_util.i:    if (gBattleStruct->safariGoNearCounter < 3)
build/emerald/src/battle_util.i:        gBattleStruct->safariGoNearCounter++;
build/emerald/src/battle_util.i:        gBattleStruct->faintedActionsState = 0;
build/emerald/src/battle_util.i:    *(gBattleStruct->monToSwitchIntoId + gBattlerByTurnOrder[gCurrentTurnActionNumber]) = 6;
build/emerald/src/battle_util.i:    gBattleStruct->dynamicMoveType = 0;
build/emerald/src/battle_util.i:    return !(gBattleStruct->ateBerry[battler & 1] & gBitTable[gBattlerPartyIndexes[battler]]);
build/emerald/src/battle_util.i:    u16 *choicedMove = &gBattleStruct->choicedMove[gActiveBattler];
build/emerald/src/battle_util.i:    u16 *choicedMove = &gBattleStruct->choicedMove[battlerId];
build/emerald/src/battle_util.i:        switch (gBattleStruct->turnCountersTracker)
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnSideTracker = 0;
build/emerald/src/battle_util.i:            while (gBattleStruct->turnSideTracker < 2)
build/emerald/src/battle_util.i:                side = gBattleStruct->turnSideTracker;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker = 0;
build/emerald/src/battle_util.i:            while (gBattleStruct->turnSideTracker < 2)
build/emerald/src/battle_util.i:                side = gBattleStruct->turnSideTracker;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker = 0;
build/emerald/src/battle_util.i:            while (gBattleStruct->turnSideTracker < 2)
build/emerald/src/battle_util.i:                side = gBattleStruct->turnSideTracker;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker = 0;
build/emerald/src/battle_util.i:            while (gBattleStruct->turnSideTracker < 2)
build/emerald/src/battle_util.i:                side = gBattleStruct->turnSideTracker;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker = 0;
build/emerald/src/battle_util.i:            while (gBattleStruct->turnSideTracker < 2)
build/emerald/src/battle_util.i:                side = gBattleStruct->turnSideTracker;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker = 0;
build/emerald/src/battle_util.i:            while (gBattleStruct->turnSideTracker < 2)
build/emerald/src/battle_util.i:                side = gBattleStruct->turnSideTracker;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker = 0;
build/emerald/src/battle_util.i:            while (gBattleStruct->turnSideTracker < 2)
build/emerald/src/battle_util.i:                side = gBattleStruct->turnSideTracker;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker = 0;
build/emerald/src/battle_util.i:            while (gBattleStruct->turnSideTracker < gBattlersCount)
build/emerald/src/battle_util.i:                gActiveBattler = gBattlerByTurnOrder[gBattleStruct->turnSideTracker];
build/emerald/src/battle_util.i:                gBattleStruct->turnSideTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnCountersTracker++;
build/emerald/src/battle_util.i:    while (gBattleStruct->turnEffectsBattlerId < gBattlersCount && gBattleStruct->turnEffectsTracker <= ENDTURN_BATTLER_COUNT)
build/emerald/src/battle_util.i:        gActiveBattler = gBattlerAttacker = gBattlerByTurnOrder[gBattleStruct->turnEffectsBattlerId];
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsBattlerId++;
build/emerald/src/battle_util.i:        switch (gBattleStruct->turnEffectsTracker)
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:                if (ability == 98) { RecordAbilityBattle(gActiveBattler, ability); gBattleStruct->turnEffectsTracker++; break;};
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:                if (ability == 98) { RecordAbilityBattle(gActiveBattler, ability); gBattleStruct->turnEffectsTracker++; break;};
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:                if (ability == 98) { RecordAbilityBattle(gActiveBattler, ability); gBattleStruct->turnEffectsTracker++; break;};
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:                if (ability == 98) { RecordAbilityBattle(gActiveBattler, ability); gBattleStruct->turnEffectsTracker++; break;};
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:                if (ability == 98) { RecordAbilityBattle(gActiveBattler, ability); gBattleStruct->turnEffectsTracker++; break;};
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:                if (ability == 98) { RecordAbilityBattle(gActiveBattler, ability); gBattleStruct->turnEffectsTracker++; break;};
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:                    if (ability == 98) { RecordAbilityBattle(gActiveBattler, ability); gBattleStruct->turnEffectsTracker++; break;};
build/emerald/src/battle_util.i:                    gBattleScripting.animArg1 = gBattleStruct->wrappedMove[gActiveBattler];
build/emerald/src/battle_util.i:                    gBattleScripting.animArg2 = gBattleStruct->wrappedMove[gActiveBattler] >> 8;
build/emerald/src/battle_util.i:                    { gBattleTextBuff1[0] = 0xFD; gBattleTextBuff1[1] = 2; gBattleTextBuff1[2] = (gBattleStruct->wrappedMove[gActiveBattler] & 0xFF); gBattleTextBuff1[3] = (gBattleStruct->wrappedMove[gActiveBattler] & 0xFF00) >> 8; gBattleTextBuff1[4] = 0xFF; };
build/emerald/src/battle_util.i:                    if (GetBattlerHoldEffect(gBattleStruct->wrappedBy[gActiveBattler], 1) == 124)
build/emerald/src/battle_util.i:                    { gBattleTextBuff1[0] = 0xFD; gBattleTextBuff1[1] = 2; gBattleTextBuff1[2] = (gBattleStruct->wrappedMove[gActiveBattler] & 0xFF); gBattleTextBuff1[3] = (gBattleStruct->wrappedMove[gActiveBattler] & 0xFF00) >> 8; gBattleTextBuff1[4] = 0xFF; };
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:                gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:                gBattleMons[gActiveBattler].type1 = gBattleStruct->roostTypes[gActiveBattler][0];
build/emerald/src/battle_util.i:                gBattleMons[gActiveBattler].type2 = gBattleStruct->roostTypes[gActiveBattler][1];
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsTracker = 0;
build/emerald/src/battle_util.i:            gBattleStruct->turnEffectsBattlerId++;
build/emerald/src/battle_util.i:    switch (gBattleStruct->wishPerishSongState)
build/emerald/src/battle_util.i:        while (gBattleStruct->wishPerishSongBattlerId < gBattlersCount)
build/emerald/src/battle_util.i:            gActiveBattler = gBattleStruct->wishPerishSongBattlerId;
build/emerald/src/battle_util.i:                gBattleStruct->wishPerishSongBattlerId++;
build/emerald/src/battle_util.i:            gBattleStruct->wishPerishSongBattlerId++;
build/emerald/src/battle_util.i:        gBattleStruct->wishPerishSongState = 1;
build/emerald/src/battle_util.i:        gBattleStruct->wishPerishSongBattlerId = 0;
build/emerald/src/battle_util.i:        while (gBattleStruct->wishPerishSongBattlerId < gBattlersCount)
build/emerald/src/battle_util.i:            gActiveBattler = gBattlerAttacker = gBattlerByTurnOrder[gBattleStruct->wishPerishSongBattlerId];
build/emerald/src/battle_util.i:                gBattleStruct->wishPerishSongBattlerId++;
build/emerald/src/battle_util.i:            gBattleStruct->wishPerishSongBattlerId++;
build/emerald/src/battle_util.i:            u8 *state = &gBattleStruct->wishPerishSongState;
build/emerald/src/battle_util.i:            gBattleStruct->wishPerishSongBattlerId = 0;
build/emerald/src/battle_util.i:         && gBattleStruct->arenaTurnCounter == 2
build/emerald/src/battle_util.i:            gBattleStruct->wishPerishSongState++;
build/emerald/src/battle_util.i:        switch (gBattleStruct->faintedActionsState)
build/emerald/src/battle_util.i:            gBattleStruct->faintedActionsBattlerId = 0;
build/emerald/src/battle_util.i:            gBattleStruct->faintedActionsState++;
build/emerald/src/battle_util.i:                gBattlerFainted = gBattlerTarget = gBattleStruct->faintedActionsBattlerId;
build/emerald/src/battle_util.i:                if (gBattleMons[gBattleStruct->faintedActionsBattlerId].hp == 0
build/emerald/src/battle_util.i:                 && !(gBattleStruct->givenExpMons & gBitTable[gBattlerPartyIndexes[gBattleStruct->faintedActionsBattlerId]])
build/emerald/src/battle_util.i:                 && !(gAbsentBattlerFlags & gBitTable[gBattleStruct->faintedActionsBattlerId]))
build/emerald/src/battle_util.i:                    gBattleStruct->faintedActionsState = 2;
build/emerald/src/battle_util.i:            } while (++gBattleStruct->faintedActionsBattlerId != gBattlersCount);
build/emerald/src/battle_util.i:            gBattleStruct->faintedActionsState = 3;
build/emerald/src/battle_util.i:            if (++gBattleStruct->faintedActionsBattlerId == gBattlersCount)
build/emerald/src/battle_util.i:                gBattleStruct->faintedActionsState = 3;
build/emerald/src/battle_util.i:                gBattleStruct->faintedActionsState = 1;
build/emerald/src/battle_util.i:            gBattleStruct->faintedActionsBattlerId = 0;
build/emerald/src/battle_util.i:            gBattleStruct->faintedActionsState++;
build/emerald/src/battle_util.i:                gBattlerFainted = gBattlerTarget = gBattleStruct->faintedActionsBattlerId;
build/emerald/src/battle_util.i:                if (gBattleMons[gBattleStruct->faintedActionsBattlerId].hp == 0
build/emerald/src/battle_util.i:                 && !(gAbsentBattlerFlags & gBitTable[gBattleStruct->faintedActionsBattlerId]))
build/emerald/src/battle_util.i:                    gBattleStruct->faintedActionsState = 5;
build/emerald/src/battle_util.i:            } while (++gBattleStruct->faintedActionsBattlerId != gBattlersCount);
build/emerald/src/battle_util.i:            gBattleStruct->faintedActionsState = 6;
build/emerald/src/battle_util.i:            if (++gBattleStruct->faintedActionsBattlerId == gBattlersCount)
build/emerald/src/battle_util.i:                gBattleStruct->faintedActionsState = 6;
build/emerald/src/battle_util.i:                gBattleStruct->faintedActionsState = 4;
build/emerald/src/battle_util.i:            gBattleStruct->faintedActionsState++;
build/emerald/src/battle_util.i:    } while (gBattleStruct->faintedActionsState != 7);
build/emerald/src/battle_util.i:        switch (gBattleStruct->atkCancellerTracker)
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:                        gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:                { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[gCurrentMove].type; };
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:    } while (gBattleStruct->atkCancellerTracker != CANCELLER_END && gBattleStruct->atkCancellerTracker != CANCELLER_END2 && effect == 0);
build/emerald/src/battle_util.i:        switch (gBattleStruct->atkCancellerTracker)
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:            gBattleStruct->atkCancellerTracker++;
build/emerald/src/battle_util.i:    } while (gBattleStruct->atkCancellerTracker != CANCELLER_END2 && effect == 0);
build/emerald/src/battle_util.i:             && i != *(gBattleStruct->monToSwitchIntoId + id2) && i != id1[gBattleStruct->monToSwitchIntoId])
build/emerald/src/battle_util.i:             && i != *(gBattleStruct->monToSwitchIntoId + id2) && i != id1[gBattleStruct->monToSwitchIntoId])
build/emerald/src/battle_util.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[move].type; };
build/emerald/src/battle_util.i:                && !(gBattleStruct->illusion[((battler) ^ 1)].on)
build/emerald/src/battle_util.i:                            { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[move].type; };
build/emerald/src/battle_util.i:                *(&gBattleStruct->formToChangeInto) = effect - 1;
build/emerald/src/battle_util.i:                 && gBattleStruct->changedItems[battler] == 0
build/emerald/src/battle_util.i:                 && ItemId_GetPocket(gBattleStruct->usedHeldItems[battler]) == 4)
build/emerald/src/battle_util.i:                    gLastUsedItem = gBattleStruct->changedItems[battler] = gBattleStruct->usedHeldItems[battler];
build/emerald/src/battle_util.i:                    gBattleStruct->usedHeldItems[battler] = 0;
build/emerald/src/battle_util.i:                    gBattleStruct->changedSpecies[gBattlerPartyIndexes[battler]] = gBattleMons[battler].species;
build/emerald/src/battle_util.i:             && gBattleStruct->hpBefore[battler] > gBattleMons[battler].maxHP / 2
build/emerald/src/battle_util.i:             && gBattleStruct->hpBefore[battler] > gBattleMons[battler].maxHP / 2
build/emerald/src/battle_util.i:            if (gBattleStruct->illusion[gBattlerTarget].on && !gBattleStruct->illusion[gBattlerTarget].broken && ((gSpecialStatuses[gBattlerTarget].physicalDmg != 0 || gSpecialStatuses[gBattlerTarget].specialDmg != 0)))
build/emerald/src/battle_util.i:                gSpecialStatuses[battler].dancerOriginalTarget = *(gBattleStruct->moveTarget + battler) | 0x4;
build/emerald/src/battle_util.i:                gBattleStruct->atkCancellerTracker = 0;
build/emerald/src/battle_util.i:                    gBattleStruct->formToChangeInto = effect - 1;
build/emerald/src/battle_util.i:                gBattleStruct->synchronizeMoveEffect &= ~(0x4000 | 0x8000);
build/emerald/src/battle_util.i:                if (gBattleStruct->synchronizeMoveEffect == 0x6)
build/emerald/src/battle_util.i:                    gBattleStruct->synchronizeMoveEffect = 0x2;
build/emerald/src/battle_util.i:                gBattleScripting.moveEffect = gBattleStruct->synchronizeMoveEffect + 0x4000;
build/emerald/src/battle_util.i:                gBattleStruct->synchronizeMoveEffect &= ~(0x4000 | 0x8000);
build/emerald/src/battle_util.i:                if (gBattleStruct->synchronizeMoveEffect == 0x6)
build/emerald/src/battle_util.i:                    gBattleStruct->synchronizeMoveEffect = 0x2;
build/emerald/src/battle_util.i:                gBattleScripting.moveEffect = gBattleStruct->synchronizeMoveEffect;
build/emerald/src/battle_util.i:                battler = gBattlerAbility = gBattleStruct->intimidateBattler = i;
build/emerald/src/battle_util.i:                    gBattleStruct->tracedAbility[i] = gLastUsedAbility = gBattleMons[gActiveBattler].ability;
build/emerald/src/battle_util.i:                    gBattleStruct->moneyMultiplier *= 2;
build/emerald/src/battle_util.i:            { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[gCurrentMove].type; };
build/emerald/src/battle_util.i:        gBattleStruct->ateBerry[battlerId & 1] |= gBitTable[gBattlerPartyIndexes[battlerId]];
build/emerald/src/battle_util.i:    *(gBattleStruct->moveTarget + gBattlerAttacker) = targetBattler;
build/emerald/src/battle_util.i:    if (1 && gBattleStruct->debugHoldEffects[battlerId] != 0 && gBattleMons[battlerId].item)
build/emerald/src/battle_util.i:        return gBattleStruct->debugHoldEffects[battlerId];
build/emerald/src/battle_util.i:        basePower = gBattleStruct->magnitudeBasePower;
build/emerald/src/battle_util.i:        basePower = gBattleStruct->presentBasePower;
build/emerald/src/battle_util.i:        if (moveType == 18 && gBattleStruct->ateBoost[battlerAtk])
build/emerald/src/battle_util.i:        if (moveType == 13 && gBattleStruct->ateBoost[battlerAtk])
build/emerald/src/battle_util.i:        if (moveType == 15 && gBattleStruct->ateBoost[battlerAtk])
build/emerald/src/battle_util.i:        if (moveType == 2 && gBattleStruct->ateBoost[battlerAtk])
build/emerald/src/battle_util.i:        if (moveType == 0 && gBattleStruct->ateBoost[battlerAtk])
build/emerald/src/battle_util.i:        if (gBattleStruct->lastMoveFailed & gBitTable[battlerAtk])
build/emerald/src/battle_util.i:        percentBoost = (((gBattleStruct->sameMoveTurns[battlerAtk] * GetBattlerHoldEffectParam(battlerAtk))) < (100) ? ((gBattleStruct->sameMoveTurns[battlerAtk] * GetBattlerHoldEffectParam(battlerAtk))) : (100));
build/emerald/src/battle_util.i:        if (1 && gBattleStruct->debugHoldEffects[battlerId])
build/emerald/src/battle_util.i:            holdEffect = gBattleStruct->debugHoldEffects[battlerId];
build/emerald/src/battle_util.i:            gBattleStruct->mega.isWishMegaEvo = 0;
build/emerald/src/battle_util.i:        gBattleStruct->mega.isWishMegaEvo = 1;
build/emerald/src/battle_util.i:    if (gBattleStruct->mega.evolvedPartyIds[0] & gBitTable[monId])
build/emerald/src/battle_util.i:        gBattleStruct->mega.evolvedPartyIds[0] &= ~(gBitTable[monId]);
build/emerald/src/battle_util.i:        SetMonData(&gPlayerParty[monId], 11, &gBattleStruct->mega.playerEvolvedSpecies);
build/emerald/src/battle_util.i:        SetMonData(&gPlayerParty[monId], 11, &gBattleStruct->changedSpecies[monId]);
build/emerald/src/battle_util.i:        gBattleStruct->changedSpecies[monId] = 0;
build/emerald/src/battle_util.i:             && ((GetMegaEvolutionSpecies(species, itemId) != 0) || gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(battlerId)] & gBitTable[gBattlerPartyIndexes[battlerId]]))
build/emerald/src/battle_util.i:    if (gBattleStruct->illusion[battlerId].broken)
build/emerald/src/battle_util.i:    if (!gBattleStruct->illusion[battlerId].set)
build/emerald/src/battle_util.i:    if (!gBattleStruct->illusion[battlerId].on)
build/emerald/src/battle_util.i:    return gBattleStruct->illusion[battlerId].mon;
build/emerald/src/battle_util.i:    memset(&gBattleStruct->illusion[battlerId], 0, sizeof(gBattleStruct->illusion[battlerId]));
build/emerald/src/battle_util.i:    gBattleStruct->illusion[battlerId].set = 1;
build/emerald/src/battle_util.i:            gBattleStruct->illusion[battlerId].on = 1;
build/emerald/src/battle_util.i:            gBattleStruct->illusion[battlerId].broken = 0;
build/emerald/src/battle_util.i:            gBattleStruct->illusion[battlerId].partyId = id;
build/emerald/src/battle_util.i:            gBattleStruct->illusion[battlerId].mon = &party[id];
build/emerald/src/pokemon.i:    gBattleStruct->hpOnSwitchout[GetBattlerSide(battlerId)] = gBattleMons[battlerId].hp;
build/emerald/src/pokemon.i:    gLastUsedAbility = gBattleStruct->abilityPreventingSwitchout;
build/emerald/src/pokemon.i:    gBattleTextBuff1[2] = gBattleStruct->battlerPreventingSwitchout;
build/emerald/src/pokemon.i:    if (GetBattlerSide(gBattleStruct->battlerPreventingSwitchout) == 0)
build/emerald/src/pokemon.i:        gBattleTextBuff1[3] = GetPartyIdFromBattlePartyId(gBattlerPartyIndexes[gBattleStruct->battlerPreventingSwitchout]);
build/emerald/src/pokemon.i:        gBattleTextBuff1[3] = gBattlerPartyIndexes[gBattleStruct->battlerPreventingSwitchout];
build/emerald/src/battle_interface.i:    if (gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(battlerId)] & gBitTable[gBattlerPartyIndexes[battlerId]])
build/emerald/src/battle_interface.i:    if (gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(battlerId)] & gBitTable[gBattlerPartyIndexes[battlerId]])
build/emerald/src/battle_interface.i:    if (gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(battler)] & gBitTable[gBattlerPartyIndexes[battler]])
build/emerald/src/battle_interface.i:    ConvertIntToDecimalStringN(text + 6, gBattleStruct->safariCatchFactor, STR_CONV_MODE_RIGHT_ALIGN, 2);
build/emerald/src/battle_interface.i:    ConvertIntToDecimalStringN(text + 9, gBattleStruct->safariEscapeFactor, STR_CONV_MODE_RIGHT_ALIGN, 2);
build/emerald/src/battle_interface.i:    if (gBattleStruct->mega.triggerSpriteId == 0xFF)
build/emerald/src/battle_interface.i:            gBattleStruct->mega.triggerSpriteId = CreateSprite(&sSpriteTemplate_MegaTrigger,
build/emerald/src/battle_interface.i:            gBattleStruct->mega.triggerSpriteId = CreateSprite(&sSpriteTemplate_MegaTrigger,
build/emerald/src/battle_interface.i:    gSprites[gBattleStruct->mega.triggerSpriteId].data[0] = battlerId;
build/emerald/src/battle_interface.i:    gSprites[gBattleStruct->mega.triggerSpriteId].data[1] = 0;
build/emerald/src/battle_interface.i:    ChangeMegaTriggerSprite(gBattleStruct->mega.triggerSpriteId, palId);
build/emerald/src/battle_interface.i:    ChangeMegaTriggerSprite(gBattleStruct->mega.triggerSpriteId, 0);
build/emerald/src/battle_interface.i:    gSprites[gBattleStruct->mega.triggerSpriteId].data[1] = 1;
build/emerald/src/battle_interface.i:    if (gBattleStruct->mega.triggerSpriteId != 0xFF)
build/emerald/src/battle_interface.i:        DestroySprite(&gSprites[gBattleStruct->mega.triggerSpriteId]);
build/emerald/src/battle_interface.i:    gBattleStruct->mega.triggerSpriteId = 0xFF;
build/emerald/src/battle_interface.i:                else if (gBattleTypeFlags & (1 << 18) && gBattleStruct->arenaLostPlayerMons & gBitTable[j])
build/emerald/src/battle_interface.i:                else if (gBattleTypeFlags & (1 << 18) && gBattleStruct->arenaLostOpponentMons & gBitTable[j])
build/emerald/src/battle_interface.i:    if (!gBattleStruct->activeAbilityPopUps)
build/emerald/src/battle_interface.i:    gBattleStruct->activeAbilityPopUps |= gBitTable[battlerId];
build/emerald/src/battle_interface.i:    gBattleStruct->abilityPopUpSpriteIds[gBattleAnimAttacker][0] = spriteId1;
build/emerald/src/battle_interface.i:    gBattleStruct->abilityPopUpSpriteIds[gBattleAnimAttacker][1] = spriteId2;
build/emerald/src/battle_interface.i:                gBattleStruct->activeAbilityPopUps &= ~(gBitTable[sprite->data[4]]);
build/emerald/src/battle_interface.i:    gSprites[gBattleStruct->abilityPopUpSpriteIds[battlerId][0]].data[2] = 0;
build/emerald/src/battle_interface.i:    gSprites[gBattleStruct->abilityPopUpSpriteIds[battlerId][1]].data[2] = 0;
build/emerald/src/battle_interface.i:        && !gBattleStruct->activeAbilityPopUps)
build/emerald/src/battle_bg.i:        gBattleStruct->linkBattleVsSpriteId_V = CreateSprite(&sVsLetter_V_SpriteTemplate, 111, 80, 0);
build/emerald/src/battle_bg.i:        gBattleStruct->linkBattleVsSpriteId_S = CreateSprite(&sVsLetter_S_SpriteTemplate, 129, 80, 0);
build/emerald/src/battle_bg.i:        gSprites[gBattleStruct->linkBattleVsSpriteId_V].invisible = 1;
build/emerald/src/battle_bg.i:        gSprites[gBattleStruct->linkBattleVsSpriteId_S].invisible = 1;
build/emerald/src/battle_bg.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].invisible = 0;
build/emerald/src/battle_bg.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].invisible = 0;
build/emerald/src/battle_bg.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].oam.tileNum += 0x40;
build/emerald/src/battle_bg.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].data[0] = 0;
build/emerald/src/battle_bg.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].data[0] = 1;
build/emerald/src/battle_bg.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].data[1] = gSprites[gBattleStruct->linkBattleVsSpriteId_V].pos1.x;
build/emerald/src/battle_bg.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].data[1] = gSprites[gBattleStruct->linkBattleVsSpriteId_S].pos1.x;
build/emerald/src/battle_bg.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].data[2] = 0;
build/emerald/src/battle_bg.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].data[2] = 0;
build/emerald/src/battle_arena.i:    s8 *mindPoints = gBattleStruct->arenaMindPoints;
build/emerald/src/battle_arena.i:    s8 *skillPoints = gBattleStruct->arenaSkillPoints;
build/emerald/src/battle_arena.i:    u16 *hpAtStart = gBattleStruct->arenaStartHp;
build/emerald/src/battle_arena.i:    s8 *mindPoints = gBattleStruct->arenaMindPoints;
build/emerald/src/battle_arena.i:    s8 *skillPoints = gBattleStruct->arenaSkillPoints;
build/emerald/src/battle_arena.i:    u16 *hpAtStart = gBattleStruct->arenaStartHp;
build/emerald/src/battle_arena.i:    s8 *mindPoints = gBattleStruct->arenaMindPoints;
build/emerald/src/battle_arena.i:    s8 *skillPoints = gBattleStruct->arenaSkillPoints;
build/emerald/src/battle_arena.i:        u8 *failedMoveBits = &gBattleStruct->alreadyStatusedMoveAttempt;
build/emerald/src/battle_arena.i:    s8 *skillPoints = gBattleStruct->arenaSkillPoints;
build/emerald/src/battle_arena.i:    u16 *hpAtStart = gBattleStruct->arenaStartHp;
build/emerald/src/battle_gfx_sfx_util.i:    i = (gBattleStruct->palaceFlags & gBitTable[gActiveBattler]) ? 2 : 0;
build/emerald/src/battle_gfx_sfx_util.i:        gBattleStruct->palaceFlags &= 0xF;
build/emerald/src/battle_gfx_sfx_util.i:        gBattleStruct->palaceFlags |= (var2 << 4);
build/emerald/src/battle_gfx_sfx_util.i:        gBattleStruct->illusion[activeBattler].broken = 1;
build/emerald/src/battle_gfx_sfx_util.i:        gBattleStruct->illusion[activeBattler].on = 0;
build/emerald/src/battle_gfx_sfx_util.i:        LZDecompressWram(lzPaletteData, gBattleStruct->castformPalette[0]);
build/emerald/src/battle_gfx_sfx_util.i:        LoadPalette(gBattleStruct->castformPalette[gBattleMonForms[battlerId]], paletteOffset, 0x20);
build/emerald/src/battle_gfx_sfx_util.i:        LoadPalette(gBattleStruct->castformPalette[gBattleSpritesDataPtr->animationData->animArg], paletteOffset, 32);
build/emerald/src/battle_gfx_sfx_util.i:            LZDecompressWram(lzPaletteData, gBattleStruct->castformPalette[0]);
build/emerald/src/battle_gfx_sfx_util.i:            LoadPalette(gBattleStruct->castformPalette[0] + gBattleMonForms[battlerDef] * 16, paletteOffset, 32);
build/emerald/src/battle_main.i:    gBattleStruct->vsScreenHealthFlagsLo = flags;
build/emerald/src/battle_main.i:    *(&gBattleStruct->vsScreenHealthFlagsHi) = flags >> 8;
build/emerald/src/battle_main.i:    gBattleStruct->vsScreenHealthFlagsHi |= FlagGet((((0x500 + 864 - 1) + 1) + 0x72)) << 7;
build/emerald/src/battle_main.i:                    *(&gBattleStruct->field_180) = 0;
build/emerald/src/battle_main.i:                    *(&gBattleStruct->field_181) = 3;
build/emerald/src/battle_main.i:                    SendBlock(bitmask_all_link_players_but_self(), &gBattleStruct->field_180, 32);
build/emerald/src/battle_main.i:            gTasks[taskId].data[3] = gBattleStruct->vsScreenHealthFlagsLo | (gBattleStruct->vsScreenHealthFlagsHi << 8);
build/emerald/src/battle_main.i:                    *(&gBattleStruct->field_180) = 0;
build/emerald/src/battle_main.i:                    *(&gBattleStruct->field_181) = 3;
build/emerald/src/battle_main.i:                    SendBlock(bitmask_all_link_players_but_self(), &gBattleStruct->field_180, 32);
build/emerald/src/battle_main.i:    savedCallback = &gBattleStruct->savedCallback;
build/emerald/src/battle_main.i:    savedBattleTypeFlags = &gBattleStruct->savedBattleTypeFlags;
build/emerald/src/battle_main.i:    savedCallback = &gBattleStruct->savedCallback;
build/emerald/src/battle_main.i:    savedBattleTypeFlags = &gBattleStruct->savedBattleTypeFlags;
build/emerald/src/battle_main.i:                    *(&gBattleStruct->field_180) = 0;
build/emerald/src/battle_main.i:                    *(&gBattleStruct->field_181) = 3;
build/emerald/src/battle_main.i:                    SendBlock(bitmask_all_link_players_but_self(), &gBattleStruct->field_180, 32);
build/emerald/src/battle_main.i:            u32* ptr = (u32*)(&gBattleStruct->field_180);
build/emerald/src/battle_main.i:    gBattleStruct->introState = 0;
build/emerald/src/battle_main.i:        gBattleStruct->lastTakenMove[i] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->usedHeldItems[i] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->choicedMove[i] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->changedItems[i] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->lastTakenMoveFrom[i][0] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->lastTakenMoveFrom[i][1] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->lastTakenMoveFrom[i][2] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->lastTakenMoveFrom[i][3] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->AI_monToSwitchIntoId[i] = 6;
build/emerald/src/battle_main.i:    gBattleStruct->runTries = 0;
build/emerald/src/battle_main.i:    gBattleStruct->safariGoNearCounter = 0;
build/emerald/src/battle_main.i:    gBattleStruct->safariPkblThrowCounter = 0;
build/emerald/src/battle_main.i:    gBattleStruct->safariCatchFactor = gBaseStats[GetMonData(&gEnemyParty[0], 11)].catchRate * 100 / 1275;
build/emerald/src/battle_main.i:    gBattleStruct->safariEscapeFactor = 3;
build/emerald/src/battle_main.i:    gBattleStruct->wildVictorySong = 0;
build/emerald/src/battle_main.i:    gBattleStruct->moneyMultiplier = 1;
build/emerald/src/battle_main.i:    gBattleStruct->givenExpMons = 0;
build/emerald/src/battle_main.i:    gBattleStruct->palaceFlags = 0;
build/emerald/src/battle_main.i:    gBattleStruct->arenaLostPlayerMons = 0;
build/emerald/src/battle_main.i:    gBattleStruct->arenaLostOpponentMons = 0;
build/emerald/src/battle_main.i:    gBattleStruct->mega.triggerSpriteId = 0xFF;
build/emerald/src/battle_main.i:        if ((gBattleMons[i].status2 & (1 << 13)) && *(gBattleStruct->wrappedBy + i) == gActiveBattler)
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMove[gActiveBattler] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->sameMoveTurns[gActiveBattler] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][0] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][1] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][2] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][3] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastMoveFailed &= ~(gBitTable[gActiveBattler]);
build/emerald/src/battle_main.i:    gBattleStruct->palaceFlags &= ~(gBitTable[gActiveBattler]);
build/emerald/src/battle_main.i:            gBattleStruct->lastTakenMove[i] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->lastTakenMoveFrom[i][gActiveBattler] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->choicedMove[gActiveBattler] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->arenaTurnCounter = 0xFF;
build/emerald/src/battle_main.i:        if ((gBattleMons[i].status2 & (1 << 13)) && *(gBattleStruct->wrappedBy + i) == gActiveBattler)
build/emerald/src/battle_main.i:    gBattleStruct->choicedMove[gActiveBattler] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->sameMoveTurns[gActiveBattler] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMove[gActiveBattler] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][0] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][1] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][2] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][3] = 0;
build/emerald/src/battle_main.i:    gBattleStruct->palaceFlags &= ~(gBitTable[gActiveBattler]);
build/emerald/src/battle_main.i:            gBattleStruct->lastTakenMove[i] = 0;
build/emerald/src/battle_main.i:        gBattleStruct->lastTakenMoveFrom[i][gActiveBattler] = 0;
build/emerald/src/battle_main.i:    u8 *state = &gBattleStruct->introState;
build/emerald/src/battle_main.i:                gBattleStruct->hpOnSwitchout[GetBattlerSide(gActiveBattler)] = gBattleMons[gActiveBattler].hp;
build/emerald/src/battle_main.i:            gBattleStruct->switchInAbilitiesCounter = 0;
build/emerald/src/battle_main.i:            gBattleStruct->switchInItemsCounter = 0;
build/emerald/src/battle_main.i:            gBattleStruct->overworldWeatherDone = 0;
build/emerald/src/battle_main.i:    if (gBattleStruct->switchInAbilitiesCounter == 0)
build/emerald/src/battle_main.i:    if (!gBattleStruct->overworldWeatherDone
build/emerald/src/battle_main.i:        gBattleStruct->overworldWeatherDone = 1;
build/emerald/src/battle_main.i:    while (gBattleStruct->switchInAbilitiesCounter < gBattlersCount)
build/emerald/src/battle_main.i:        gBattlerAttacker = gBattlerByTurnOrder[gBattleStruct->switchInAbilitiesCounter++];
build/emerald/src/battle_main.i:    while (gBattleStruct->switchInItemsCounter < gBattlersCount)
build/emerald/src/battle_main.i:        if (ItemBattleEffects(0x0, gBattlerByTurnOrder[gBattleStruct->switchInItemsCounter++], 0))
build/emerald/src/battle_main.i:        *(gBattleStruct->monToSwitchIntoId + i) = 6;
build/emerald/src/battle_main.i:    *(&gBattleStruct->field_91) = gAbsentBattlerFlags;
build/emerald/src/battle_main.i:    *(&gBattleStruct->turnEffectsTracker) = 0;
build/emerald/src/battle_main.i:    *(&gBattleStruct->turnEffectsBattlerId) = 0;
build/emerald/src/battle_main.i:    *(&gBattleStruct->wishPerishSongState) = 0;
build/emerald/src/battle_main.i:    *(&gBattleStruct->wishPerishSongBattlerId) = 0;
build/emerald/src/battle_main.i:    gBattleStruct->faintedActionsState = 0;
build/emerald/src/battle_main.i:    gBattleStruct->turnCountersTracker = 0;
build/emerald/src/battle_main.i:        gBattleStruct->turnEffectsTracker = 0;
build/emerald/src/battle_main.i:        gBattleStruct->turnEffectsBattlerId = 0;
build/emerald/src/battle_main.i:        gBattleStruct->wishPerishSongState = 0;
build/emerald/src/battle_main.i:        gBattleStruct->wishPerishSongBattlerId = 0;
build/emerald/src/battle_main.i:        gBattleStruct->turnCountersTracker = 0;
build/emerald/src/battle_main.i:    gBattleStruct->faintedActionsState = 0;
build/emerald/src/battle_main.i:        gBattleStruct->arenaTurnCounter++;
build/emerald/src/battle_main.i:        *(gBattleStruct->monToSwitchIntoId + i) = 6;
build/emerald/src/battle_main.i:    *(&gBattleStruct->field_91) = gAbsentBattlerFlags;
build/emerald/src/battle_main.i:    else if (gBattleTypeFlags & (1 << 18) && gBattleStruct->arenaTurnCounter == 0)
build/emerald/src/battle_main.i:        gBattlePartyCurrentOrder[i] = *(battler * 3 + i + (u8*)(gBattleStruct->field_60));
build/emerald/src/battle_main.i:    partyId2 = GetPartyIdFromBattlePartyId(*(gBattleStruct->monToSwitchIntoId + battler));
build/emerald/src/battle_main.i:            *(battler * 3 + i + (u8*)(gBattleStruct->field_60)) = gBattlePartyCurrentOrder[i];
build/emerald/src/battle_main.i:            *(((battler) ^ 2) * 3 + i + (u8*)(gBattleStruct->field_60)) = gBattlePartyCurrentOrder[i];
build/emerald/src/battle_main.i:            *(battler * 3 + i + (u8*)(gBattleStruct->field_60)) = gBattlePartyCurrentOrder[i];
build/emerald/src/battle_main.i:            *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_main.i:                || gBattleStruct->field_91 & gBitTable[GetBattlerAtPosition(((position) ^ 2))]
build/emerald/src/battle_main.i:                if (gBattleStruct->field_91 & gBitTable[gActiveBattler])
build/emerald/src/battle_main.i:                             && (gBattleStruct->throwingPokeBall || gChosenActionByBattler[GetBattlerAtPosition(0)] == 3))
build/emerald/src/battle_main.i:                        gBattleStruct->throwingPokeBall = 0;
build/emerald/src/battle_main.i:                        *(gBattleStruct->selectionScriptFinished + gActiveBattler) = 0;
build/emerald/src/battle_main.i:                        *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_WAIT_ACTION_CONFIRMED_STANDBY;
build/emerald/src/battle_main.i:                        *(gBattleStruct->moveTarget + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][3];
build/emerald/src/battle_main.i:                        *(gBattleStruct->chosenMovePositions + gActiveBattler) = gDisableStructs[gActiveBattler].encoredMovePos;
build/emerald/src/battle_main.i:                        moveInfo.mega = gBattleStruct->mega;
build/emerald/src/battle_main.i:                        *(gBattleStruct->selectionScriptFinished + gActiveBattler) = 0;
build/emerald/src/battle_main.i:                        *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_BEFORE_ACTION_CHOSEN;
build/emerald/src/battle_main.i:                        BtlController_EmitChooseItem(0, gBattleStruct->field_60[gActiveBattler]);
build/emerald/src/battle_main.i:                    *(gBattleStruct->field_58 + gActiveBattler) = gBattlerPartyIndexes[gActiveBattler];
build/emerald/src/battle_main.i:                        BtlController_EmitChoosePokemon(0, 2, 6, 0, gBattleStruct->field_60[gActiveBattler]);
build/emerald/src/battle_main.i:                        BtlController_EmitChoosePokemon(0, ((i - 1) << 4) | 4, 6, gBattleMons[i - 1].ability, gBattleStruct->field_60[gActiveBattler]);
build/emerald/src/battle_main.i:                            BtlController_EmitChoosePokemon(0, 0, *(gBattleStruct->monToSwitchIntoId + 0), 0, gBattleStruct->field_60[gActiveBattler]);
build/emerald/src/battle_main.i:                            BtlController_EmitChoosePokemon(0, 0, *(gBattleStruct->monToSwitchIntoId + 1), 0, gBattleStruct->field_60[gActiveBattler]);
build/emerald/src/battle_main.i:                            BtlController_EmitChoosePokemon(0, 0, 6, 0, gBattleStruct->field_60[gActiveBattler]);
build/emerald/src/battle_main.i:                        *(gBattleStruct->selectionScriptFinished + gActiveBattler) = 0;
build/emerald/src/battle_main.i:                        *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_BEFORE_ACTION_CHOSEN;
build/emerald/src/battle_main.i:                    BtlController_EmitChooseItem(0, gBattleStruct->field_60[gActiveBattler]);
build/emerald/src/battle_main.i:                    gBattleStruct->mega.toEvolve &= ~(gBitTable[((GetBattlerPosition(gActiveBattler)) ^ 2)]);
build/emerald/src/battle_main.i:                    *(gBattleStruct->selectionScriptFinished + gActiveBattler) = 0;
build/emerald/src/battle_main.i:                    *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_BEFORE_ACTION_CHOSEN;
build/emerald/src/battle_main.i:                    *(gBattleStruct->selectionScriptFinished + gActiveBattler) = 0;
build/emerald/src/battle_main.i:                    *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_BEFORE_ACTION_CHOSEN;
build/emerald/src/battle_main.i:                            *(gBattleStruct->selectionScriptFinished + gActiveBattler) = 0;
build/emerald/src/battle_main.i:                            *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_WAIT_ACTION_CHOSEN;
build/emerald/src/battle_main.i:                            *(gBattleStruct->chosenMovePositions + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][2] & ~(0x80);
build/emerald/src/battle_main.i:                            gChosenMoveByBattler[gActiveBattler] = gBattleMons[gActiveBattler].moves[*(gBattleStruct->chosenMovePositions + gActiveBattler)];
build/emerald/src/battle_main.i:                            *(gBattleStruct->moveTarget + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][3];
build/emerald/src/battle_main.i:                                gBattleStruct->mega.toEvolve |= gBitTable[gActiveBattler];
build/emerald/src/battle_main.i:                            gBattleStruct->throwingPokeBall = 1;
build/emerald/src/battle_main.i:                    || (*(&gBattleStruct->field_91) & gBitTable[GetBattlerAtPosition(position ^ 2)]))
build/emerald/src/battle_main.i:            if (*(gBattleStruct->selectionScriptFinished + gActiveBattler))
build/emerald/src/battle_main.i:                gBattleCommunication[gActiveBattler] = *(gBattleStruct->stateIdAfterSelScript + gActiveBattler);
build/emerald/src/battle_main.i:            if (*(gBattleStruct->selectionScriptFinished + gActiveBattler))
build/emerald/src/battle_main.i:                    gBattleCommunication[gActiveBattler] = *(gBattleStruct->stateIdAfterSelScript + gActiveBattler);
build/emerald/src/battle_main.i:                    SwitchPartyOrderInGameMulti(i, *(gBattleStruct->monToSwitchIntoId + i));
build/emerald/src/battle_main.i:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][1];
build/emerald/src/battle_main.i:        *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 0) &= 0xF;
build/emerald/src/battle_main.i:        *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 0) |= (gBattleResources->bufferB[gActiveBattler][2] & 0xF0);
build/emerald/src/battle_main.i:        *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 1) = gBattleResources->bufferB[gActiveBattler][3];
build/emerald/src/battle_main.i:        *((gActiveBattler ^ 2) * 3 + (u8*)(gBattleStruct->field_60) + 0) &= (0xF0);
build/emerald/src/battle_main.i:        *((gActiveBattler ^ 2) * 3 + (u8*)(gBattleStruct->field_60) + 0) |= (gBattleResources->bufferB[gActiveBattler][2] & 0xF0) >> 4;
build/emerald/src/battle_main.i:        *((gActiveBattler ^ 2) * 3 + (u8*)(gBattleStruct->field_60) + 2) = gBattleResources->bufferB[gActiveBattler][3];
build/emerald/src/battle_main.i:        move = gBattleMons[battlerId].moves[*(gBattleStruct->chosenMovePositions + battlerId)];
build/emerald/src/battle_main.i:            gBattleStruct->mega.battlerId = 0;
build/emerald/src/battle_main.i:    gBattleStruct->mega.battlerId = 0;
build/emerald/src/battle_main.i:        while (gBattleStruct->mega.battlerId < gBattlersCount)
build/emerald/src/battle_main.i:            gActiveBattler = gBattlerAttacker = gBattleStruct->mega.battlerId;
build/emerald/src/battle_main.i:            gBattleStruct->mega.battlerId++;
build/emerald/src/battle_main.i:            if (gBattleStruct->mega.toEvolve & gBitTable[gActiveBattler]
build/emerald/src/battle_main.i:                gBattleStruct->mega.toEvolve &= ~(gBitTable[gActiveBattler]);
build/emerald/src/battle_main.i:                if (gBattleStruct->mega.isWishMegaEvo == 1)
build/emerald/src/battle_main.i:    gBattleStruct->focusPunchBattlerId = 0;
build/emerald/src/battle_main.i:        while (gBattleStruct->focusPunchBattlerId < gBattlersCount)
build/emerald/src/battle_main.i:            gActiveBattler = gBattlerAttacker = gBattleStruct->focusPunchBattlerId;
build/emerald/src/battle_main.i:            gBattleStruct->focusPunchBattlerId++;
build/emerald/src/battle_main.i:    gBattleStruct->dynamicMoveType = 0;
build/emerald/src/battle_main.i:        gBattleStruct->ateBoost[i] = 0;
build/emerald/src/battle_main.i:    *(&gBattleStruct->savedTurnActionNumber) = gCurrentTurnActionNumber;
build/emerald/src/battle_main.i:        if (gBattleStruct->savedTurnActionNumber != gCurrentTurnActionNumber)
build/emerald/src/battle_main.i:    gBattleStruct->dynamicMoveType = 0;
build/emerald/src/battle_main.i:    gBattleStruct->ateBoost[battlerAtk] = 0;
build/emerald/src/battle_main.i:                gBattleStruct->dynamicMoveType = 11 | 0x80;
build/emerald/src/battle_main.i:                gBattleStruct->dynamicMoveType = 5 | 0x80;
build/emerald/src/battle_main.i:                gBattleStruct->dynamicMoveType = 10 | 0x80;
build/emerald/src/battle_main.i:                gBattleStruct->dynamicMoveType = 15 | 0x80;
build/emerald/src/battle_main.i:                gBattleStruct->dynamicMoveType = 0 | 0x80;
build/emerald/src/battle_main.i:        gBattleStruct->dynamicMoveType = (15 * typeBits) / 63 + 1;
build/emerald/src/battle_main.i:        if (gBattleStruct->dynamicMoveType >= 9)
build/emerald/src/battle_main.i:            gBattleStruct->dynamicMoveType++;
build/emerald/src/battle_main.i:        gBattleStruct->dynamicMoveType |= 0xC0;
build/emerald/src/battle_main.i:            gBattleStruct->dynamicMoveType = ItemId_GetSecondaryId(gBattleMons[battlerAtk].item) | 0x80;
build/emerald/src/battle_main.i:            gBattleStruct->dynamicMoveType = gBattleMons[battlerAtk].type1 | 0x80;
build/emerald/src/battle_main.i:            gBattleStruct->dynamicMoveType = gBattleMons[battlerAtk].type2 | 0x80;
build/emerald/src/battle_main.i:            gBattleStruct->dynamicMoveType = gBattleMons[battlerAtk].type3 | 0x80;
build/emerald/src/battle_main.i:            gBattleStruct->dynamicMoveType = gNaturalGiftTable[(((gBattleMons[battlerAtk].item) - 144) + 1)].type;
build/emerald/src/battle_main.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[move].type; };
build/emerald/src/battle_main.i:        gBattleStruct->dynamicMoveType = 0x80 | 13;
build/emerald/src/battle_main.i:        gBattleStruct->dynamicMoveType = 0x80 | ateType;
build/emerald/src/battle_main.i:        gBattleStruct->ateBoost[battlerAtk] = 1;
build/emerald/src/battle_main.i:        gBattleStruct->dynamicMoveType = 0x80 | 0;
build/emerald/src/battle_main.i:        gBattleStruct->ateBoost[battlerAtk] = 1;
build/emerald/src/battle_main.i:        gBattleStruct->dynamicMoveType = 0x80 | 11;
build/emerald/src/battle_main.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[move].type; };
build/emerald/src/battle_message.i:    gBattleStruct->field_52 = gBattleMsgDataPtr->unk1605E;
build/emerald/src/battle_message.i:    gBattleStruct->hpScale = gBattleMsgDataPtr->hpScale;
build/emerald/src/battle_message.i:    gBattleStruct->stringMoveType = gBattleMsgDataPtr->moveType;
build/emerald/src/battle_message.i:            if (*(&gBattleStruct->hpScale) == 0)
build/emerald/src/battle_message.i:            else if (*(&gBattleStruct->hpScale) == 1 || gBattleTypeFlags & (1 << 0))
build/emerald/src/battle_message.i:            else if (*(&gBattleStruct->hpScale) == 2)
build/emerald/src/battle_message.i:            if (*(&gBattleStruct->hpScale) == 0 || gBattleTypeFlags & (1 << 0))
build/emerald/src/battle_message.i:            else if (*(&gBattleStruct->hpScale) == 1)
build/emerald/src/battle_message.i:            else if (*(&gBattleStruct->hpScale) == 2)
build/emerald/src/battle_message.i:            StringCopy(gBattleTextBuff3, sATypeMove_Table[*(&gBattleStruct->stringMoveType)]);
build/emerald/src/battle_message.i:        stringPtr = gBattleStruct->trainerSlideMsg;
build/emerald/src/battle_message.i:                    toCpy = sATypeMove_Table[gBattleStruct->stringMoveType];
build/emerald/src/battle_message.i:                    toCpy = sATypeMove_Table[gBattleStruct->stringMoveType];
build/emerald/src/battle_message.i:                    GetMonData(&gEnemyParty[gBattleStruct->field_52], 2, text);
build/emerald/src/battle_message.i:                    GetMonData(&gPlayerParty[gBattleStruct->field_52], 2, text);
build/emerald/src/battle_message.i:                    gBattleStruct->trainerSlideMsg = sTrainerSlides[i].msgLastSwitchIn;
build/emerald/src/battle_message.i:                    && !gBattleStruct->trainerSlideLowHpMsgDone)
build/emerald/src/battle_message.i:                    gBattleStruct->trainerSlideLowHpMsgDone = 1;
build/emerald/src/battle_message.i:                    gBattleStruct->trainerSlideMsg = sTrainerSlides[i].msgLastLowHp;
build/emerald/src/battle_message.i:                    gBattleStruct->trainerSlideMsg = sTrainerSlides[i].msgFirstDown;
build/emerald/src/recorded_battle.i:                    gChosenMoveByBattler[battlerId] = gBattleMons[battlerId].moves[*(gBattleStruct->chosenMovePositions + battlerId)];
build/emerald/src/battle_util2.i:            gBattlePartyCurrentOrder[i] = *(0 * 3 + i + (u8*)(gBattleStruct->field_60));
build/emerald/src/battle_util2.i:            *(0 * 3 + i + (u8*)(gBattleStruct->field_60)) = gBattlePartyCurrentOrder[i];
build/emerald/src/battle_controller_recorded_player.i:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = RecordedBattle_GetBattlerAction(gActiveBattler);
build/emerald/src/battle_controller_recorded_player.i:    BtlController_EmitChosenMonReturnValue(1, *(gBattleStruct->monToSwitchIntoId + gActiveBattler), ((void *)0));
build/emerald/src/battle_controllers.i:    for (i = 0; i < sizeof(gBattleStruct->tvMovePoints); i++)
build/emerald/src/battle_controllers.i:        *((u8*)(&gBattleStruct->tvMovePoints) + i) = 0;
build/emerald/src/battle_controllers.i:    for (i = 0; i < sizeof(gBattleStruct->tv); i++)
build/emerald/src/battle_controllers.i:        *((u8*)(&gBattleStruct->tv) + i) = 0;
build/emerald/src/battle_controllers.i:    stringInfo->unk1605E = gBattleStruct->field_52;
build/emerald/src/battle_controllers.i:    stringInfo->hpScale = gBattleStruct->hpScale;
build/emerald/src/battle_controllers.i:    stringInfo->unk1605E = gBattleStruct->field_52;
build/emerald/src/battle_script_commands.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[gCurrentMove].type; };
build/emerald/src/battle_script_commands.i:        { if (gBattleStruct->dynamicMoveType) type = gBattleStruct->dynamicMoveType & 0x3F; else type = gBattleMoves[move].type; };
build/emerald/src/battle_script_commands.i:                gBattleStruct->sameMoveTurns[gBattlerAttacker]++;
build/emerald/src/battle_script_commands.i:            gBattleStruct->sameMoveTurns[gBattlerAttacker] = 0;
build/emerald/src/battle_script_commands.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[gCurrentMove].type; };
build/emerald/src/battle_script_commands.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[gCurrentMove].type; };
build/emerald/src/battle_script_commands.i:    if (gBattleStruct->dynamicMoveType == 0)
build/emerald/src/battle_script_commands.i:    else if (!(gBattleStruct->dynamicMoveType & 0x40))
build/emerald/src/battle_script_commands.i:        moveType = gBattleStruct->dynamicMoveType & 0x3F;
build/emerald/src/battle_script_commands.i:        gBattleStruct->moveEffect2 = gBattleScripting.moveEffect;
build/emerald/src/battle_script_commands.i:                gBattleStruct->synchronizeMoveEffect = gBattleScripting.moveEffect;
build/emerald/src/battle_script_commands.i:                    gBattleStruct->moneyMultiplier *= 2;
build/emerald/src/battle_script_commands.i:                    gBattleStruct->wrappedMove[gEffectBattler] = gCurrentMove;
build/emerald/src/battle_script_commands.i:                    gBattleStruct->wrappedBy[gEffectBattler] = gBattlerAttacker;
build/emerald/src/battle_script_commands.i:                        gLastUsedItem = gBattleStruct->changedItems[gBattlerAttacker] = gBattleMons[gBattlerTarget].item;
build/emerald/src/battle_script_commands.i:                        gBattleStruct->choicedMove[gBattlerTarget] = 0;
build/emerald/src/battle_script_commands.i:                gBattleStruct->stolenStats[0] = 0;
build/emerald/src/battle_script_commands.i:                        gBattleStruct->stolenStats[0] |= gBitTable[i];
build/emerald/src/battle_script_commands.i:                        gBattleStruct->stolenStats[i] = gBattleMons[gBattlerTarget].statStages[i] - 6;
build/emerald/src/battle_script_commands.i:                        while (gBattleMons[gBattlerAttacker].statStages[i] + gBattleStruct->stolenStats[i] > 12)
build/emerald/src/battle_script_commands.i:                            gBattleStruct->stolenStats[i]--;
build/emerald/src/battle_script_commands.i:                        if (gBattleStruct->stolenStats[i] >= 2)
build/emerald/src/battle_script_commands.i:                if (gBattleStruct->stolenStats[0] != 0)
build/emerald/src/battle_script_commands.i:                u8 moveIndex = *(gBattleStruct->chosenMovePositions + gBattlerAttacker);
build/emerald/src/battle_script_commands.i:    u16 *exp = &gBattleStruct->expValue;
build/emerald/src/battle_script_commands.i:            gBattleStruct->givenExpMons |= gBitTable[gBattlerPartyIndexes[gBattlerFainted]];
build/emerald/src/battle_script_commands.i:            gBattleStruct->expGetterMonId = 0;
build/emerald/src/battle_script_commands.i:            gBattleStruct->sentInPokes = sentIn;
build/emerald/src/battle_script_commands.i:            item = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 12);
build/emerald/src/battle_script_commands.i:            if (holdEffect != 25 && !(gBattleStruct->sentInPokes & 1))
build/emerald/src/battle_script_commands.i:                *(&gBattleStruct->sentInPokes) >>= 1;
build/emerald/src/battle_script_commands.i:            else if (GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 56) == 100)
build/emerald/src/battle_script_commands.i:                *(&gBattleStruct->sentInPokes) >>= 1;
build/emerald/src/battle_script_commands.i:                    && !gBattleStruct->wildVictorySong)
build/emerald/src/battle_script_commands.i:                    gBattleStruct->wildVictorySong++;
build/emerald/src/battle_script_commands.i:                if (GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 57))
build/emerald/src/battle_script_commands.i:                    if (gBattleStruct->sentInPokes & 1)
build/emerald/src/battle_script_commands.i:                    if (IsTradedMon(&gPlayerParty[gBattleStruct->expGetterMonId]))
build/emerald/src/battle_script_commands.i:                        if (gBattleTypeFlags & (1 << 22) && gBattleStruct->expGetterMonId >= 3)
build/emerald/src/battle_script_commands.i:                        if (!(gBattlerPartyIndexes[2] != gBattleStruct->expGetterMonId) && !(gAbsentBattlerFlags & gBitTable[2]))
build/emerald/src/battle_script_commands.i:                            gBattleStruct->expGetterBattlerId = 2;
build/emerald/src/battle_script_commands.i:                                gBattleStruct->expGetterBattlerId = 0;
build/emerald/src/battle_script_commands.i:                                gBattleStruct->expGetterBattlerId = 2;
build/emerald/src/battle_script_commands.i:                        gBattleStruct->expGetterBattlerId = 0;
build/emerald/src/battle_script_commands.i:                    { gBattleTextBuff1[0] = 0xFD; gBattleTextBuff1[1] = 4; gBattleTextBuff1[2] = gBattleStruct->expGetterBattlerId; gBattleTextBuff1[3] = gBattleStruct->expGetterMonId; gBattleTextBuff1[4] = 0xFF; };
build/emerald/src/battle_script_commands.i:                    PrepareStringBattle(13, gBattleStruct->expGetterBattlerId);
build/emerald/src/battle_script_commands.i:                    MonGainEVs(&gPlayerParty[gBattleStruct->expGetterMonId], gBattleMons[gBattlerFainted].species);
build/emerald/src/battle_script_commands.i:                gBattleStruct->sentInPokes >>= 1;
build/emerald/src/battle_script_commands.i:            gBattleResources->bufferB[gBattleStruct->expGetterBattlerId][0] = 0;
build/emerald/src/battle_script_commands.i:            if (GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 57) && GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 56) != 100)
build/emerald/src/battle_script_commands.i:                gBattleResources->beforeLvlUp->stats[0] = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 58);
build/emerald/src/battle_script_commands.i:                gBattleResources->beforeLvlUp->stats[1] = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 59);
build/emerald/src/battle_script_commands.i:                gBattleResources->beforeLvlUp->stats[2] = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 60);
build/emerald/src/battle_script_commands.i:                gBattleResources->beforeLvlUp->stats[3] = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 61);
build/emerald/src/battle_script_commands.i:                gBattleResources->beforeLvlUp->stats[4] = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 62);
build/emerald/src/battle_script_commands.i:                gBattleResources->beforeLvlUp->stats[5] = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 63);
build/emerald/src/battle_script_commands.i:                gActiveBattler = gBattleStruct->expGetterBattlerId;
build/emerald/src/battle_script_commands.i:                BtlController_EmitExpUpdate(0, gBattleStruct->expGetterMonId, gBattleMoveDamage);
build/emerald/src/battle_script_commands.i:            gActiveBattler = gBattleStruct->expGetterBattlerId;
build/emerald/src/battle_script_commands.i:                if (gBattleTypeFlags & (1 << 3) && gBattlerPartyIndexes[gActiveBattler] == gBattleStruct->expGetterMonId)
build/emerald/src/battle_script_commands.i:                { gBattleTextBuff1[0] = 0xFD; gBattleTextBuff1[1] = 4; gBattleTextBuff1[2] = gActiveBattler; gBattleTextBuff1[3] = gBattleStruct->expGetterMonId; gBattleTextBuff1[4] = 0xFF; };
build/emerald/src/battle_script_commands.i:                { gBattleTextBuff2[0] = 0xFD; gBattleTextBuff2[1] = 1; gBattleTextBuff2[2] = 1; gBattleTextBuff2[3] = 3; gBattleTextBuff2[4] = (GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 56)); gBattleTextBuff2[5] = 0xFF; };
build/emerald/src/battle_script_commands.i:                gLeveledUpInBattle |= gBitTable[gBattleStruct->expGetterMonId];
build/emerald/src/battle_script_commands.i:                AdjustFriendship(&gPlayerParty[gBattleStruct->expGetterMonId], 0);
build/emerald/src/battle_script_commands.i:                if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId && gBattleMons[0].hp)
build/emerald/src/battle_script_commands.i:                else if (gBattlerPartyIndexes[2] == gBattleStruct->expGetterMonId && gBattleMons[2].hp && (gBattleTypeFlags & (1 << 0)))
build/emerald/src/battle_script_commands.i:                    gBattleMons[battlerId].level = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 56);
build/emerald/src/battle_script_commands.i:                    gBattleMons[battlerId].hp = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 57);
build/emerald/src/battle_script_commands.i:                    gBattleMons[battlerId].maxHP = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 58);
build/emerald/src/battle_script_commands.i:                    gBattleMons[battlerId].attack = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 59);
build/emerald/src/battle_script_commands.i:                    gBattleMons[battlerId].defense = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 60);
build/emerald/src/battle_script_commands.i:                    gBattleMons[battlerId].speed = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 61);
build/emerald/src/battle_script_commands.i:                    gBattleMons[battlerId].spAttack = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 62);
build/emerald/src/battle_script_commands.i:                    gBattleMons[battlerId].spDefense = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 63);
build/emerald/src/battle_script_commands.i:            gBattleStruct->expGetterMonId++;
build/emerald/src/battle_script_commands.i:            if (gBattleStruct->expGetterMonId < 6)
build/emerald/src/battle_script_commands.i:             && (!(gBattleTypeFlags & (1 << 18)) || !(gBattleStruct->arenaLostPlayerMons & gBitTable[i])))
build/emerald/src/battle_script_commands.i:            && (!(gBattleTypeFlags & (1 << 18)) || !(gBattleStruct->arenaLostOpponentMons & gBitTable[i])))
build/emerald/src/battle_script_commands.i:        gBattleStruct->roostTypes[gBattlerAttacker][0] = 2;
build/emerald/src/battle_script_commands.i:        gBattleStruct->roostTypes[gBattlerAttacker][1] = 2;
build/emerald/src/battle_script_commands.i:        gBattleStruct->roostTypes[gBattlerAttacker][2] = 2;
build/emerald/src/battle_script_commands.i:        gBattleStruct->roostTypes[gBattlerAttacker][0] = gBattleMons[gBattlerAttacker].type1;
build/emerald/src/battle_script_commands.i:        gBattleStruct->roostTypes[gBattlerAttacker][1] = gBattleMons[gBattlerAttacker].type2;
build/emerald/src/battle_script_commands.i:        gBattleStruct->roostTypes[gBattlerAttacker][0] = gBattleMons[gBattlerAttacker].type1;
build/emerald/src/battle_script_commands.i:        gBattleStruct->roostTypes[gBattlerAttacker][1] = gBattleMons[gBattlerAttacker].type2;
build/emerald/src/battle_script_commands.i:    *(gBattlerAttacker + gBattleStruct->selectionScriptFinished) = 1;
build/emerald/src/battle_script_commands.i:            gBattleStruct->choicedMove[battlerDef] = 0;
build/emerald/src/battle_script_commands.i:    choicedMoveAtk = &gBattleStruct->choicedMove[gBattlerAttacker];
build/emerald/src/battle_script_commands.i:    { if (gBattleStruct->dynamicMoveType) moveType = gBattleStruct->dynamicMoveType & 0x3F; else moveType = gBattleMoves[gCurrentMove].type; };
build/emerald/src/battle_script_commands.i:                if (gBattleStruct->changedItems[i] != 0)
build/emerald/src/battle_script_commands.i:                    gBattleMons[i].item = gBattleStruct->changedItems[i];
build/emerald/src/battle_script_commands.i:                    gBattleStruct->changedItems[i] = 0;
build/emerald/src/battle_script_commands.i:            switch (gBattleStruct->moveEffect2)
build/emerald/src/battle_script_commands.i:            gBattleStruct->moveEffect2 = 0;
build/emerald/src/battle_script_commands.i:                gBattleStruct->lastMoveFailed |= gBitTable[gBattlerAttacker];
build/emerald/src/battle_script_commands.i:                gBattleStruct->lastMoveFailed &= ~(gBitTable[gBattlerAttacker]);
build/emerald/src/battle_script_commands.i:                gBattleStruct->lastMoveTarget[gBattlerAttacker] = gBattlerTarget;
build/emerald/src/battle_script_commands.i:                && !(gBattleStruct->field_91 & gBitTable[gBattlerAttacker])
build/emerald/src/battle_script_commands.i:                        { if (gBattleStruct->dynamicMoveType) gLastHitByType[gBattlerTarget] = gBattleStruct->dynamicMoveType & 0x3F; else gLastHitByType[gBattlerTarget] = gBattleMoves[gCurrentMove].type; };
build/emerald/src/battle_script_commands.i:            if (!(gAbsentBattlerFlags & gBitTable[gBattlerAttacker]) && !(gBattleStruct->field_91 & gBitTable[gBattlerAttacker])
build/emerald/src/battle_script_commands.i:                gBattleStruct->lastTakenMove[gBattlerTarget] = gChosenMove;
build/emerald/src/battle_script_commands.i:                gBattleStruct->lastTakenMoveFrom[gBattlerTarget][gBattlerAttacker] = gChosenMove;
build/emerald/src/battle_script_commands.i:                if (!(gBattleStruct->lastMoveFailed & gBitTable[gBattlerAttacker]
build/emerald/src/battle_script_commands.i:                *(gBattleStruct->moveTarget + gBattlerAttacker) = gSpecialStatuses[gBattlerAttacker].instructedChosenTarget & 0x3;
build/emerald/src/battle_script_commands.i:                *(gBattleStruct->moveTarget + gBattlerAttacker) = gSpecialStatuses[gBattlerAttacker].dancerOriginalTarget & 0x3;
build/emerald/src/battle_script_commands.i:            gBattleStruct->ateBoost[gBattlerAttacker] = 0;
build/emerald/src/battle_script_commands.i:    gBattlerPartyIndexes[gActiveBattler] = *(gBattleStruct->monToSwitchIntoId + gActiveBattler);
build/emerald/src/battle_script_commands.i:        gBattleStruct->palaceFlags |= gBitTable[gActiveBattler];
build/emerald/src/battle_script_commands.i:    *(gBattleStruct->field_58 + gActiveBattler) = gBattlerPartyIndexes[gActiveBattler];
build/emerald/src/battle_script_commands.i:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_script_commands.i:    gBattleStruct->field_93 &= ~(gBitTable[gActiveBattler]);
build/emerald/src/battle_script_commands.i:    BtlController_EmitChoosePokemon(0, 1, slotId, 0, gBattleStruct->field_60[gActiveBattler]);
build/emerald/src/battle_script_commands.i:                    sub_804CF10(gBattleStruct->monToSwitchIntoId[2]);
build/emerald/src/battle_script_commands.i:                    sub_804CF10(gBattleStruct->monToSwitchIntoId[0]);
build/emerald/src/battle_script_commands.i:                    sub_804CF10(gBattleStruct->monToSwitchIntoId[3]);
build/emerald/src/battle_script_commands.i:                    sub_804CF10(gBattleStruct->monToSwitchIntoId[1]);
build/emerald/src/battle_script_commands.i:                        sub_804CF10(gBattleStruct->monToSwitchIntoId[0]);
build/emerald/src/battle_script_commands.i:                        sub_804CF10(gBattleStruct->monToSwitchIntoId[1]);
build/emerald/src/battle_script_commands.i:            *(gBattleStruct->field_58 + gActiveBattler) = gBattlerPartyIndexes[gActiveBattler];
build/emerald/src/battle_script_commands.i:            *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_script_commands.i:            gBattleStruct->field_93 &= ~(gBitTable[gActiveBattler]);
build/emerald/src/battle_script_commands.i:            BtlController_EmitChoosePokemon(0, hitmarkerFaintBits, *(gBattleStruct->monToSwitchIntoId + (gActiveBattler ^ 2)), 0, gBattleStruct->field_60[gActiveBattler]);
build/emerald/src/battle_script_commands.i:                *(gBattleStruct->monToSwitchIntoId + i) = gBattleResources->bufferB[i][1];
build/emerald/src/battle_script_commands.i:                if (!(gBattleStruct->field_93 & gBitTable[i]))
build/emerald/src/battle_script_commands.i:                    gBattleStruct->field_93 |= gBitTable[i];
build/emerald/src/battle_script_commands.i:        if (!(gBattleStruct->field_93 & gBitTable[gActiveBattler]))
build/emerald/src/battle_script_commands.i:            gBattleStruct->field_93 |= gBitTable[gActiveBattler];
build/emerald/src/battle_script_commands.i:        *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][1];
build/emerald/src/battle_script_commands.i:            *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 0) &= 0xF;
build/emerald/src/battle_script_commands.i:            *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 0) |= (gBattleResources->bufferB[gActiveBattler][2] & 0xF0);
build/emerald/src/battle_script_commands.i:            *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 1) = gBattleResources->bufferB[gActiveBattler][3];
build/emerald/src/battle_script_commands.i:            *((gActiveBattler ^ 2) * 3 + (u8*)(gBattleStruct->field_60) + 0) &= (0xF0);
build/emerald/src/battle_script_commands.i:            *((gActiveBattler ^ 2) * 3 + (u8*)(gBattleStruct->field_60) + 0) |= (gBattleResources->bufferB[gActiveBattler][2] & 0xF0) >> 4;
build/emerald/src/battle_script_commands.i:            *((gActiveBattler ^ 2) * 3 + (u8*)(gBattleStruct->field_60) + 2) = gBattleResources->bufferB[gActiveBattler][3];
build/emerald/src/battle_script_commands.i:            SwitchPartyOrderInGameMulti(gActiveBattler, *(gBattleStruct->monToSwitchIntoId + gActiveBattler));
build/emerald/src/battle_script_commands.i:            gBattleStruct->hpOnSwitchout[GetBattlerSide(i)] = gBattleMons[i].hp;
build/emerald/src/battle_script_commands.i:    u16 learnMove = MonTryLearningNewMove(&gPlayerParty[gBattleStruct->expGetterMonId], gBattlescriptCurrInstr[9]);
build/emerald/src/battle_script_commands.i:        learnMove = MonTryLearningNewMove(&gPlayerParty[gBattleStruct->expGetterMonId], 0);
build/emerald/src/battle_script_commands.i:        if (gBattlerPartyIndexes[gActiveBattler] == gBattleStruct->expGetterMonId
build/emerald/src/battle_script_commands.i:            if (gBattlerPartyIndexes[gActiveBattler] == gBattleStruct->expGetterMonId
build/emerald/src/battle_script_commands.i:            ShowSelectMovePokemonSummaryScreen(gPlayerParty, gBattleStruct->expGetterMonId, gPlayerPartyCount - 1, ReshowBattleScreenAfterMenu, gMoveToLearn);
build/emerald/src/battle_script_commands.i:                u16 moveId = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 13 + movePosition);
build/emerald/src/battle_script_commands.i:                    RemoveMonPPBonus(&gPlayerParty[gBattleStruct->expGetterMonId], movePosition);
build/emerald/src/battle_script_commands.i:                    SetMonMoveSlot(&gPlayerParty[gBattleStruct->expGetterMonId], gMoveToLearn, movePosition);
build/emerald/src/battle_script_commands.i:                    if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId
build/emerald/src/battle_script_commands.i:                        && gBattlerPartyIndexes[2] == gBattleStruct->expGetterMonId
build/emerald/src/battle_script_commands.i:        moneyReward = 20 * gBattleResources->secretBase->party.levels[0] * gBattleStruct->moneyMultiplier;
build/emerald/src/battle_script_commands.i:            moneyReward = 4 * lastMonLevel * gBattleStruct->moneyMultiplier * gTrainerMoneyTable[i].value;
build/emerald/src/battle_script_commands.i:            moneyReward = 4 * lastMonLevel * gBattleStruct->moneyMultiplier * 2 * gTrainerMoneyTable[i].value;
build/emerald/src/battle_script_commands.i:            moneyReward = 4 * lastMonLevel * gBattleStruct->moneyMultiplier * gTrainerMoneyTable[i].value;
build/emerald/src/battle_script_commands.i:        && gBattleStruct->ateBerry[GetBattlerSide(battlerId)] & gBitTable[gBattlerPartyIndexes[battlerId]]
build/emerald/src/battle_script_commands.i:        gBattleStruct->usedHeldItems[gActiveBattler] = itemId;
build/emerald/src/battle_script_commands.i:    GetMonLevelUpWindowStats(&gPlayerParty[gBattleStruct->expGetterMonId], currStats);
build/emerald/src/battle_script_commands.i:    GetMonLevelUpWindowStats(&gPlayerParty[gBattleStruct->expGetterMonId], currStats);
build/emerald/src/battle_script_commands.i:    monLevel = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 56);
build/emerald/src/battle_script_commands.i:    monGender = GetMonGender(&gPlayerParty[gBattleStruct->expGetterMonId]);
build/emerald/src/battle_script_commands.i:    GetMonNickname(&gPlayerParty[gBattleStruct->expGetterMonId], gStringVar4);
build/emerald/src/battle_script_commands.i:    u16 species = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 11);
build/emerald/src/battle_script_commands.i:    u32 personality = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], 0);
build/emerald/src/battle_script_commands.i:    if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId)
build/emerald/src/battle_script_commands.i:    if (gBattleTypeFlags & (1 << 0) && gBattlerPartyIndexes[2] == gBattleStruct->expGetterMonId)
build/emerald/src/battle_script_commands.i:            gBattleStruct->hpScale = 0;
build/emerald/src/battle_script_commands.i:            gBattleStruct->hpScale = 1;
build/emerald/src/battle_script_commands.i:            gBattleStruct->hpScale = 2;
build/emerald/src/battle_script_commands.i:            gBattleStruct->hpScale = 3;
build/emerald/src/battle_script_commands.i:        hpSwitchout = *(gBattleStruct->hpOnSwitchout + GetBattlerSide(opposingBank));
build/emerald/src/battle_script_commands.i:            gBattleStruct->hpScale = 0;
build/emerald/src/battle_script_commands.i:            gBattleStruct->hpScale = 1;
build/emerald/src/battle_script_commands.i:            gBattleStruct->hpScale = 2;
build/emerald/src/battle_script_commands.i:            gBattleStruct->hpScale = 3;
build/emerald/src/battle_script_commands.i:        && gBattleStruct->moveTarget[gBattlerAttacker] == gBattlerTarget
build/emerald/src/battle_script_commands.i:        while (gBattleStruct->friskedBattler < gBattlersCount)
build/emerald/src/battle_script_commands.i:            gBattlerTarget = gBattleStruct->friskedBattler++;
build/emerald/src/battle_script_commands.i:                if (gBattleStruct->friskedAbility)
build/emerald/src/battle_script_commands.i:                    gBattleStruct->friskedAbility = 1;
build/emerald/src/battle_script_commands.i:        gBattleStruct->friskedBattler = 0;
build/emerald/src/battle_script_commands.i:        gBattleStruct->friskedAbility = 0;
build/emerald/src/battle_script_commands.i:        gBattleMons[gActiveBattler].ability = gBattleStruct->tracedAbility[gActiveBattler];
build/emerald/src/battle_script_commands.i:        gBattleStruct->spriteIgnore0Hp = gBattlescriptCurrInstr[3];
build/emerald/src/battle_script_commands.i:            if (gBattleStruct->stolenStats[0] & gBitTable[i])
build/emerald/src/battle_script_commands.i:                gBattleStruct->stolenStats[0] &= ~(gBitTable[i]);
build/emerald/src/battle_script_commands.i:                (gBattleScripting.statChanger = (i) + ((gBattleStruct->stolenStats[i]) << 3) + (0 << 7));
build/emerald/src/battle_script_commands.i:        if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId || gBattlerPartyIndexes[2] == gBattleStruct->expGetterMonId)
build/emerald/src/battle_script_commands.i:            if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId)
build/emerald/src/battle_script_commands.i:                if (gBattleMons[gActiveBattler].moves[i] == gBattleStruct->choicedMove[gActiveBattler])
build/emerald/src/battle_script_commands.i:                gBattleStruct->choicedMove[gActiveBattler] = 0;
build/emerald/src/battle_script_commands.i:        if (!(gBattleStruct->palaceFlags & gBitTable[gActiveBattler])
build/emerald/src/battle_script_commands.i:            gBattleStruct->palaceFlags |= gBitTable[gActiveBattler];
build/emerald/src/battle_script_commands.i:        gBattleStruct->arenaLostOpponentMons |= gBitTable[gBattlerPartyIndexes[1]];
build/emerald/src/battle_script_commands.i:        gBattleStruct->arenaLostPlayerMons |= gBitTable[gBattlerPartyIndexes[0]];
build/emerald/src/battle_script_commands.i:        gBattleStruct->arenaLostPlayerMons |= gBitTable[gBattlerPartyIndexes[0]];
build/emerald/src/battle_script_commands.i:        gBattleStruct->arenaLostOpponentMons |= gBitTable[gBattlerPartyIndexes[1]];
build/emerald/src/battle_script_commands.i:        gBattleStruct->alreadyStatusedMoveAttempt |= gBitTable[gActiveBattler];
build/emerald/src/battle_script_commands.i:        gBattleStruct->savedBattlerTarget = gBattlerTarget;
build/emerald/src/battle_script_commands.i:        gBattlerTarget = gBattleStruct->savedBattlerTarget;
build/emerald/src/battle_script_commands.i:                gBattleStruct->tracedAbility[gBattlerAbility] = gBattleMons[gActiveBattler].ability;
build/emerald/src/battle_script_commands.i:        while (gBattleStruct->soulheartBattlerId < gBattlersCount)
build/emerald/src/battle_script_commands.i:            gBattleScripting.battler = gBattleStruct->soulheartBattlerId++;
build/emerald/src/battle_script_commands.i:        gBattleStruct->soulheartBattlerId = 0;
build/emerald/src/battle_script_commands.i:        else if (gBattleMoves[gBattleMons[gBattlerTarget].moves[gBattleStruct->chosenMovePositions[gBattlerTarget]]].power == 0)
build/emerald/src/battle_script_commands.i:        else if (gBattleMoves[gBattleMons[gBattlerTarget].moves[gBattleStruct->chosenMovePositions[gBattlerTarget]]].power == 0)
build/emerald/src/battle_script_commands.i:            u16 move = gBattleMons[gBattlerTarget].moves[gBattleStruct->chosenMovePositions[gBattlerTarget]];
build/emerald/src/battle_script_commands.i:            gBattleStruct->mega.evolvedSpecies[gActiveBattler] = gBattleMons[gActiveBattler].species;
build/emerald/src/battle_script_commands.i:                gBattleStruct->mega.playerEvolvedSpecies = gBattleStruct->mega.evolvedSpecies[gActiveBattler];
build/emerald/src/battle_script_commands.i:            megaSpecies = GetMegaEvolutionSpecies(gBattleStruct->mega.evolvedSpecies[gActiveBattler], gBattleMons[gActiveBattler].item);
build/emerald/src/battle_script_commands.i:                megaSpecies = GetWishMegaEvolutionSpecies(gBattleStruct->mega.evolvedSpecies[gActiveBattler], gBattleMons[gActiveBattler].moves[0], gBattleMons[gActiveBattler].moves[1], gBattleMons[gActiveBattler].moves[2], gBattleMons[gActiveBattler].moves[3]);
build/emerald/src/battle_script_commands.i:            gBattleStruct->mega.alreadyEvolved[GetBattlerPosition(gActiveBattler)] = 1;
build/emerald/src/battle_script_commands.i:            gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(gActiveBattler)] |= gBitTable[gBattlerPartyIndexes[gActiveBattler]];
build/emerald/src/battle_script_commands.i:            gSpecialStatuses[gBattlerTarget].instructedChosenTarget = *(gBattleStruct->moveTarget + gBattlerTarget) | 0x4;
build/emerald/src/battle_script_commands.i:                gBattlerTarget = gBattleStruct->lastMoveTarget[gBattlerAttacker];
build/emerald/src/battle_script_commands.i:            move = gBattleStruct->lastTakenMoveFrom[gBattlerAttacker][i];
build/emerald/src/battle_script_commands.i:    move = gBattleStruct->lastTakenMove[gBattlerAttacker];
build/emerald/src/battle_script_commands.i:            *(gBattleStruct->field_58 + gBattlerTarget) = gBattlerPartyIndexes[gBattlerTarget];
build/emerald/src/battle_script_commands.i:            *(gBattleStruct->monToSwitchIntoId + gBattlerTarget) = i;
build/emerald/src/battle_script_commands.i:        u32 bonusMoney = gPaydayMoney * gBattleStruct->moneyMultiplier;
build/emerald/src/battle_script_commands.i:        || gBattleStruct->illusion[gBattlerTarget].on
build/emerald/src/battle_script_commands.i:        gBattleStruct->presentBasePower = 40;
build/emerald/src/battle_script_commands.i:        gBattleStruct->presentBasePower = 80;
build/emerald/src/battle_script_commands.i:        gBattleStruct->presentBasePower = 120;
build/emerald/src/battle_script_commands.i:        gBattleStruct->magnitudeBasePower = 10;
build/emerald/src/battle_script_commands.i:        gBattleStruct->magnitudeBasePower = 30;
build/emerald/src/battle_script_commands.i:        gBattleStruct->magnitudeBasePower = 50;
build/emerald/src/battle_script_commands.i:        gBattleStruct->magnitudeBasePower = 70;
build/emerald/src/battle_script_commands.i:        gBattleStruct->magnitudeBasePower = 90;
build/emerald/src/battle_script_commands.i:        gBattleStruct->magnitudeBasePower = 110;
build/emerald/src/battle_script_commands.i:        gBattleStruct->magnitudeBasePower = 150;
build/emerald/src/battle_script_commands.i:        && gBattlerAttacker == *(gBattleStruct->moveTarget + gBattlerTarget)
build/emerald/src/battle_script_commands.i:        gCurrMovePos = gChosenMovePos = *(gBattleStruct->chosenMovePositions + gBattlerTarget);
build/emerald/src/battle_script_commands.i:        gBattlerTarget = *(gBattleStruct->wrappedBy + gBattlerAttacker);
build/emerald/src/battle_script_commands.i:        { gBattleTextBuff1[0] = 0xFD; gBattleTextBuff1[1] = 2; gBattleTextBuff1[2] = (gBattleStruct->wrappedMove[gBattlerAttacker] & 0xFF); gBattleTextBuff1[3] = (gBattleStruct->wrappedMove[gBattlerAttacker] & 0xFF00) >> 8; gBattleTextBuff1[4] = 0xFF; };
build/emerald/src/battle_script_commands.i:            newItemAtk = &gBattleStruct->changedItems[gBattlerAttacker];
build/emerald/src/battle_script_commands.i:            gBattleStruct->choicedMove[gBattlerTarget] = 0;
build/emerald/src/battle_script_commands.i:            gBattleStruct->choicedMove[gBattlerAttacker] = 0;
build/emerald/src/battle_script_commands.i:    u16* movesArray = gBattleStruct->assistPossibleMoves;
build/emerald/src/battle_script_commands.i:    gBattleScripting.battler = gBattleStruct->intimidateBattler;
build/emerald/src/battle_script_commands.i:        BtlController_EmitSetMonData(0, REQUEST_STATUS_BATTLE, gBitTable[*(gBattleStruct->field_58 + gActiveBattler)], 4, &gBattleMons[gActiveBattler].status1);
build/emerald/src/battle_script_commands.i:        BtlController_EmitSetMonData(0, REQUEST_HP_BATTLE, gBitTable[*(gBattleStruct->field_58 + gActiveBattler)], 2, &gBattleMoveDamage);
build/emerald/src/battle_script_commands.i:        *(&gBattleStruct->formToChangeInto) |= 0x80;
build/emerald/src/battle_script_commands.i:    BtlController_EmitBattleAnimation(0, 0, gBattleStruct->formToChangeInto);
build/emerald/src/battle_script_commands.i:        *(&gBattleStruct->formToChangeInto) = form - 1;
build/emerald/src/battle_script_commands.i:    usedHeldItem = &gBattleStruct->usedHeldItems[gActiveBattler];
build/emerald/src/battle_script_commands.i:            catchRate = gBattleStruct->safariCatchFactor * 1275 / 100;
build/emerald/src/battle_script_commands.i:            GetMonData(&gEnemyParty[gBattlerPartyIndexes[gBattlerTarget]], 2, gBattleStruct->caughtMonNick);
build/emerald/src/battle_script_commands.i:            DoNamingScreen(NAMING_SCREEN_CAUGHT_MON, gBattleStruct->caughtMonNick,
build/emerald/src/battle_script_commands.i:            SetMonData(&gEnemyParty[gBattlerPartyIndexes[gBattlerTarget]], 2, gBattleStruct->caughtMonNick);
build/emerald/src/battle_anim_mons.i:        if (!gBattleStruct->spriteIgnore0Hp)
build/emerald/src/party_menu.i:    if (slot < (6 / 2) && (gBattleTypeFlags & (1 << 18)) && gMain.inBattle && (gBattleStruct->arenaLostPlayerMons >> GetPartyIdFromBattleSlot(slot) & 1))
build/emerald/src/party_menu.i:    if (GetPartyIdFromBattleSlot(slot) == gBattleStruct->prevSelectedPartySlot)
build/emerald/src/party_menu.i:    BufferBattlePartyOrderBySide(gBattleStruct->field_60[battlerId], flankId, battlerId);
build/emerald/src/party_menu.i:        partyBattleOrder = gBattleStruct->field_60[battlerId];
build/emerald/src/battle_controller_player_partner.i:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = chosenMonId;
build/emerald/src/battle_controller_recorded_opponent.i:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = RecordedBattle_GetBattlerAction(gActiveBattler);
build/emerald/src/battle_controller_recorded_opponent.i:    BtlController_EmitChosenMonReturnValue(1, *(gBattleStruct->monToSwitchIntoId + gActiveBattler), ((void *)0));
build/emerald/src/battle_debug.i:        data->battlerId = gBattleStruct->debugBattler;
build/emerald/src/battle_debug.i:                                       gBattleStruct->aiFinalScore[data->aiBattlerId][gSprites[data->aiIconSpriteIds[j]].data[0]][i],
build/emerald/src/battle_debug.i:        gBattleStruct->debugBattler = data->battlerId;
build/emerald/src/battle_debug.i:            gBattleStruct->debugHoldEffects[data->battlerId] = data->modifyArrows.currValue;
build/emerald/src/battle_debug.i:            data->modifyArrows.currValue = gBattleStruct->debugHoldEffects[data->battlerId];
build/emerald/src/battle_controller_player.i:        if (gBattleStruct->mega.playerSelect)
build/emerald/src/battle_controller_player.i:        if (gBattleStruct->mega.playerSelect)
build/emerald/src/battle_controller_player.i:            if (gBattleStruct->mega.playerSelect)
build/emerald/src/battle_controller_player.i:        gBattleStruct->mega.playerSelect = 0;
build/emerald/src/battle_controller_player.i:            gBattleStruct->mega.playerSelect ^= 1;
build/emerald/src/battle_controller_player.i:            ChangeMegaTriggerSprite(gBattleStruct->mega.triggerSpriteId, gBattleStruct->mega.playerSelect);
build/emerald/src/battle_controller_player.i:    if (--*(gBattleStruct->arenaMindPoints + gActiveBattler) == 0)
build/emerald/src/battle_controller_player.i:        *(gBattleStruct->arenaMindPoints + gActiveBattler) = 8;
build/emerald/src/battle_controller_player.i:        gBattleStruct->mega.playerSelect = 0;
build/emerald/src/battle_controller_player.i:            gBattleStruct->mega.triggerSpriteId = 0xFF;
build/emerald/src/battle_controller_player.i:        *(&gBattleStruct->battlerPreventingSwitchout) = gBattleResources->bufferA[gActiveBattler][1] >> 4;
build/emerald/src/battle_controller_player.i:        *(&gBattleStruct->prevSelectedPartySlot) = gBattleResources->bufferA[gActiveBattler][2];
build/emerald/src/battle_controller_player.i:        *(&gBattleStruct->abilityPreventingSwitchout) = (gBattleResources->bufferA[gActiveBattler][3] & 0xFF) | (gBattleResources->bufferA[gActiveBattler][7] << 8);
build/emerald/src/battle_intro.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].oam.objMode = 2;
build/emerald/src/battle_intro.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].callback = SpriteCB_VsLetterInit;
build/emerald/src/battle_intro.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].oam.objMode = 2;
build/emerald/src/battle_intro.i:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].callback = SpriteCB_VsLetterInit;
build/emerald/src/battle_ai_switch_items.i:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_ai_switch_items.i:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_ai_switch_items.i:                    *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = i;
build/emerald/src/battle_ai_switch_items.i:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn1))
build/emerald/src/battle_ai_switch_items.i:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn2))
build/emerald/src/battle_ai_switch_items.i:            *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = i;
build/emerald/src/battle_ai_switch_items.i:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_ai_switch_items.i:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_ai_switch_items.i:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_ai_switch_items.i:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn1))
build/emerald/src/battle_ai_switch_items.i:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn2))
build/emerald/src/battle_ai_switch_items.i:                    *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = i;
build/emerald/src/battle_ai_switch_items.i:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn1))
build/emerald/src/battle_ai_switch_items.i:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn2))
build/emerald/src/battle_ai_switch_items.i:            if (*(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) == 6)
build/emerald/src/battle_ai_switch_items.i:                        if (monToSwitchId == *(gBattleStruct->monToSwitchIntoId + battlerIn1))
build/emerald/src/battle_ai_switch_items.i:                        if (monToSwitchId == *(gBattleStruct->monToSwitchIntoId + battlerIn2))
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = monToSwitchId;
build/emerald/src/battle_ai_switch_items.i:            *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler);
build/emerald/src/battle_ai_switch_items.i:    if (*(gBattleStruct->monToSwitchIntoId + gActiveBattler) != 6)
build/emerald/src/battle_ai_switch_items.i:        return *(gBattleStruct->monToSwitchIntoId + gActiveBattler);
build/emerald/src/battle_ai_switch_items.i:            || i == *(gBattleStruct->monToSwitchIntoId + battlerIn1)
build/emerald/src/battle_ai_switch_items.i:            || i == *(gBattleStruct->monToSwitchIntoId + battlerIn2)
build/emerald/src/battle_ai_switch_items.i:        *(gBattleStruct->AI_itemType + gActiveBattler / 2) = GetAI_ItemType(item, itemEffects);
build/emerald/src/battle_ai_switch_items.i:        switch (*(gBattleStruct->AI_itemType + gActiveBattler / 2))
build/emerald/src/battle_ai_switch_items.i:            *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) = 0;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x20;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x10;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x8;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x4;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x2;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x1;
build/emerald/src/battle_ai_switch_items.i:            *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) = 0;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x1;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x2;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x4;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x8;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x10;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x20;
build/emerald/src/battle_ai_switch_items.i:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x40;
build/emerald/src/battle_ai_switch_items.i:            *(gBattleStruct->chosenItem + (gActiveBattler / 2) * 2) = item;
build/emerald/src/battle_controller_wally.i:    gBattleStruct->wallyBattleState = 0;
build/emerald/src/battle_controller_wally.i:    gBattleStruct->wallyMovesState = 0;
build/emerald/src/battle_controller_wally.i:    gBattleStruct->wallyWaitFrames = 0;
build/emerald/src/battle_controller_wally.i:    gBattleStruct->wallyMoveFrames = 0;
build/emerald/src/battle_controller_wally.i:    switch (gBattleStruct->wallyBattleState)
build/emerald/src/battle_controller_wally.i:        gBattleStruct->wallyWaitFrames = 64;
build/emerald/src/battle_controller_wally.i:        gBattleStruct->wallyBattleState++;
build/emerald/src/battle_controller_wally.i:        if (--gBattleStruct->wallyWaitFrames == 0)
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyBattleState++;
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyMovesState = 0;
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyWaitFrames = 64;
build/emerald/src/battle_controller_wally.i:        if (--gBattleStruct->wallyWaitFrames == 0)
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyBattleState++;
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyMovesState = 0;
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyWaitFrames = 64;
build/emerald/src/battle_controller_wally.i:        if (--gBattleStruct->wallyWaitFrames == 0)
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyBattleState++;
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyMovesState = 0;
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyWaitFrames = 64;
build/emerald/src/battle_controller_wally.i:        if (--gBattleStruct->wallyWaitFrames == 0)
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyWaitFrames = 64;
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyBattleState++;
build/emerald/src/battle_controller_wally.i:        if (--gBattleStruct->wallyWaitFrames == 0)
build/emerald/src/battle_controller_wally.i:    switch (gBattleStruct->wallyMovesState)
build/emerald/src/battle_controller_wally.i:        gBattleStruct->wallyMovesState++;
build/emerald/src/battle_controller_wally.i:        gBattleStruct->wallyMoveFrames = 80;
build/emerald/src/battle_controller_wally.i:            gBattleStruct->wallyMovesState++;
build/emerald/src/battle_controller_wally.i:        if (--gBattleStruct->wallyMoveFrames == 0)
build/emerald/src/battle_controller_opponent.i:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_controller_opponent.i:    BtlController_EmitOneReturnValue(1, *(gBattleStruct->chosenItem + (gActiveBattler / 2) * 2));
build/emerald/src/battle_controller_opponent.i:    if (*(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) == 6)
build/emerald/src/battle_controller_opponent.i:        chosenMonId = *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler);
build/emerald/src/battle_controller_opponent.i:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = 6;
build/emerald/src/battle_controller_opponent.i:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = chosenMonId;
include/battle.h:    if (gBattleStruct->dynamicMoveType)                     \
include/battle.h:        typeArg = gBattleStruct->dynamicMoveType & 0x3F;    \
src/battle_interface.c:    if (gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(battlerId)] & gBitTable[gBattlerPartyIndexes[battlerId]])
src/battle_interface.c:    if (gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(battlerId)] & gBitTable[gBattlerPartyIndexes[battlerId]])
src/battle_interface.c:    if (gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(battler)] & gBitTable[gBattlerPartyIndexes[battler]])
src/battle_interface.c:    ConvertIntToDecimalStringN(text + 6, gBattleStruct->safariCatchFactor, STR_CONV_MODE_RIGHT_ALIGN, 2);
src/battle_interface.c:    ConvertIntToDecimalStringN(text + 9, gBattleStruct->safariEscapeFactor, STR_CONV_MODE_RIGHT_ALIGN, 2);
src/battle_interface.c:    if (gBattleStruct->mega.triggerSpriteId == 0xFF)
src/battle_interface.c:            gBattleStruct->mega.triggerSpriteId = CreateSprite(&sSpriteTemplate_MegaTrigger,
src/battle_interface.c:            gBattleStruct->mega.triggerSpriteId = CreateSprite(&sSpriteTemplate_MegaTrigger,
src/battle_interface.c:    gSprites[gBattleStruct->mega.triggerSpriteId].tBattler = battlerId;
src/battle_interface.c:    gSprites[gBattleStruct->mega.triggerSpriteId].tHide = FALSE;
src/battle_interface.c:    ChangeMegaTriggerSprite(gBattleStruct->mega.triggerSpriteId, palId);
src/battle_interface.c:    ChangeMegaTriggerSprite(gBattleStruct->mega.triggerSpriteId, 0);
src/battle_interface.c:    gSprites[gBattleStruct->mega.triggerSpriteId].tHide = TRUE;
src/battle_interface.c:    if (gBattleStruct->mega.triggerSpriteId != 0xFF)
src/battle_interface.c:        DestroySprite(&gSprites[gBattleStruct->mega.triggerSpriteId]);
src/battle_interface.c:    gBattleStruct->mega.triggerSpriteId = 0xFF;
src/battle_interface.c:                else if (gBattleTypeFlags & BATTLE_TYPE_ARENA && gBattleStruct->arenaLostPlayerMons & gBitTable[j])
src/battle_interface.c:                else if (gBattleTypeFlags & BATTLE_TYPE_ARENA && gBattleStruct->arenaLostOpponentMons & gBitTable[j]) // hmm...?
src/battle_interface.c:    if (!gBattleStruct->activeAbilityPopUps)
src/battle_interface.c:    gBattleStruct->activeAbilityPopUps |= gBitTable[battlerId];
src/battle_interface.c:    gBattleStruct->abilityPopUpSpriteIds[gBattleAnimAttacker][0] = spriteId1;
src/battle_interface.c:    gBattleStruct->abilityPopUpSpriteIds[gBattleAnimAttacker][1] = spriteId2;
src/battle_interface.c:                gBattleStruct->activeAbilityPopUps &= ~(gBitTable[sprite->tBattlerId]);
src/battle_interface.c:    gSprites[gBattleStruct->abilityPopUpSpriteIds[battlerId][0]].tFrames = 0;
src/battle_interface.c:    gSprites[gBattleStruct->abilityPopUpSpriteIds[battlerId][1]].tFrames = 0;
src/battle_interface.c:        && !gBattleStruct->activeAbilityPopUps)
src/battle_debug.c:        data->battlerId = gBattleStruct->debugBattler;
src/battle_debug.c:                                       gBattleStruct->aiFinalScore[data->aiBattlerId][gSprites[data->aiIconSpriteIds[j]].data[0]][i],
src/battle_debug.c:        gBattleStruct->debugBattler = data->battlerId;
src/battle_debug.c:            gBattleStruct->debugHoldEffects[data->battlerId] = data->modifyArrows.currValue;
src/battle_debug.c:            data->modifyArrows.currValue = gBattleStruct->debugHoldEffects[data->battlerId];
src/battle_controller_wally.c:    gBattleStruct->wallyBattleState = 0;
src/battle_controller_wally.c:    gBattleStruct->wallyMovesState = 0;
src/battle_controller_wally.c:    gBattleStruct->wallyWaitFrames = 0;
src/battle_controller_wally.c:    gBattleStruct->wallyMoveFrames = 0;
src/battle_controller_wally.c:    switch (gBattleStruct->wallyBattleState)
src/battle_controller_wally.c:        gBattleStruct->wallyWaitFrames = 64;
src/battle_controller_wally.c:        gBattleStruct->wallyBattleState++;
src/battle_controller_wally.c:        if (--gBattleStruct->wallyWaitFrames == 0)
src/battle_controller_wally.c:            gBattleStruct->wallyBattleState++;
src/battle_controller_wally.c:            gBattleStruct->wallyMovesState = 0;
src/battle_controller_wally.c:            gBattleStruct->wallyWaitFrames = 64;
src/battle_controller_wally.c:        if (--gBattleStruct->wallyWaitFrames == 0)
src/battle_controller_wally.c:            gBattleStruct->wallyBattleState++;
src/battle_controller_wally.c:            gBattleStruct->wallyMovesState = 0;
src/battle_controller_wally.c:            gBattleStruct->wallyWaitFrames = 64;
src/battle_controller_wally.c:        if (--gBattleStruct->wallyWaitFrames == 0)
src/battle_controller_wally.c:            gBattleStruct->wallyBattleState++;
src/battle_controller_wally.c:            gBattleStruct->wallyMovesState = 0;
src/battle_controller_wally.c:            gBattleStruct->wallyWaitFrames = 64;
src/battle_controller_wally.c:        if (--gBattleStruct->wallyWaitFrames == 0)
src/battle_controller_wally.c:            gBattleStruct->wallyWaitFrames = 64;
src/battle_controller_wally.c:            gBattleStruct->wallyBattleState++;
src/battle_controller_wally.c:        if (--gBattleStruct->wallyWaitFrames == 0)
src/battle_controller_wally.c:    switch (gBattleStruct->wallyMovesState)
src/battle_controller_wally.c:        gBattleStruct->wallyMovesState++;
src/battle_controller_wally.c:        gBattleStruct->wallyMoveFrames = 80;
src/battle_controller_wally.c:            gBattleStruct->wallyMovesState++;
src/battle_controller_wally.c:        if (--gBattleStruct->wallyMoveFrames == 0)
src/battle_ai_script_commands.c:        gBattleStruct->aiFinalScore[sBattler_AI][gBattlerTarget][i] = AI_THINKING_STRUCT->score[i];
src/battle_ai_script_commands.c:                BattleAI_SetupAIData(gBattleStruct->palaceFlags >> 4);
src/battle_ai_script_commands.c:                gBattleStruct->aiFinalScore[sBattler_AI][gBattlerTarget][j] = AI_THINKING_STRUCT->score[j];
src/battle_ai_script_commands.c:    gBattleStruct->dynamicMoveType = 0;
src/battle_ai_script_commands.c:    gBattleStruct->dynamicMoveType = 0;
src/battle_ai_script_commands.c:    u8 safariFleeRate = gBattleStruct->safariEscapeFactor * 5; // Safari flee rate, from 0-20.
src/battle_ai_script_commands.c:    AI_THINKING_STRUCT->funcResult = gBattleStruct->usedHeldItems[battlerId];
src/battle_ai_script_commands.c:    //AI_THINKING_STRUCT->funcResult = *(u8 *)&gBattleStruct->usedHeldItems[battlerId];
src/battle_ai_script_commands.c:        AI_THINKING_STRUCT->funcResult = gBattleMons[partnerBattler].moves[gBattleStruct->chosenMovePositions[partnerBattler]];
src/battle_ai_script_commands.c:    if (gBattleStruct->ateBerry[battler & BIT_SIDE] & gBitTable[gBattlerPartyIndexes[battler]])
src/battle_anim_mons.c:        if (!gBattleStruct->spriteIgnore0Hp)
src/battle_main.c:    gBattleStruct->multiBuffer.linkBattlerHeader.vsScreenHealthFlagsLo = flags;
src/battle_main.c:    *(&gBattleStruct->multiBuffer.linkBattlerHeader.vsScreenHealthFlagsHi) = flags >> 8;
src/battle_main.c:    gBattleStruct->multiBuffer.linkBattlerHeader.vsScreenHealthFlagsHi |= FlagGet(FLAG_SYS_FRONTIER_PASS) << 7;
src/battle_main.c:                    *(&gBattleStruct->multiBuffer.linkBattlerHeader.versionSignatureLo) = 0;
src/battle_main.c:                    *(&gBattleStruct->multiBuffer.linkBattlerHeader.versionSignatureHi) = 3;
src/battle_main.c:                    SendBlock(bitmask_all_link_players_but_self(), &gBattleStruct->multiBuffer.linkBattlerHeader, sizeof(gBattleStruct->multiBuffer.linkBattlerHeader));
src/battle_main.c:            gTasks[taskId].data[3] = gBattleStruct->multiBuffer.linkBattlerHeader.vsScreenHealthFlagsLo | (gBattleStruct->multiBuffer.linkBattlerHeader.vsScreenHealthFlagsHi << 8);
src/battle_main.c:                    *(&gBattleStruct->multiBuffer.linkBattlerHeader.versionSignatureLo) = 0;
src/battle_main.c:                    *(&gBattleStruct->multiBuffer.linkBattlerHeader.versionSignatureHi) = 3;
src/battle_main.c:                    SendBlock(bitmask_all_link_players_but_self(), &gBattleStruct->multiBuffer.linkBattlerHeader, sizeof(gBattleStruct->multiBuffer.linkBattlerHeader));
src/battle_main.c:    savedCallback = &gBattleStruct->savedCallback;
src/battle_main.c:    savedBattleTypeFlags = &gBattleStruct->savedBattleTypeFlags;
src/battle_main.c:    savedCallback = &gBattleStruct->savedCallback;
src/battle_main.c:    savedBattleTypeFlags = &gBattleStruct->savedBattleTypeFlags;
src/battle_main.c:                    *(&gBattleStruct->multiBuffer.linkBattlerHeader.versionSignatureLo) = 0;
src/battle_main.c:                    *(&gBattleStruct->multiBuffer.linkBattlerHeader.versionSignatureHi) = 3;
src/battle_main.c:                    SendBlock(bitmask_all_link_players_but_self(), &gBattleStruct->multiBuffer.linkBattlerHeader, sizeof(gBattleStruct->multiBuffer.linkBattlerHeader));
src/battle_main.c:            u32* ptr = gBattleStruct->multiBuffer.battleVideo;
src/battle_main.c:            SendBlock(bitmask_all_link_players_but_self(), ptr, sizeof(gBattleStruct->multiBuffer.battleVideo));
src/battle_main.c:    gBattleStruct->introState = 0;
src/battle_main.c:        gBattleStruct->lastTakenMove[i] = 0;
src/battle_main.c:        gBattleStruct->usedHeldItems[i] = 0;
src/battle_main.c:        gBattleStruct->choicedMove[i] = 0;
src/battle_main.c:        gBattleStruct->changedItems[i] = 0;
src/battle_main.c:        gBattleStruct->lastTakenMoveFrom[i][0] = 0;
src/battle_main.c:        gBattleStruct->lastTakenMoveFrom[i][1] = 0;
src/battle_main.c:        gBattleStruct->lastTakenMoveFrom[i][2] = 0;
src/battle_main.c:        gBattleStruct->lastTakenMoveFrom[i][3] = 0;
src/battle_main.c:        gBattleStruct->AI_monToSwitchIntoId[i] = PARTY_SIZE;
src/battle_main.c:    gBattleStruct->runTries = 0;
src/battle_main.c:    gBattleStruct->safariGoNearCounter = 0;
src/battle_main.c:    gBattleStruct->safariPkblThrowCounter = 0;
src/battle_main.c:    gBattleStruct->safariCatchFactor = gBaseStats[GetMonData(&gEnemyParty[0], MON_DATA_SPECIES)].catchRate * 100 / 1275;
src/battle_main.c:    gBattleStruct->safariEscapeFactor = 3;
src/battle_main.c:    gBattleStruct->wildVictorySong = 0;
src/battle_main.c:    gBattleStruct->moneyMultiplier = 1;
src/battle_main.c:    gBattleStruct->givenExpMons = 0;
src/battle_main.c:    gBattleStruct->palaceFlags = 0;
src/battle_main.c:    gBattleStruct->arenaLostPlayerMons = 0;
src/battle_main.c:    gBattleStruct->arenaLostOpponentMons = 0;
src/battle_main.c:    gBattleStruct->mega.triggerSpriteId = 0xFF;
src/battle_main.c:        if ((gBattleMons[i].status2 & STATUS2_WRAPPED) && *(gBattleStruct->wrappedBy + i) == gActiveBattler)
src/battle_main.c:    gBattleStruct->lastTakenMove[gActiveBattler] = 0;
src/battle_main.c:    gBattleStruct->sameMoveTurns[gActiveBattler] = 0;
src/battle_main.c:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][0] = 0;
src/battle_main.c:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][1] = 0;
src/battle_main.c:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][2] = 0;
src/battle_main.c:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][3] = 0;
src/battle_main.c:    gBattleStruct->lastMoveFailed &= ~(gBitTable[gActiveBattler]);
src/battle_main.c:    gBattleStruct->palaceFlags &= ~(gBitTable[gActiveBattler]);
src/battle_main.c:            gBattleStruct->lastTakenMove[i] = 0;
src/battle_main.c:        gBattleStruct->lastTakenMoveFrom[i][gActiveBattler] = 0;
src/battle_main.c:    gBattleStruct->choicedMove[gActiveBattler] = 0;
src/battle_main.c:    gBattleStruct->arenaTurnCounter = 0xFF;
src/battle_main.c:        if ((gBattleMons[i].status2 & STATUS2_WRAPPED) && *(gBattleStruct->wrappedBy + i) == gActiveBattler)
src/battle_main.c:    gBattleStruct->choicedMove[gActiveBattler] = 0;
src/battle_main.c:    gBattleStruct->sameMoveTurns[gActiveBattler] = 0;
src/battle_main.c:    gBattleStruct->lastTakenMove[gActiveBattler] = 0;
src/battle_main.c:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][0] = 0;
src/battle_main.c:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][1] = 0;
src/battle_main.c:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][2] = 0;
src/battle_main.c:    gBattleStruct->lastTakenMoveFrom[gActiveBattler][3] = 0;
src/battle_main.c:    gBattleStruct->palaceFlags &= ~(gBitTable[gActiveBattler]);
src/battle_main.c:            gBattleStruct->lastTakenMove[i] = 0;
src/battle_main.c:        gBattleStruct->lastTakenMoveFrom[i][gActiveBattler] = 0;
src/battle_main.c:    u8 *state = &gBattleStruct->introState;
src/battle_main.c:                gBattleStruct->hpOnSwitchout[GetBattlerSide(gActiveBattler)] = gBattleMons[gActiveBattler].hp;
src/battle_main.c:            gBattleStruct->switchInAbilitiesCounter = 0;
src/battle_main.c:            gBattleStruct->switchInItemsCounter = 0;
src/battle_main.c:            gBattleStruct->overworldWeatherDone = FALSE;
src/battle_main.c:    if (gBattleStruct->switchInAbilitiesCounter == 0)
src/battle_main.c:    if (!gBattleStruct->overworldWeatherDone
src/battle_main.c:        gBattleStruct->overworldWeatherDone = TRUE;
src/battle_main.c:    while (gBattleStruct->switchInAbilitiesCounter < gBattlersCount)
src/battle_main.c:        gBattlerAttacker = gBattlerByTurnOrder[gBattleStruct->switchInAbilitiesCounter++];
src/battle_main.c:    while (gBattleStruct->switchInItemsCounter < gBattlersCount)
src/battle_main.c:        if (ItemBattleEffects(ITEMEFFECT_ON_SWITCH_IN, gBattlerByTurnOrder[gBattleStruct->switchInItemsCounter++], FALSE))
src/battle_main.c:        *(gBattleStruct->monToSwitchIntoId + i) = PARTY_SIZE;
src/battle_main.c:    *(&gBattleStruct->field_91) = gAbsentBattlerFlags;
src/battle_main.c:    *(&gBattleStruct->turnEffectsTracker) = 0;
src/battle_main.c:    *(&gBattleStruct->turnEffectsBattlerId) = 0;
src/battle_main.c:    *(&gBattleStruct->wishPerishSongState) = 0;
src/battle_main.c:    *(&gBattleStruct->wishPerishSongBattlerId) = 0;
src/battle_main.c:    gBattleStruct->faintedActionsState = 0;
src/battle_main.c:    gBattleStruct->turnCountersTracker = 0;
src/battle_main.c:        gBattleStruct->turnEffectsTracker = 0;
src/battle_main.c:        gBattleStruct->turnEffectsBattlerId = 0;
src/battle_main.c:        gBattleStruct->wishPerishSongState = 0;
src/battle_main.c:        gBattleStruct->wishPerishSongBattlerId = 0;
src/battle_main.c:        gBattleStruct->turnCountersTracker = 0;
src/battle_main.c:    gBattleStruct->faintedActionsState = 0;
src/battle_main.c:        gBattleStruct->arenaTurnCounter++;
src/battle_main.c:        *(gBattleStruct->monToSwitchIntoId + i) = PARTY_SIZE;
src/battle_main.c:    *(&gBattleStruct->field_91) = gAbsentBattlerFlags;
src/battle_main.c:    else if (gBattleTypeFlags & BATTLE_TYPE_ARENA && gBattleStruct->arenaTurnCounter == 0)
src/battle_main.c:    // gBattleStruct->field_60[battler][i]
src/battle_main.c:        gBattlePartyCurrentOrder[i] = *(battler * 3 + i + (u8*)(gBattleStruct->field_60));
src/battle_main.c:    partyId2 = GetPartyIdFromBattlePartyId(*(gBattleStruct->monToSwitchIntoId + battler));
src/battle_main.c:            *(battler * 3 + i + (u8*)(gBattleStruct->field_60)) = gBattlePartyCurrentOrder[i];
src/battle_main.c:            *(BATTLE_PARTNER(battler) * 3 + i + (u8*)(gBattleStruct->field_60)) = gBattlePartyCurrentOrder[i];
src/battle_main.c:            *(battler * 3 + i + (u8*)(gBattleStruct->field_60)) = gBattlePartyCurrentOrder[i];
src/battle_main.c:            *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = PARTY_SIZE;
src/battle_main.c:                || gBattleStruct->field_91 & gBitTable[GetBattlerAtPosition(BATTLE_PARTNER(position))]
src/battle_main.c:                if (gBattleStruct->field_91 & gBitTable[gActiveBattler])
src/battle_main.c:                             && (gBattleStruct->throwingPokeBall || gChosenActionByBattler[GetBattlerAtPosition(B_POSITION_PLAYER_LEFT)] == B_ACTION_RUN))
src/battle_main.c:                        gBattleStruct->throwingPokeBall = FALSE;
src/battle_main.c:                        *(gBattleStruct->selectionScriptFinished + gActiveBattler) = FALSE;
src/battle_main.c:                        *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_WAIT_ACTION_CONFIRMED_STANDBY;
src/battle_main.c:                        *(gBattleStruct->moveTarget + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][3];
src/battle_main.c:                        *(gBattleStruct->chosenMovePositions + gActiveBattler) = gDisableStructs[gActiveBattler].encoredMovePos;
src/battle_main.c:                        moveInfo.mega = gBattleStruct->mega;
src/battle_main.c:                        *(gBattleStruct->selectionScriptFinished + gActiveBattler) = FALSE;
src/battle_main.c:                        *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_BEFORE_ACTION_CHOSEN;
src/battle_main.c:                        BtlController_EmitChooseItem(0, gBattleStruct->field_60[gActiveBattler]);
src/battle_main.c:                    *(gBattleStruct->field_58 + gActiveBattler) = gBattlerPartyIndexes[gActiveBattler];
src/battle_main.c:                        BtlController_EmitChoosePokemon(0, PARTY_ACTION_CANT_SWITCH, PARTY_SIZE, ABILITY_NONE, gBattleStruct->field_60[gActiveBattler]);
src/battle_main.c:                        BtlController_EmitChoosePokemon(0, ((i - 1) << 4) | PARTY_ACTION_ABILITY_PREVENTS, PARTY_SIZE, gBattleMons[i - 1].ability, gBattleStruct->field_60[gActiveBattler]);
src/battle_main.c:                            BtlController_EmitChoosePokemon(0, PARTY_ACTION_CHOOSE_MON, *(gBattleStruct->monToSwitchIntoId + 0), ABILITY_NONE, gBattleStruct->field_60[gActiveBattler]);
src/battle_main.c:                            BtlController_EmitChoosePokemon(0, PARTY_ACTION_CHOOSE_MON, *(gBattleStruct->monToSwitchIntoId + 1), ABILITY_NONE, gBattleStruct->field_60[gActiveBattler]);
src/battle_main.c:                            BtlController_EmitChoosePokemon(0, PARTY_ACTION_CHOOSE_MON, PARTY_SIZE, ABILITY_NONE, gBattleStruct->field_60[gActiveBattler]);
src/battle_main.c:                        *(gBattleStruct->selectionScriptFinished + gActiveBattler) = FALSE;
src/battle_main.c:                        *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_BEFORE_ACTION_CHOSEN;
src/battle_main.c:                    BtlController_EmitChooseItem(0, gBattleStruct->field_60[gActiveBattler]);
src/battle_main.c:                    gBattleStruct->mega.toEvolve &= ~(gBitTable[BATTLE_PARTNER(GetBattlerPosition(gActiveBattler))]);
src/battle_main.c:                    *(gBattleStruct->selectionScriptFinished + gActiveBattler) = FALSE;
src/battle_main.c:                    *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_BEFORE_ACTION_CHOSEN;
src/battle_main.c:                    *(gBattleStruct->selectionScriptFinished + gActiveBattler) = FALSE;
src/battle_main.c:                    *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_BEFORE_ACTION_CHOSEN;
src/battle_main.c:                            *(gBattleStruct->selectionScriptFinished + gActiveBattler) = FALSE;
src/battle_main.c:                            *(gBattleStruct->stateIdAfterSelScript + gActiveBattler) = STATE_WAIT_ACTION_CHOSEN;
src/battle_main.c:                            *(gBattleStruct->chosenMovePositions + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][2] & ~(RET_MEGA_EVOLUTION);
src/battle_main.c:                            gChosenMoveByBattler[gActiveBattler] = gBattleMons[gActiveBattler].moves[*(gBattleStruct->chosenMovePositions + gActiveBattler)];
src/battle_main.c:                            *(gBattleStruct->moveTarget + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][3];
src/battle_main.c:                                gBattleStruct->mega.toEvolve |= gBitTable[gActiveBattler];
src/battle_main.c:                            gBattleStruct->throwingPokeBall = TRUE;
src/battle_main.c:                    || (*(&gBattleStruct->field_91) & gBitTable[GetBattlerAtPosition(position ^ BIT_FLANK)]))
src/battle_main.c:            if (*(gBattleStruct->selectionScriptFinished + gActiveBattler))
src/battle_main.c:                gBattleCommunication[gActiveBattler] = *(gBattleStruct->stateIdAfterSelScript + gActiveBattler);
src/battle_main.c:            if (*(gBattleStruct->selectionScriptFinished + gActiveBattler))
src/battle_main.c:                    gBattleCommunication[gActiveBattler] = *(gBattleStruct->stateIdAfterSelScript + gActiveBattler);
src/battle_main.c:                    SwitchPartyOrderInGameMulti(i, *(gBattleStruct->monToSwitchIntoId + i));
src/battle_main.c:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][1];
src/battle_main.c:        *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 0) &= 0xF;
src/battle_main.c:        *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 0) |= (gBattleResources->bufferB[gActiveBattler][2] & 0xF0);
src/battle_main.c:        *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 1) = gBattleResources->bufferB[gActiveBattler][3];
src/battle_main.c:        *((gActiveBattler ^ BIT_FLANK) * 3 + (u8*)(gBattleStruct->field_60) + 0) &= (0xF0);
src/battle_main.c:        *((gActiveBattler ^ BIT_FLANK) * 3 + (u8*)(gBattleStruct->field_60) + 0) |= (gBattleResources->bufferB[gActiveBattler][2] & 0xF0) >> 4;
src/battle_main.c:        *((gActiveBattler ^ BIT_FLANK) * 3 + (u8*)(gBattleStruct->field_60) + 2) = gBattleResources->bufferB[gActiveBattler][3];
src/battle_main.c:        move = gBattleMons[battlerId].moves[*(gBattleStruct->chosenMovePositions + battlerId)];
src/battle_main.c:            gBattleStruct->mega.battlerId = 0;
src/battle_main.c:    gBattleStruct->mega.battlerId = 0;
src/battle_main.c:        while (gBattleStruct->mega.battlerId < gBattlersCount)
src/battle_main.c:            gActiveBattler = gBattlerAttacker = gBattleStruct->mega.battlerId;
src/battle_main.c:            gBattleStruct->mega.battlerId++;
src/battle_main.c:            if (gBattleStruct->mega.toEvolve & gBitTable[gActiveBattler]
src/battle_main.c:                gBattleStruct->mega.toEvolve &= ~(gBitTable[gActiveBattler]);
src/battle_main.c:                if (gBattleStruct->mega.isWishMegaEvo == TRUE)
src/battle_main.c:    gBattleStruct->focusPunchBattlerId = 0;
src/battle_main.c:        while (gBattleStruct->focusPunchBattlerId < gBattlersCount)
src/battle_main.c:            gActiveBattler = gBattlerAttacker = gBattleStruct->focusPunchBattlerId;
src/battle_main.c:            gBattleStruct->focusPunchBattlerId++;
src/battle_main.c:    gBattleStruct->dynamicMoveType = 0;
src/battle_main.c:        gBattleStruct->ateBoost[i] = FALSE;
src/battle_main.c:    *(&gBattleStruct->savedTurnActionNumber) = gCurrentTurnActionNumber;
src/battle_main.c:        if (gBattleStruct->savedTurnActionNumber != gCurrentTurnActionNumber) // action turn has been done, clear hitmarker bits for another battlerId
src/battle_main.c:    gBattleStruct->dynamicMoveType = 0;
src/battle_main.c:    gBattleStruct->ateBoost[battlerAtk] = 0;
src/battle_main.c:                gBattleStruct->dynamicMoveType = TYPE_WATER | 0x80;
src/battle_main.c:                gBattleStruct->dynamicMoveType = TYPE_ROCK | 0x80;
src/battle_main.c:                gBattleStruct->dynamicMoveType = TYPE_FIRE | 0x80;
src/battle_main.c:                gBattleStruct->dynamicMoveType = TYPE_ICE | 0x80;
src/battle_main.c:                gBattleStruct->dynamicMoveType = TYPE_NORMAL | 0x80;
src/battle_main.c:        gBattleStruct->dynamicMoveType = (15 * typeBits) / 63 + 1;
src/battle_main.c:        if (gBattleStruct->dynamicMoveType >= TYPE_MYSTERY)
src/battle_main.c:            gBattleStruct->dynamicMoveType++;
src/battle_main.c:        gBattleStruct->dynamicMoveType |= 0xC0;
src/battle_main.c:            gBattleStruct->dynamicMoveType = ItemId_GetSecondaryId(gBattleMons[battlerAtk].item) | 0x80;
src/battle_main.c:            gBattleStruct->dynamicMoveType = gBattleMons[battlerAtk].type1 | 0x80;
src/battle_main.c:            gBattleStruct->dynamicMoveType = gBattleMons[battlerAtk].type2 | 0x80;
src/battle_main.c:            gBattleStruct->dynamicMoveType = gBattleMons[battlerAtk].type3 | 0x80;
src/battle_main.c:            gBattleStruct->dynamicMoveType = gNaturalGiftTable[ITEM_TO_BERRY(gBattleMons[battlerAtk].item)].type;
src/battle_main.c:        gBattleStruct->dynamicMoveType = 0x80 | TYPE_ELECTRIC;
src/battle_main.c:        gBattleStruct->dynamicMoveType = 0x80 | ateType;
src/battle_main.c:        gBattleStruct->ateBoost[battlerAtk] = 1;
src/battle_main.c:        gBattleStruct->dynamicMoveType = 0x80 | TYPE_NORMAL;
src/battle_main.c:        gBattleStruct->ateBoost[battlerAtk] = 1;
src/battle_main.c:        gBattleStruct->dynamicMoveType = 0x80 | TYPE_WATER;
src/battle_controller_player_partner.c:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = chosenMonId;
src/battle_util2.c:        // gBattleStruct->field_60[0][i]
src/battle_util2.c:            gBattlePartyCurrentOrder[i] = *(0 * 3 + i + (u8*)(gBattleStruct->field_60));
src/battle_util2.c:            *(0 * 3 + i + (u8*)(gBattleStruct->field_60)) = gBattlePartyCurrentOrder[i];
src/battle_ai_switch_items.c:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = PARTY_SIZE;
src/battle_ai_switch_items.c:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = PARTY_SIZE;
src/battle_ai_switch_items.c:                    *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = i;
src/battle_ai_switch_items.c:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn1))
src/battle_ai_switch_items.c:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn2))
src/battle_ai_switch_items.c:            *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = i;
src/battle_ai_switch_items.c:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = PARTY_SIZE;
src/battle_ai_switch_items.c:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = PARTY_SIZE;
src/battle_ai_switch_items.c:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = PARTY_SIZE;
src/battle_ai_switch_items.c:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn1))
src/battle_ai_switch_items.c:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn2))
src/battle_ai_switch_items.c:                    *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = i;
src/battle_ai_switch_items.c:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn1))
src/battle_ai_switch_items.c:        if (i == *(gBattleStruct->monToSwitchIntoId + battlerIn2))
src/battle_ai_switch_items.c:            if (*(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) == PARTY_SIZE)
src/battle_ai_switch_items.c:                        if (monToSwitchId == *(gBattleStruct->monToSwitchIntoId + battlerIn1))
src/battle_ai_switch_items.c:                        if (monToSwitchId == *(gBattleStruct->monToSwitchIntoId + battlerIn2))
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = monToSwitchId;
src/battle_ai_switch_items.c:            *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler);
src/battle_ai_switch_items.c:    if (*(gBattleStruct->monToSwitchIntoId + gActiveBattler) != PARTY_SIZE)
src/battle_ai_switch_items.c:        return *(gBattleStruct->monToSwitchIntoId + gActiveBattler);
src/battle_ai_switch_items.c:            || i == *(gBattleStruct->monToSwitchIntoId + battlerIn1)
src/battle_ai_switch_items.c:            || i == *(gBattleStruct->monToSwitchIntoId + battlerIn2)
src/battle_ai_switch_items.c:        *(gBattleStruct->AI_itemType + gActiveBattler / 2) = GetAI_ItemType(item, itemEffects);
src/battle_ai_switch_items.c:        switch (*(gBattleStruct->AI_itemType + gActiveBattler / 2))
src/battle_ai_switch_items.c:            *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) = 0;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x20;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x10;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x8;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x4;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x2;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x1;
src/battle_ai_switch_items.c:            *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) = 0;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x1;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x2;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x4;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x8;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x20;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x80;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x1;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x2;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x4;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x8;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x10;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x20;
src/battle_ai_switch_items.c:                *(gBattleStruct->AI_itemFlags + gActiveBattler / 2) |= 0x40;
src/battle_ai_switch_items.c:            *(gBattleStruct->chosenItem + (gActiveBattler / 2) * 2) = item;
src/battle_message.c:    gBattleStruct->field_52 = gBattleMsgDataPtr->unk1605E;
src/battle_message.c:    gBattleStruct->hpScale = gBattleMsgDataPtr->hpScale;
src/battle_message.c:    gBattleStruct->stringMoveType = gBattleMsgDataPtr->moveType;
src/battle_message.c:            if (*(&gBattleStruct->hpScale) == 0)
src/battle_message.c:            else if (*(&gBattleStruct->hpScale) == 1 || gBattleTypeFlags & BATTLE_TYPE_DOUBLE)
src/battle_message.c:            else if (*(&gBattleStruct->hpScale) == 2)
src/battle_message.c:            if (*(&gBattleStruct->hpScale) == 0 || gBattleTypeFlags & BATTLE_TYPE_DOUBLE)
src/battle_message.c:            else if (*(&gBattleStruct->hpScale) == 1)
src/battle_message.c:            else if (*(&gBattleStruct->hpScale) == 2)
src/battle_message.c:            StringCopy(gBattleTextBuff3, sATypeMove_Table[*(&gBattleStruct->stringMoveType)]);
src/battle_message.c:        stringPtr = gBattleStruct->trainerSlideMsg;
src/battle_message.c:                    toCpy = sATypeMove_Table[gBattleStruct->stringMoveType];
src/battle_message.c:                    toCpy = sATypeMove_Table[gBattleStruct->stringMoveType];
src/battle_message.c:                    GetMonData(&gEnemyParty[gBattleStruct->field_52], MON_DATA_NICKNAME, text);
src/battle_message.c:                    GetMonData(&gPlayerParty[gBattleStruct->field_52], MON_DATA_NICKNAME, text);
src/battle_message.c:                    gBattleStruct->trainerSlideMsg = sTrainerSlides[i].msgLastSwitchIn;
src/battle_message.c:                    && !gBattleStruct->trainerSlideLowHpMsgDone)
src/battle_message.c:                    gBattleStruct->trainerSlideLowHpMsgDone = TRUE;
src/battle_message.c:                    gBattleStruct->trainerSlideMsg = sTrainerSlides[i].msgLastLowHp;
src/battle_message.c:                    gBattleStruct->trainerSlideMsg = sTrainerSlides[i].msgFirstDown;
src/pokemon.c:    gBattleStruct->hpOnSwitchout[GetBattlerSide(battlerId)] = gBattleMons[battlerId].hp;
src/pokemon.c:    gLastUsedAbility = gBattleStruct->abilityPreventingSwitchout;
src/pokemon.c:    gBattleTextBuff1[2] = gBattleStruct->battlerPreventingSwitchout;
src/pokemon.c:    if (GetBattlerSide(gBattleStruct->battlerPreventingSwitchout) == B_SIDE_PLAYER)
src/pokemon.c:        gBattleTextBuff1[3] = GetPartyIdFromBattlePartyId(gBattlerPartyIndexes[gBattleStruct->battlerPreventingSwitchout]);
src/pokemon.c:        gBattleTextBuff1[3] = gBattlerPartyIndexes[gBattleStruct->battlerPreventingSwitchout];
src/recorded_battle.c:                    gChosenMoveByBattler[battlerId] = gBattleMons[battlerId].moves[*(gBattleStruct->chosenMovePositions + battlerId)];
src/battle_arena.c:    s8 *mindPoints = gBattleStruct->arenaMindPoints;
src/battle_arena.c:    s8 *skillPoints = gBattleStruct->arenaSkillPoints;
src/battle_arena.c:    u16 *hpAtStart = gBattleStruct->arenaStartHp;
src/battle_arena.c:    s8 *mindPoints = gBattleStruct->arenaMindPoints;
src/battle_arena.c:    s8 *skillPoints = gBattleStruct->arenaSkillPoints;
src/battle_arena.c:    u16 *hpAtStart = gBattleStruct->arenaStartHp;
src/battle_arena.c:    s8 *mindPoints = gBattleStruct->arenaMindPoints;
src/battle_arena.c:    s8 *skillPoints = gBattleStruct->arenaSkillPoints;
src/battle_arena.c:        u8 *failedMoveBits = &gBattleStruct->alreadyStatusedMoveAttempt;
src/battle_arena.c:    s8 *skillPoints = gBattleStruct->arenaSkillPoints;
src/battle_arena.c:    u16 *hpAtStart = gBattleStruct->arenaStartHp;
src/battle_script_commands.c:                gBattleStruct->sameMoveTurns[gBattlerAttacker]++;
src/battle_script_commands.c:            gBattleStruct->sameMoveTurns[gBattlerAttacker] = 0;
src/battle_script_commands.c:    if (gBattleStruct->dynamicMoveType == 0)
src/battle_script_commands.c:    else if (!(gBattleStruct->dynamicMoveType & 0x40))
src/battle_script_commands.c:        moveType = gBattleStruct->dynamicMoveType & 0x3F;
src/battle_script_commands.c:        gBattleStruct->moveEffect2 = gBattleScripting.moveEffect;
src/battle_script_commands.c:                gBattleStruct->synchronizeMoveEffect = gBattleScripting.moveEffect;
src/battle_script_commands.c:                    gBattleStruct->moneyMultiplier *= 2;
src/battle_script_commands.c:                    gBattleStruct->wrappedMove[gEffectBattler] = gCurrentMove;
src/battle_script_commands.c:                    gBattleStruct->wrappedBy[gEffectBattler] = gBattlerAttacker;
src/battle_script_commands.c:                        gLastUsedItem = gBattleStruct->changedItems[gBattlerAttacker] = gBattleMons[gBattlerTarget].item;
src/battle_script_commands.c:                        gBattleStruct->choicedMove[gBattlerTarget] = 0;
src/battle_script_commands.c:                gBattleStruct->stolenStats[0] = 0; // Stats to steal.
src/battle_script_commands.c:                        gBattleStruct->stolenStats[0] |= gBitTable[i];
src/battle_script_commands.c:                        gBattleStruct->stolenStats[i] = gBattleMons[gBattlerTarget].statStages[i] - 6;
src/battle_script_commands.c:                        while (gBattleMons[gBattlerAttacker].statStages[i] + gBattleStruct->stolenStats[i] > 12)
src/battle_script_commands.c:                            gBattleStruct->stolenStats[i]--;
src/battle_script_commands.c:                        if (gBattleStruct->stolenStats[i] >= 2)
src/battle_script_commands.c:                if (gBattleStruct->stolenStats[0] != 0)
src/battle_script_commands.c:                u8 moveIndex = *(gBattleStruct->chosenMovePositions + gBattlerAttacker);
src/battle_script_commands.c:    u16 *exp = &gBattleStruct->expValue;
src/battle_script_commands.c:            gBattleStruct->givenExpMons |= gBitTable[gBattlerPartyIndexes[gBattlerFainted]];
src/battle_script_commands.c:            gBattleStruct->expGetterMonId = 0;
src/battle_script_commands.c:            gBattleStruct->sentInPokes = sentIn;
src/battle_script_commands.c:            item = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_HELD_ITEM);
src/battle_script_commands.c:            if (holdEffect != HOLD_EFFECT_EXP_SHARE && !(gBattleStruct->sentInPokes & 1))
src/battle_script_commands.c:                *(&gBattleStruct->sentInPokes) >>= 1;
src/battle_script_commands.c:            else if (GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_LEVEL) == MAX_LEVEL)
src/battle_script_commands.c:                *(&gBattleStruct->sentInPokes) >>= 1;
src/battle_script_commands.c:                    && !gBattleStruct->wildVictorySong)
src/battle_script_commands.c:                    gBattleStruct->wildVictorySong++;
src/battle_script_commands.c:                if (GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_HP))
src/battle_script_commands.c:                    if (gBattleStruct->sentInPokes & 1)
src/battle_script_commands.c:                        gBattleMoveDamage /= sExperienceScalingFactors[gBattleMons[gBattlerFainted].level + GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_LEVEL) + 10];
src/battle_script_commands.c:                    if (IsTradedMon(&gPlayerParty[gBattleStruct->expGetterMonId]))
src/battle_script_commands.c:                        if (gBattleTypeFlags & BATTLE_TYPE_INGAME_PARTNER && gBattleStruct->expGetterMonId >= 3)
src/battle_script_commands.c:                        if (!(gBattlerPartyIndexes[2] != gBattleStruct->expGetterMonId) && !(gAbsentBattlerFlags & gBitTable[2]))
src/battle_script_commands.c:                            gBattleStruct->expGetterBattlerId = 2;
src/battle_script_commands.c:                                gBattleStruct->expGetterBattlerId = 0;
src/battle_script_commands.c:                                gBattleStruct->expGetterBattlerId = 2;
src/battle_script_commands.c:                        gBattleStruct->expGetterBattlerId = 0;
src/battle_script_commands.c:                    PREPARE_MON_NICK_WITH_PREFIX_BUFFER(gBattleTextBuff1, gBattleStruct->expGetterBattlerId, gBattleStruct->expGetterMonId);
src/battle_script_commands.c:                    PrepareStringBattle(STRINGID_PKMNGAINEDEXP, gBattleStruct->expGetterBattlerId);
src/battle_script_commands.c:                    MonGainEVs(&gPlayerParty[gBattleStruct->expGetterMonId], gBattleMons[gBattlerFainted].species);
src/battle_script_commands.c:                gBattleStruct->sentInPokes >>= 1;
src/battle_script_commands.c:            gBattleResources->bufferB[gBattleStruct->expGetterBattlerId][0] = 0;
src/battle_script_commands.c:            if (GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_HP) && GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_LEVEL) != MAX_LEVEL)
src/battle_script_commands.c:                gBattleResources->beforeLvlUp->stats[STAT_HP]    = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_MAX_HP);
src/battle_script_commands.c:                gBattleResources->beforeLvlUp->stats[STAT_ATK]   = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_ATK);
src/battle_script_commands.c:                gBattleResources->beforeLvlUp->stats[STAT_DEF]   = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_DEF);
src/battle_script_commands.c:                gBattleResources->beforeLvlUp->stats[STAT_SPEED] = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_SPEED);
src/battle_script_commands.c:                gBattleResources->beforeLvlUp->stats[STAT_SPATK] = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_SPATK);
src/battle_script_commands.c:                gBattleResources->beforeLvlUp->stats[STAT_SPDEF] = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_SPDEF);
src/battle_script_commands.c:                gActiveBattler = gBattleStruct->expGetterBattlerId;
src/battle_script_commands.c:                BtlController_EmitExpUpdate(0, gBattleStruct->expGetterMonId, gBattleMoveDamage);
src/battle_script_commands.c:            gActiveBattler = gBattleStruct->expGetterBattlerId;
src/battle_script_commands.c:                if (gBattleTypeFlags & BATTLE_TYPE_TRAINER && gBattlerPartyIndexes[gActiveBattler] == gBattleStruct->expGetterMonId)
src/battle_script_commands.c:                PREPARE_MON_NICK_WITH_PREFIX_BUFFER(gBattleTextBuff1, gActiveBattler, gBattleStruct->expGetterMonId);
src/battle_script_commands.c:                PREPARE_BYTE_NUMBER_BUFFER(gBattleTextBuff2, 3, GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_LEVEL));
src/battle_script_commands.c:                gLeveledUpInBattle |= gBitTable[gBattleStruct->expGetterMonId];
src/battle_script_commands.c:                AdjustFriendship(&gPlayerParty[gBattleStruct->expGetterMonId], FRIENDSHIP_EVENT_GROW_LEVEL);
src/battle_script_commands.c:                if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId && gBattleMons[0].hp)
src/battle_script_commands.c:                else if (gBattlerPartyIndexes[2] == gBattleStruct->expGetterMonId && gBattleMons[2].hp && (gBattleTypeFlags & BATTLE_TYPE_DOUBLE))
src/battle_script_commands.c:                    gBattleMons[battlerId].level = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_LEVEL);
src/battle_script_commands.c:                    gBattleMons[battlerId].hp = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_HP);
src/battle_script_commands.c:                    gBattleMons[battlerId].maxHP = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_MAX_HP);
src/battle_script_commands.c:                    gBattleMons[battlerId].attack = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_ATK);
src/battle_script_commands.c:                    gBattleMons[battlerId].defense = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_DEF);
src/battle_script_commands.c:                    gBattleMons[battlerId].speed = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_SPEED);
src/battle_script_commands.c:                    gBattleMons[battlerId].spAttack = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_SPATK);
src/battle_script_commands.c:                    gBattleMons[battlerId].spDefense = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_SPDEF);
src/battle_script_commands.c:            gBattleStruct->expGetterMonId++;
src/battle_script_commands.c:            if (gBattleStruct->expGetterMonId < PARTY_SIZE)
src/battle_script_commands.c:             && (!(gBattleTypeFlags & BATTLE_TYPE_ARENA) || !(gBattleStruct->arenaLostPlayerMons & gBitTable[i])))
src/battle_script_commands.c:            && (!(gBattleTypeFlags & BATTLE_TYPE_ARENA) || !(gBattleStruct->arenaLostOpponentMons & gBitTable[i])))
src/battle_script_commands.c:        gBattleStruct->roostTypes[gBattlerAttacker][0] = TYPE_FLYING;
src/battle_script_commands.c:        gBattleStruct->roostTypes[gBattlerAttacker][1] = TYPE_FLYING;
src/battle_script_commands.c:        gBattleStruct->roostTypes[gBattlerAttacker][2] = TYPE_FLYING;
src/battle_script_commands.c:        gBattleStruct->roostTypes[gBattlerAttacker][0] = gBattleMons[gBattlerAttacker].type1;
src/battle_script_commands.c:        gBattleStruct->roostTypes[gBattlerAttacker][1] = gBattleMons[gBattlerAttacker].type2;
src/battle_script_commands.c:        gBattleStruct->roostTypes[gBattlerAttacker][0] = gBattleMons[gBattlerAttacker].type1;
src/battle_script_commands.c:        gBattleStruct->roostTypes[gBattlerAttacker][1] = gBattleMons[gBattlerAttacker].type2;
src/battle_script_commands.c:    *(gBattlerAttacker + gBattleStruct->selectionScriptFinished) = TRUE;
src/battle_script_commands.c:            gBattleStruct->choicedMove[battlerDef] = 0;
src/battle_script_commands.c:    choicedMoveAtk = &gBattleStruct->choicedMove[gBattlerAttacker];
src/battle_script_commands.c:                if (gBattleStruct->changedItems[i] != 0)
src/battle_script_commands.c:                    gBattleMons[i].item = gBattleStruct->changedItems[i];
src/battle_script_commands.c:                    gBattleStruct->changedItems[i] = 0;
src/battle_script_commands.c:            switch (gBattleStruct->moveEffect2)
src/battle_script_commands.c:            gBattleStruct->moveEffect2 = 0;
src/battle_script_commands.c:                gBattleStruct->lastMoveFailed |= gBitTable[gBattlerAttacker];
src/battle_script_commands.c:                gBattleStruct->lastMoveFailed &= ~(gBitTable[gBattlerAttacker]);
src/battle_script_commands.c:                gBattleStruct->lastMoveTarget[gBattlerAttacker] = gBattlerTarget;
src/battle_script_commands.c:                && !(gBattleStruct->field_91 & gBitTable[gBattlerAttacker])
src/battle_script_commands.c:            if (!(gAbsentBattlerFlags & gBitTable[gBattlerAttacker]) && !(gBattleStruct->field_91 & gBitTable[gBattlerAttacker])
src/battle_script_commands.c:                gBattleStruct->lastTakenMove[gBattlerTarget] = gChosenMove;
src/battle_script_commands.c:                gBattleStruct->lastTakenMoveFrom[gBattlerTarget][gBattlerAttacker] = gChosenMove;
src/battle_script_commands.c:                if (!(gBattleStruct->lastMoveFailed & gBitTable[gBattlerAttacker]
src/battle_script_commands.c:                *(gBattleStruct->moveTarget + gBattlerAttacker) = gSpecialStatuses[gBattlerAttacker].instructedChosenTarget & 0x3;
src/battle_script_commands.c:                *(gBattleStruct->moveTarget + gBattlerAttacker) = gSpecialStatuses[gBattlerAttacker].dancerOriginalTarget & 0x3;
src/battle_script_commands.c:            gBattleStruct->ateBoost[gBattlerAttacker] = 0;
src/battle_script_commands.c:    gBattlerPartyIndexes[gActiveBattler] = *(gBattleStruct->monToSwitchIntoId + gActiveBattler);
src/battle_script_commands.c:        gBattleStruct->palaceFlags |= gBitTable[gActiveBattler];
src/battle_script_commands.c:    *(gBattleStruct->field_58 + gActiveBattler) = gBattlerPartyIndexes[gActiveBattler];
src/battle_script_commands.c:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = PARTY_SIZE;
src/battle_script_commands.c:    gBattleStruct->field_93 &= ~(gBitTable[gActiveBattler]);
src/battle_script_commands.c:    BtlController_EmitChoosePokemon(0, PARTY_ACTION_SEND_OUT, slotId, ABILITY_NONE, gBattleStruct->field_60[gActiveBattler]);
src/battle_script_commands.c:                    sub_804CF10(gBattleStruct->monToSwitchIntoId[2]);
src/battle_script_commands.c:                    sub_804CF10(gBattleStruct->monToSwitchIntoId[0]);
src/battle_script_commands.c:                    sub_804CF10(gBattleStruct->monToSwitchIntoId[3]);
src/battle_script_commands.c:                    sub_804CF10(gBattleStruct->monToSwitchIntoId[1]);
src/battle_script_commands.c:                        sub_804CF10(gBattleStruct->monToSwitchIntoId[0]);
src/battle_script_commands.c:                        sub_804CF10(gBattleStruct->monToSwitchIntoId[1]);
src/battle_script_commands.c:            *(gBattleStruct->field_58 + gActiveBattler) = gBattlerPartyIndexes[gActiveBattler];
src/battle_script_commands.c:            *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = 6;
src/battle_script_commands.c:            gBattleStruct->field_93 &= ~(gBitTable[gActiveBattler]);
src/battle_script_commands.c:            BtlController_EmitChoosePokemon(0, hitmarkerFaintBits, *(gBattleStruct->monToSwitchIntoId + (gActiveBattler ^ 2)), ABILITY_NONE, gBattleStruct->field_60[gActiveBattler]);
src/battle_script_commands.c:                *(gBattleStruct->monToSwitchIntoId + i) = gBattleResources->bufferB[i][1];
src/battle_script_commands.c:                if (!(gBattleStruct->field_93 & gBitTable[i]))
src/battle_script_commands.c:                    gBattleStruct->field_93 |= gBitTable[i];
src/battle_script_commands.c:        if (!(gBattleStruct->field_93 & gBitTable[gActiveBattler]))
src/battle_script_commands.c:            gBattleStruct->field_93 |= gBitTable[gActiveBattler];
src/battle_script_commands.c:        *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = gBattleResources->bufferB[gActiveBattler][1];
src/battle_script_commands.c:            *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 0) &= 0xF;
src/battle_script_commands.c:            *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 0) |= (gBattleResources->bufferB[gActiveBattler][2] & 0xF0);
src/battle_script_commands.c:            *(gActiveBattler * 3 + (u8*)(gBattleStruct->field_60) + 1) = gBattleResources->bufferB[gActiveBattler][3];
src/battle_script_commands.c:            *((gActiveBattler ^ BIT_FLANK) * 3 + (u8*)(gBattleStruct->field_60) + 0) &= (0xF0);
src/battle_script_commands.c:            *((gActiveBattler ^ BIT_FLANK) * 3 + (u8*)(gBattleStruct->field_60) + 0) |= (gBattleResources->bufferB[gActiveBattler][2] & 0xF0) >> 4;
src/battle_script_commands.c:            *((gActiveBattler ^ BIT_FLANK) * 3 + (u8*)(gBattleStruct->field_60) + 2) = gBattleResources->bufferB[gActiveBattler][3];
src/battle_script_commands.c:            SwitchPartyOrderInGameMulti(gActiveBattler, *(gBattleStruct->monToSwitchIntoId + gActiveBattler));
src/battle_script_commands.c:            gBattleStruct->hpOnSwitchout[GetBattlerSide(i)] = gBattleMons[i].hp;
src/battle_script_commands.c:    u16 learnMove = MonTryLearningNewMove(&gPlayerParty[gBattleStruct->expGetterMonId], gBattlescriptCurrInstr[9]);
src/battle_script_commands.c:        learnMove = MonTryLearningNewMove(&gPlayerParty[gBattleStruct->expGetterMonId], FALSE);
src/battle_script_commands.c:        if (gBattlerPartyIndexes[gActiveBattler] == gBattleStruct->expGetterMonId
src/battle_script_commands.c:            if (gBattlerPartyIndexes[gActiveBattler] == gBattleStruct->expGetterMonId
src/battle_script_commands.c:            ShowSelectMovePokemonSummaryScreen(gPlayerParty, gBattleStruct->expGetterMonId, gPlayerPartyCount - 1, ReshowBattleScreenAfterMenu, gMoveToLearn);
src/battle_script_commands.c:                u16 moveId = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_MOVE1 + movePosition);
src/battle_script_commands.c:                    RemoveMonPPBonus(&gPlayerParty[gBattleStruct->expGetterMonId], movePosition);
src/battle_script_commands.c:                    SetMonMoveSlot(&gPlayerParty[gBattleStruct->expGetterMonId], gMoveToLearn, movePosition);
src/battle_script_commands.c:                    if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId
src/battle_script_commands.c:                        && gBattlerPartyIndexes[2] == gBattleStruct->expGetterMonId
src/battle_script_commands.c:        moneyReward = 20 * gBattleResources->secretBase->party.levels[0] * gBattleStruct->moneyMultiplier;
src/battle_script_commands.c:            moneyReward = 4 * lastMonLevel * gBattleStruct->moneyMultiplier * gTrainerMoneyTable[i].value;
src/battle_script_commands.c:            moneyReward = 4 * lastMonLevel * gBattleStruct->moneyMultiplier * 2 * gTrainerMoneyTable[i].value;
src/battle_script_commands.c:            moneyReward = 4 * lastMonLevel * gBattleStruct->moneyMultiplier * gTrainerMoneyTable[i].value;
src/battle_script_commands.c:        && gBattleStruct->ateBerry[GetBattlerSide(battlerId)] & gBitTable[gBattlerPartyIndexes[battlerId]]
src/battle_script_commands.c:        gBattleStruct->usedHeldItems[gActiveBattler] = itemId;
src/battle_script_commands.c:    GetMonLevelUpWindowStats(&gPlayerParty[gBattleStruct->expGetterMonId], currStats);
src/battle_script_commands.c:    GetMonLevelUpWindowStats(&gPlayerParty[gBattleStruct->expGetterMonId], currStats);
src/battle_script_commands.c:    monLevel = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_LEVEL);
src/battle_script_commands.c:    monGender = GetMonGender(&gPlayerParty[gBattleStruct->expGetterMonId]);
src/battle_script_commands.c:    GetMonNickname(&gPlayerParty[gBattleStruct->expGetterMonId], gStringVar4);
src/battle_script_commands.c:    u16 species = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_SPECIES);
src/battle_script_commands.c:    u32 personality = GetMonData(&gPlayerParty[gBattleStruct->expGetterMonId], MON_DATA_PERSONALITY);
src/battle_script_commands.c:    if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId)
src/battle_script_commands.c:    if (gBattleTypeFlags & BATTLE_TYPE_DOUBLE && gBattlerPartyIndexes[2] == gBattleStruct->expGetterMonId)
src/battle_script_commands.c:            gBattleStruct->hpScale = 0;
src/battle_script_commands.c:            gBattleStruct->hpScale = 1;
src/battle_script_commands.c:            gBattleStruct->hpScale = 2;
src/battle_script_commands.c:            gBattleStruct->hpScale = 3;
src/battle_script_commands.c:        hpSwitchout = *(gBattleStruct->hpOnSwitchout + GetBattlerSide(opposingBank));
src/battle_script_commands.c:            gBattleStruct->hpScale = 0;
src/battle_script_commands.c:            gBattleStruct->hpScale = 1;
src/battle_script_commands.c:            gBattleStruct->hpScale = 2;
src/battle_script_commands.c:            gBattleStruct->hpScale = 3;
src/battle_script_commands.c:        && gBattleStruct->moveTarget[gBattlerAttacker] == gBattlerTarget
src/battle_script_commands.c:        while (gBattleStruct->friskedBattler < gBattlersCount)
src/battle_script_commands.c:            gBattlerTarget = gBattleStruct->friskedBattler++;
src/battle_script_commands.c:                if (gBattleStruct->friskedAbility)
src/battle_script_commands.c:                    gBattleStruct->friskedAbility = TRUE;
src/battle_script_commands.c:        gBattleStruct->friskedBattler = 0;
src/battle_script_commands.c:        gBattleStruct->friskedAbility = FALSE;
src/battle_script_commands.c:        gBattleMons[gActiveBattler].ability = gBattleStruct->tracedAbility[gActiveBattler];
src/battle_script_commands.c:        gBattleStruct->spriteIgnore0Hp = gBattlescriptCurrInstr[3];
src/battle_script_commands.c:            if (gBattleStruct->stolenStats[0] & gBitTable[i])
src/battle_script_commands.c:                gBattleStruct->stolenStats[0] &= ~(gBitTable[i]);
src/battle_script_commands.c:                SET_STATCHANGER(i, gBattleStruct->stolenStats[i], FALSE);
src/battle_script_commands.c:        if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId || gBattlerPartyIndexes[2] == gBattleStruct->expGetterMonId)
src/battle_script_commands.c:            if (gBattlerPartyIndexes[0] == gBattleStruct->expGetterMonId)
src/battle_script_commands.c:                if (gBattleMons[gActiveBattler].moves[i] == gBattleStruct->choicedMove[gActiveBattler])
src/battle_script_commands.c:                gBattleStruct->choicedMove[gActiveBattler] = 0;
src/battle_script_commands.c:        if (!(gBattleStruct->palaceFlags & gBitTable[gActiveBattler])
src/battle_script_commands.c:            gBattleStruct->palaceFlags |= gBitTable[gActiveBattler];
src/battle_script_commands.c:        gBattleStruct->arenaLostOpponentMons |= gBitTable[gBattlerPartyIndexes[1]];
src/battle_script_commands.c:        gBattleStruct->arenaLostPlayerMons |= gBitTable[gBattlerPartyIndexes[0]];
src/battle_script_commands.c:        gBattleStruct->arenaLostPlayerMons |= gBitTable[gBattlerPartyIndexes[0]];
src/battle_script_commands.c:        gBattleStruct->arenaLostOpponentMons |= gBitTable[gBattlerPartyIndexes[1]];
src/battle_script_commands.c:        gBattleStruct->alreadyStatusedMoveAttempt |= gBitTable[gActiveBattler];
src/battle_script_commands.c:        gBattleStruct->savedBattlerTarget = gBattlerTarget;
src/battle_script_commands.c:        gBattlerTarget = gBattleStruct->savedBattlerTarget;
src/battle_script_commands.c:                gBattleStruct->tracedAbility[gBattlerAbility] = gBattleMons[gActiveBattler].ability; // re-using the variable for trace
src/battle_script_commands.c:        while (gBattleStruct->soulheartBattlerId < gBattlersCount)
src/battle_script_commands.c:            gBattleScripting.battler = gBattleStruct->soulheartBattlerId++;
src/battle_script_commands.c:        gBattleStruct->soulheartBattlerId = 0;
src/battle_script_commands.c:        else if (gBattleMoves[gBattleMons[gBattlerTarget].moves[gBattleStruct->chosenMovePositions[gBattlerTarget]]].power == 0)
src/battle_script_commands.c:        else if (gBattleMoves[gBattleMons[gBattlerTarget].moves[gBattleStruct->chosenMovePositions[gBattlerTarget]]].power == 0)
src/battle_script_commands.c:            u16 move = gBattleMons[gBattlerTarget].moves[gBattleStruct->chosenMovePositions[gBattlerTarget]];
src/battle_script_commands.c:            gBattleStruct->mega.evolvedSpecies[gActiveBattler] = gBattleMons[gActiveBattler].species;
src/battle_script_commands.c:                gBattleStruct->mega.playerEvolvedSpecies = gBattleStruct->mega.evolvedSpecies[gActiveBattler];
src/battle_script_commands.c:            megaSpecies = GetMegaEvolutionSpecies(gBattleStruct->mega.evolvedSpecies[gActiveBattler], gBattleMons[gActiveBattler].item);
src/battle_script_commands.c:                megaSpecies = GetWishMegaEvolutionSpecies(gBattleStruct->mega.evolvedSpecies[gActiveBattler], gBattleMons[gActiveBattler].moves[0], gBattleMons[gActiveBattler].moves[1], gBattleMons[gActiveBattler].moves[2], gBattleMons[gActiveBattler].moves[3]);
src/battle_script_commands.c:            gBattleStruct->mega.alreadyEvolved[GetBattlerPosition(gActiveBattler)] = TRUE;
src/battle_script_commands.c:            gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(gActiveBattler)] |= gBitTable[gBattlerPartyIndexes[gActiveBattler]];
src/battle_script_commands.c:            gSpecialStatuses[gBattlerTarget].instructedChosenTarget = *(gBattleStruct->moveTarget + gBattlerTarget) | 0x4;
src/battle_script_commands.c:                gBattlerTarget = gBattleStruct->lastMoveTarget[gBattlerAttacker];
src/battle_script_commands.c:            move = gBattleStruct->lastTakenMoveFrom[gBattlerAttacker][i];
src/battle_script_commands.c:    move = gBattleStruct->lastTakenMove[gBattlerAttacker];
src/battle_script_commands.c:            *(gBattleStruct->field_58 + gBattlerTarget) = gBattlerPartyIndexes[gBattlerTarget];
src/battle_script_commands.c:            *(gBattleStruct->monToSwitchIntoId + gBattlerTarget) = i;
src/battle_script_commands.c:        u32 bonusMoney = gPaydayMoney * gBattleStruct->moneyMultiplier;
src/battle_script_commands.c:        || gBattleStruct->illusion[gBattlerTarget].on
src/battle_script_commands.c:        gBattleStruct->presentBasePower = 40;
src/battle_script_commands.c:        gBattleStruct->presentBasePower = 80;
src/battle_script_commands.c:        gBattleStruct->presentBasePower = 120;
src/battle_script_commands.c:        gBattleStruct->magnitudeBasePower = 10;
src/battle_script_commands.c:        gBattleStruct->magnitudeBasePower = 30;
src/battle_script_commands.c:        gBattleStruct->magnitudeBasePower = 50;
src/battle_script_commands.c:        gBattleStruct->magnitudeBasePower = 70;
src/battle_script_commands.c:        gBattleStruct->magnitudeBasePower = 90;
src/battle_script_commands.c:        gBattleStruct->magnitudeBasePower = 110;
src/battle_script_commands.c:        gBattleStruct->magnitudeBasePower = 150;
src/battle_script_commands.c:        && gBattlerAttacker == *(gBattleStruct->moveTarget + gBattlerTarget)
src/battle_script_commands.c:        gCurrMovePos = gChosenMovePos = *(gBattleStruct->chosenMovePositions + gBattlerTarget);
src/battle_script_commands.c:        gBattlerTarget = *(gBattleStruct->wrappedBy + gBattlerAttacker);
src/battle_script_commands.c:        PREPARE_MOVE_BUFFER(gBattleTextBuff1, gBattleStruct->wrappedMove[gBattlerAttacker]);
src/battle_script_commands.c:            newItemAtk = &gBattleStruct->changedItems[gBattlerAttacker];
src/battle_script_commands.c:            gBattleStruct->choicedMove[gBattlerTarget] = 0;
src/battle_script_commands.c:            gBattleStruct->choicedMove[gBattlerAttacker] = 0;
src/battle_script_commands.c:    u16* movesArray = gBattleStruct->assistPossibleMoves;
src/battle_script_commands.c:    gBattleScripting.battler = gBattleStruct->intimidateBattler;
src/battle_script_commands.c:        BtlController_EmitSetMonData(0, REQUEST_STATUS_BATTLE, gBitTable[*(gBattleStruct->field_58 + gActiveBattler)], 4, &gBattleMons[gActiveBattler].status1);
src/battle_script_commands.c:        BtlController_EmitSetMonData(0, REQUEST_HP_BATTLE, gBitTable[*(gBattleStruct->field_58 + gActiveBattler)], 2, &gBattleMoveDamage);
src/battle_script_commands.c:        *(&gBattleStruct->formToChangeInto) |= 0x80;
src/battle_script_commands.c:    BtlController_EmitBattleAnimation(0, B_ANIM_CASTFORM_CHANGE, gBattleStruct->formToChangeInto);
src/battle_script_commands.c:        *(&gBattleStruct->formToChangeInto) = form - 1;
src/battle_script_commands.c:    usedHeldItem = &gBattleStruct->usedHeldItems[gActiveBattler];
src/battle_script_commands.c:            catchRate = gBattleStruct->safariCatchFactor * 1275 / 100;
src/battle_script_commands.c:            GetMonData(&gEnemyParty[gBattlerPartyIndexes[gBattlerTarget]], MON_DATA_NICKNAME, gBattleStruct->caughtMonNick);
src/battle_script_commands.c:            DoNamingScreen(NAMING_SCREEN_CAUGHT_MON, gBattleStruct->caughtMonNick,
src/battle_script_commands.c:            SetMonData(&gEnemyParty[gBattlerPartyIndexes[gBattlerTarget]], MON_DATA_NICKNAME, gBattleStruct->caughtMonNick);
src/battle_gfx_sfx_util.c:    i = (gBattleStruct->palaceFlags & gBitTable[gActiveBattler]) ? 2 : 0;
src/battle_gfx_sfx_util.c:        gBattleStruct->palaceFlags &= 0xF;
src/battle_gfx_sfx_util.c:        gBattleStruct->palaceFlags |= (selectedMoves << 4);
src/battle_gfx_sfx_util.c:        gBattleStruct->illusion[activeBattler].broken = 1;
src/battle_gfx_sfx_util.c:        gBattleStruct->illusion[activeBattler].on = 0;
src/battle_gfx_sfx_util.c:        LZDecompressWram(lzPaletteData, gBattleStruct->castformPalette[0]);
src/battle_gfx_sfx_util.c:        LoadPalette(gBattleStruct->castformPalette[gBattleMonForms[battlerId]], paletteOffset, 0x20);
src/battle_gfx_sfx_util.c:        LoadPalette(gBattleStruct->castformPalette[gBattleSpritesDataPtr->animationData->animArg], paletteOffset, 32);
src/battle_gfx_sfx_util.c:            LZDecompressWram(lzPaletteData, gBattleStruct->castformPalette[0]);
src/battle_gfx_sfx_util.c:            LoadPalette(gBattleStruct->castformPalette[0] + gBattleMonForms[battlerDef] * 16, paletteOffset, 32);
src/battle_util.c:    if (gBattleStruct->field_91 & gBitTable[gBattlerAttacker] || !IsBattlerAlive(gBattlerAttacker))
src/battle_util.c:    gBattleStruct->atkCancellerTracker = 0;
src/battle_util.c:    gCurrMovePos = gChosenMovePos = *(gBattleStruct->chosenMovePositions + gBattlerAttacker);
src/battle_util.c:        *(gBattleStruct->moveTarget + gBattlerAttacker) = GetMoveTarget(MOVE_STRUGGLE, 0);
src/battle_util.c:        *(gBattleStruct->moveTarget + gBattlerAttacker) = GetMoveTarget(gCurrentMove, 0);
src/battle_util.c:        *(gBattleStruct->moveTarget + gBattlerAttacker) = GetMoveTarget(gCurrentMove, 0);
src/battle_util.c:        *(gBattleStruct->moveTarget + gBattlerAttacker) = GetMoveTarget(gCurrentMove, 0);
src/battle_util.c:             && ((gBattleMons[*(gBattleStruct->moveTarget + gBattlerAttacker)].ability != ABILITY_LIGHTNING_ROD && moveType == TYPE_ELECTRIC)
src/battle_util.c:                 || (gBattleMons[*(gBattleStruct->moveTarget + gBattlerAttacker)].ability != ABILITY_STORM_DRAIN && moveType == TYPE_WATER)
src/battle_util.c:                && *(gBattleStruct->moveTarget + gBattlerAttacker) != gActiveBattler
src/battle_util.c:                gBattlerTarget = *(gBattleStruct->moveTarget + gBattlerAttacker);
src/battle_util.c:        gBattlerTarget = *(gBattleStruct->moveTarget + gBattlerAttacker);
src/battle_util.c:        gBattleStruct->hpBefore[i] = gBattleMons[i].hp;
src/battle_util.c:    PREPARE_MON_NICK_BUFFER(gBattleTextBuff1, gBattlerAttacker, *(gBattleStruct->field_58 + gBattlerAttacker))
src/battle_util.c:        switch (*(gBattleStruct->AI_itemType + (gBattlerAttacker >> 1)))
src/battle_util.c:            if (*(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) & 1)
src/battle_util.c:                if (*(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) & 0x3E)
src/battle_util.c:                while (!(*(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) & 1))
src/battle_util.c:                    *(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) >>= 1;
src/battle_util.c:            if (*(gBattleStruct->AI_itemFlags + (gBattlerAttacker >> 1)) & 0x80)
src/battle_util.c:                while (!((*(gBattleStruct->AI_itemFlags + (gBattlerAttacker >> 1))) & 1))
src/battle_util.c:                    *(gBattleStruct->AI_itemFlags + gBattlerAttacker / 2) >>= 1;
src/battle_util.c:        gBattlescriptCurrInstr = gBattlescriptsForUsingItem[*(gBattleStruct->AI_itemType + gBattlerAttacker / 2)];
src/battle_util.c:            gBattleStruct->runTries++;
src/battle_util.c:            speedVar = (gBattleMons[battler].speed * pyramidMultiplier) / (gBattleMons[BATTLE_OPPOSITE(battler)].speed) + (gBattleStruct->runTries * 30);
src/battle_util.c:            speedVar = (gBattleMons[battler].speed * pyramidMultiplier) / (gBattleMons[runningFromBattler].speed) + (gBattleStruct->runTries * 30);
src/battle_util.c:            speedVar = (gBattleMons[battler].speed * 128) / (gBattleMons[runningFromBattler].speed) + (gBattleStruct->runTries * 30);
src/battle_util.c:        gBattleStruct->runTries++;
src/battle_util.c:    if (gBattleStruct->safariPkblThrowCounter < 3)
src/battle_util.c:        gBattleStruct->safariPkblThrowCounter++;
src/battle_util.c:    if (gBattleStruct->safariEscapeFactor > 1)
src/battle_util.c:        if (gBattleStruct->safariEscapeFactor <= sPkblToEscapeFactor[gBattleStruct->safariPkblThrowCounter][gBattleCommunication[MULTISTRING_CHOOSER]])
src/battle_util.c:        if (gBattleStruct->safariEscapeFactor < sPkblToEscapeFactor[gBattleStruct->safariPkblThrowCounter][gBattleCommunication[MULTISTRING_CHOOSER]])
src/battle_util.c:            gBattleStruct->safariEscapeFactor = 1;
src/battle_util.c:            gBattleStruct->safariEscapeFactor -= sPkblToEscapeFactor[gBattleStruct->safariPkblThrowCounter][gBattleCommunication[MULTISTRING_CHOOSER]];
src/battle_util.c:    gBattleStruct->safariCatchFactor += sGoNearCounterToCatchFactor[gBattleStruct->safariGoNearCounter];
src/battle_util.c:    if (gBattleStruct->safariCatchFactor > 20)
src/battle_util.c:        gBattleStruct->safariCatchFactor = 20;
src/battle_util.c:    gBattleStruct->safariEscapeFactor += sGoNearCounterToEscapeFactor[gBattleStruct->safariGoNearCounter];
src/battle_util.c:    if (gBattleStruct->safariEscapeFactor > 20)
src/battle_util.c:        gBattleStruct->safariEscapeFactor = 20;
src/battle_util.c:    if (gBattleStruct->safariGoNearCounter < 3)
src/battle_util.c:        gBattleStruct->safariGoNearCounter++;
src/battle_util.c:        gBattleStruct->faintedActionsState = 0;
src/battle_util.c:    *(gBattleStruct->monToSwitchIntoId + gBattlerByTurnOrder[gCurrentTurnActionNumber]) = 6;
src/battle_util.c:    gBattleStruct->dynamicMoveType = 0;
src/battle_util.c:    return !(gBattleStruct->ateBerry[battler & BIT_SIDE] & gBitTable[gBattlerPartyIndexes[battler]]);
src/battle_util.c:    u16 *choicedMove = &gBattleStruct->choicedMove[gActiveBattler];
src/battle_util.c:    u16 *choicedMove = &gBattleStruct->choicedMove[battlerId];
src/battle_util.c:        switch (gBattleStruct->turnCountersTracker)
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnSideTracker = 0;
src/battle_util.c:            while (gBattleStruct->turnSideTracker < 2)
src/battle_util.c:                side = gBattleStruct->turnSideTracker;
src/battle_util.c:                gBattleStruct->turnSideTracker++;
src/battle_util.c:                gBattleStruct->turnCountersTracker++;
src/battle_util.c:                gBattleStruct->turnSideTracker = 0;
src/battle_util.c:            while (gBattleStruct->turnSideTracker < 2)
src/battle_util.c:                side = gBattleStruct->turnSideTracker;
src/battle_util.c:                gBattleStruct->turnSideTracker++;
src/battle_util.c:                gBattleStruct->turnCountersTracker++;
src/battle_util.c:                gBattleStruct->turnSideTracker = 0;
src/battle_util.c:            while (gBattleStruct->turnSideTracker < 2)
src/battle_util.c:                side = gBattleStruct->turnSideTracker;
src/battle_util.c:                gBattleStruct->turnSideTracker++;
src/battle_util.c:                gBattleStruct->turnCountersTracker++;
src/battle_util.c:                gBattleStruct->turnSideTracker = 0;
src/battle_util.c:            while (gBattleStruct->turnSideTracker < 2)
src/battle_util.c:                side = gBattleStruct->turnSideTracker;
src/battle_util.c:                gBattleStruct->turnSideTracker++;
src/battle_util.c:                gBattleStruct->turnCountersTracker++;
src/battle_util.c:                gBattleStruct->turnSideTracker = 0;
src/battle_util.c:            while (gBattleStruct->turnSideTracker < 2)
src/battle_util.c:                side = gBattleStruct->turnSideTracker;
src/battle_util.c:                gBattleStruct->turnSideTracker++;
src/battle_util.c:                gBattleStruct->turnCountersTracker++;
src/battle_util.c:                gBattleStruct->turnSideTracker = 0;
src/battle_util.c:            while (gBattleStruct->turnSideTracker < 2)
src/battle_util.c:                side = gBattleStruct->turnSideTracker;
src/battle_util.c:                gBattleStruct->turnSideTracker++;
src/battle_util.c:                gBattleStruct->turnCountersTracker++;
src/battle_util.c:                gBattleStruct->turnSideTracker = 0;
src/battle_util.c:            while (gBattleStruct->turnSideTracker < 2)
src/battle_util.c:                side = gBattleStruct->turnSideTracker;
src/battle_util.c:                gBattleStruct->turnSideTracker++;
src/battle_util.c:                gBattleStruct->turnCountersTracker++;
src/battle_util.c:                gBattleStruct->turnSideTracker = 0;
src/battle_util.c:            while (gBattleStruct->turnSideTracker < gBattlersCount)
src/battle_util.c:                gActiveBattler = gBattlerByTurnOrder[gBattleStruct->turnSideTracker];
src/battle_util.c:                gBattleStruct->turnSideTracker++;
src/battle_util.c:                gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:            gBattleStruct->turnCountersTracker++;
src/battle_util.c:    gBattleStruct->turnEffectsTracker++;\
src/battle_util.c:    while (gBattleStruct->turnEffectsBattlerId < gBattlersCount && gBattleStruct->turnEffectsTracker <= ENDTURN_BATTLER_COUNT)
src/battle_util.c:        gActiveBattler = gBattlerAttacker = gBattlerByTurnOrder[gBattleStruct->turnEffectsBattlerId];
src/battle_util.c:            gBattleStruct->turnEffectsBattlerId++;
src/battle_util.c:        switch (gBattleStruct->turnEffectsTracker)
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:                    gBattleScripting.animArg1 = gBattleStruct->wrappedMove[gActiveBattler];
src/battle_util.c:                    gBattleScripting.animArg2 = gBattleStruct->wrappedMove[gActiveBattler] >> 8;
src/battle_util.c:                    PREPARE_MOVE_BUFFER(gBattleTextBuff1, gBattleStruct->wrappedMove[gActiveBattler]);
src/battle_util.c:                    if (GetBattlerHoldEffect(gBattleStruct->wrappedBy[gActiveBattler], TRUE) == HOLD_EFFECT_BINDING_BAND)
src/battle_util.c:                    PREPARE_MOVE_BUFFER(gBattleTextBuff1, gBattleStruct->wrappedMove[gActiveBattler]);
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:                gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:                gBattleMons[gActiveBattler].type1 = gBattleStruct->roostTypes[gActiveBattler][0];
src/battle_util.c:                gBattleMons[gActiveBattler].type2 = gBattleStruct->roostTypes[gActiveBattler][1];
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker++;
src/battle_util.c:            gBattleStruct->turnEffectsTracker = 0;
src/battle_util.c:            gBattleStruct->turnEffectsBattlerId++;
src/battle_util.c:    switch (gBattleStruct->wishPerishSongState)
src/battle_util.c:        while (gBattleStruct->wishPerishSongBattlerId < gBattlersCount)
src/battle_util.c:            gActiveBattler = gBattleStruct->wishPerishSongBattlerId;
src/battle_util.c:                gBattleStruct->wishPerishSongBattlerId++;
src/battle_util.c:            gBattleStruct->wishPerishSongBattlerId++;
src/battle_util.c:        gBattleStruct->wishPerishSongState = 1;
src/battle_util.c:        gBattleStruct->wishPerishSongBattlerId = 0;
src/battle_util.c:        while (gBattleStruct->wishPerishSongBattlerId < gBattlersCount)
src/battle_util.c:            gActiveBattler = gBattlerAttacker = gBattlerByTurnOrder[gBattleStruct->wishPerishSongBattlerId];
src/battle_util.c:                gBattleStruct->wishPerishSongBattlerId++;
src/battle_util.c:            gBattleStruct->wishPerishSongBattlerId++;
src/battle_util.c:            u8 *state = &gBattleStruct->wishPerishSongState;
src/battle_util.c:            gBattleStruct->wishPerishSongBattlerId = 0;
src/battle_util.c:         && gBattleStruct->arenaTurnCounter == 2
src/battle_util.c:            gBattleStruct->wishPerishSongState++;
src/battle_util.c:        switch (gBattleStruct->faintedActionsState)
src/battle_util.c:            gBattleStruct->faintedActionsBattlerId = 0;
src/battle_util.c:            gBattleStruct->faintedActionsState++;
src/battle_util.c:                gBattlerFainted = gBattlerTarget = gBattleStruct->faintedActionsBattlerId;
src/battle_util.c:                if (gBattleMons[gBattleStruct->faintedActionsBattlerId].hp == 0
src/battle_util.c:                 && !(gBattleStruct->givenExpMons & gBitTable[gBattlerPartyIndexes[gBattleStruct->faintedActionsBattlerId]])
src/battle_util.c:                 && !(gAbsentBattlerFlags & gBitTable[gBattleStruct->faintedActionsBattlerId]))
src/battle_util.c:                    gBattleStruct->faintedActionsState = 2;
src/battle_util.c:            } while (++gBattleStruct->faintedActionsBattlerId != gBattlersCount);
src/battle_util.c:            gBattleStruct->faintedActionsState = 3;
src/battle_util.c:            if (++gBattleStruct->faintedActionsBattlerId == gBattlersCount)
src/battle_util.c:                gBattleStruct->faintedActionsState = 3;
src/battle_util.c:                gBattleStruct->faintedActionsState = 1;
src/battle_util.c:            gBattleStruct->faintedActionsBattlerId = 0;
src/battle_util.c:            gBattleStruct->faintedActionsState++;
src/battle_util.c:                gBattlerFainted = gBattlerTarget = gBattleStruct->faintedActionsBattlerId;
src/battle_util.c:                if (gBattleMons[gBattleStruct->faintedActionsBattlerId].hp == 0
src/battle_util.c:                 && !(gAbsentBattlerFlags & gBitTable[gBattleStruct->faintedActionsBattlerId]))
src/battle_util.c:                    gBattleStruct->faintedActionsState = 5;
src/battle_util.c:            } while (++gBattleStruct->faintedActionsBattlerId != gBattlersCount);
src/battle_util.c:            gBattleStruct->faintedActionsState = 6;
src/battle_util.c:            if (++gBattleStruct->faintedActionsBattlerId == gBattlersCount)
src/battle_util.c:                gBattleStruct->faintedActionsState = 6;
src/battle_util.c:                gBattleStruct->faintedActionsState = 4;
src/battle_util.c:            gBattleStruct->faintedActionsState++;
src/battle_util.c:    } while (gBattleStruct->faintedActionsState != FAINTED_ACTIONS_MAX_CASE);
src/battle_util.c:        switch (gBattleStruct->atkCancellerTracker)
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:                        gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:    } while (gBattleStruct->atkCancellerTracker != CANCELLER_END && gBattleStruct->atkCancellerTracker != CANCELLER_END2 && effect == 0);
src/battle_util.c:        switch (gBattleStruct->atkCancellerTracker)
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:            gBattleStruct->atkCancellerTracker++;
src/battle_util.c:    } while (gBattleStruct->atkCancellerTracker != CANCELLER_END2 && effect == 0);
src/battle_util.c:             && i != *(gBattleStruct->monToSwitchIntoId + id2) && i != id1[gBattleStruct->monToSwitchIntoId])
src/battle_util.c:             && i != *(gBattleStruct->monToSwitchIntoId + id2) && i != id1[gBattleStruct->monToSwitchIntoId])
src/battle_util.c:                && !(gBattleStruct->illusion[BATTLE_OPPOSITE(battler)].on)
src/battle_util.c:                *(&gBattleStruct->formToChangeInto) = effect - 1;
src/battle_util.c:                 && gBattleStruct->changedItems[battler] == ITEM_NONE
src/battle_util.c:                 && ItemId_GetPocket(gBattleStruct->usedHeldItems[battler]) == POCKET_BERRIES)
src/battle_util.c:                    gLastUsedItem = gBattleStruct->changedItems[battler] = gBattleStruct->usedHeldItems[battler];
src/battle_util.c:                    gBattleStruct->usedHeldItems[battler] = ITEM_NONE;
src/battle_util.c:                    gBattleStruct->changedSpecies[gBattlerPartyIndexes[battler]] = gBattleMons[battler].species;
src/battle_util.c:             && gBattleStruct->hpBefore[battler] > gBattleMons[battler].maxHP / 2
src/battle_util.c:             && gBattleStruct->hpBefore[battler] > gBattleMons[battler].maxHP / 2
src/battle_util.c:            if (gBattleStruct->illusion[gBattlerTarget].on && !gBattleStruct->illusion[gBattlerTarget].broken && TARGET_TURN_DAMAGED)
src/battle_util.c:                gSpecialStatuses[battler].dancerOriginalTarget = *(gBattleStruct->moveTarget + battler) | 0x4;
src/battle_util.c:                gBattleStruct->atkCancellerTracker = 0;
src/battle_util.c:                    gBattleStruct->formToChangeInto = effect - 1;
src/battle_util.c:                gBattleStruct->synchronizeMoveEffect &= ~(MOVE_EFFECT_AFFECTS_USER | MOVE_EFFECT_CERTAIN);
src/battle_util.c:                if (gBattleStruct->synchronizeMoveEffect == MOVE_EFFECT_TOXIC)
src/battle_util.c:                    gBattleStruct->synchronizeMoveEffect = MOVE_EFFECT_POISON;
src/battle_util.c:                gBattleScripting.moveEffect = gBattleStruct->synchronizeMoveEffect + MOVE_EFFECT_AFFECTS_USER;
src/battle_util.c:                gBattleStruct->synchronizeMoveEffect &= ~(MOVE_EFFECT_AFFECTS_USER | MOVE_EFFECT_CERTAIN);
src/battle_util.c:                if (gBattleStruct->synchronizeMoveEffect == MOVE_EFFECT_TOXIC)
src/battle_util.c:                    gBattleStruct->synchronizeMoveEffect = MOVE_EFFECT_POISON;
src/battle_util.c:                gBattleScripting.moveEffect = gBattleStruct->synchronizeMoveEffect;
src/battle_util.c:                battler = gBattlerAbility = gBattleStruct->intimidateBattler = i;
src/battle_util.c:                    gBattleStruct->tracedAbility[i] = gLastUsedAbility = gBattleMons[gActiveBattler].ability;
src/battle_util.c:                    gBattleStruct->moneyMultiplier *= 2;
src/battle_util.c:        gBattleStruct->ateBerry[battlerId & BIT_SIDE] |= gBitTable[gBattlerPartyIndexes[battlerId]];
src/battle_util.c:    *(gBattleStruct->moveTarget + gBattlerAttacker) = targetBattler;
src/battle_util.c:    if (B_ENABLE_DEBUG && gBattleStruct->debugHoldEffects[battlerId] != 0 && gBattleMons[battlerId].item)
src/battle_util.c:        return gBattleStruct->debugHoldEffects[battlerId];
src/battle_util.c:        basePower = gBattleStruct->magnitudeBasePower;
src/battle_util.c:        basePower = gBattleStruct->presentBasePower;
src/battle_util.c:        if (moveType == TYPE_FAIRY && gBattleStruct->ateBoost[battlerAtk])
src/battle_util.c:        if (moveType == TYPE_ELECTRIC && gBattleStruct->ateBoost[battlerAtk])
src/battle_util.c:        if (moveType == TYPE_ICE && gBattleStruct->ateBoost[battlerAtk])
src/battle_util.c:        if (moveType == TYPE_FLYING && gBattleStruct->ateBoost[battlerAtk])
src/battle_util.c:        if (moveType == TYPE_NORMAL && gBattleStruct->ateBoost[battlerAtk])
src/battle_util.c:        if (gBattleStruct->lastMoveFailed & gBitTable[battlerAtk])
src/battle_util.c:        percentBoost = min((gBattleStruct->sameMoveTurns[battlerAtk] * GetBattlerHoldEffectParam(battlerAtk)), 100);
src/battle_util.c:        if (B_ENABLE_DEBUG && gBattleStruct->debugHoldEffects[battlerId])
src/battle_util.c:            holdEffect = gBattleStruct->debugHoldEffects[battlerId];
src/battle_util.c:            gBattleStruct->mega.isWishMegaEvo = FALSE;
src/battle_util.c:        gBattleStruct->mega.isWishMegaEvo = TRUE;
src/battle_util.c:    if (gBattleStruct->mega.evolvedPartyIds[B_SIDE_PLAYER] & gBitTable[monId])
src/battle_util.c:        gBattleStruct->mega.evolvedPartyIds[B_SIDE_PLAYER] &= ~(gBitTable[monId]);
src/battle_util.c:        SetMonData(&gPlayerParty[monId], MON_DATA_SPECIES, &gBattleStruct->mega.playerEvolvedSpecies);
src/battle_util.c:        SetMonData(&gPlayerParty[monId], MON_DATA_SPECIES, &gBattleStruct->changedSpecies[monId]);
src/battle_util.c:        gBattleStruct->changedSpecies[monId] = 0;
src/battle_util.c:             && ((GetMegaEvolutionSpecies(species, itemId) != SPECIES_NONE) || gBattleStruct->mega.evolvedPartyIds[GetBattlerSide(battlerId)] & gBitTable[gBattlerPartyIndexes[battlerId]]))
src/battle_util.c:    if (gBattleStruct->illusion[battlerId].broken)
src/battle_util.c:    if (!gBattleStruct->illusion[battlerId].set)
src/battle_util.c:    if (!gBattleStruct->illusion[battlerId].on)
src/battle_util.c:    return gBattleStruct->illusion[battlerId].mon;
src/battle_util.c:    memset(&gBattleStruct->illusion[battlerId], 0, sizeof(gBattleStruct->illusion[battlerId]));
src/battle_util.c:    gBattleStruct->illusion[battlerId].set = 1;
src/battle_util.c:            gBattleStruct->illusion[battlerId].on = 1;
src/battle_util.c:            gBattleStruct->illusion[battlerId].broken = 0;
src/battle_util.c:            gBattleStruct->illusion[battlerId].partyId = id;
src/battle_util.c:            gBattleStruct->illusion[battlerId].mon = &party[id];
src/battle_intro.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].oam.objMode = ST_OAM_OBJ_WINDOW;
src/battle_intro.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].callback = SpriteCB_VsLetterInit;
src/battle_intro.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].oam.objMode = ST_OAM_OBJ_WINDOW;
src/battle_intro.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].callback = SpriteCB_VsLetterInit;
src/battle_controllers.c:    for (i = 0; i < sizeof(gBattleStruct->tvMovePoints); i++)
src/battle_controllers.c:        *((u8*)(&gBattleStruct->tvMovePoints) + i) = 0;
src/battle_controllers.c:    for (i = 0; i < sizeof(gBattleStruct->tv); i++)
src/battle_controllers.c:        *((u8*)(&gBattleStruct->tv) + i) = 0;
src/battle_controllers.c:    stringInfo->unk1605E = gBattleStruct->field_52;
src/battle_controllers.c:    stringInfo->hpScale = gBattleStruct->hpScale;
src/battle_controllers.c:    stringInfo->unk1605E = gBattleStruct->field_52;
src/battle_controller_recorded_opponent.c:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = RecordedBattle_GetBattlerAction(gActiveBattler);
src/battle_controller_recorded_opponent.c:    BtlController_EmitChosenMonReturnValue(1, *(gBattleStruct->monToSwitchIntoId + gActiveBattler), NULL);
src/battle_controller_recorded_player.c:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = RecordedBattle_GetBattlerAction(gActiveBattler);
src/battle_controller_recorded_player.c:    BtlController_EmitChosenMonReturnValue(1, *(gBattleStruct->monToSwitchIntoId + gActiveBattler), NULL);
src/battle_controller_opponent.c:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = 6;
src/battle_controller_opponent.c:    BtlController_EmitOneReturnValue(1, *(gBattleStruct->chosenItem + (gActiveBattler / 2) * 2));
src/battle_controller_opponent.c:    if (*(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) == PARTY_SIZE)
src/battle_controller_opponent.c:        chosenMonId = *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler);
src/battle_controller_opponent.c:        *(gBattleStruct->AI_monToSwitchIntoId + gActiveBattler) = PARTY_SIZE;
src/battle_controller_opponent.c:    *(gBattleStruct->monToSwitchIntoId + gActiveBattler) = chosenMonId;
src/battle_controller_player.c:        if (gBattleStruct->mega.playerSelect)
src/battle_controller_player.c:        if (gBattleStruct->mega.playerSelect)
src/battle_controller_player.c:            if (gBattleStruct->mega.playerSelect)
src/battle_controller_player.c:        gBattleStruct->mega.playerSelect = FALSE;
src/battle_controller_player.c:            gBattleStruct->mega.playerSelect ^= 1;
src/battle_controller_player.c:            ChangeMegaTriggerSprite(gBattleStruct->mega.triggerSpriteId, gBattleStruct->mega.playerSelect);
src/battle_controller_player.c:    if (--*(gBattleStruct->arenaMindPoints + gActiveBattler) == 0)
src/battle_controller_player.c:        *(gBattleStruct->arenaMindPoints + gActiveBattler) = 8;
src/battle_controller_player.c:        gBattleStruct->mega.playerSelect = FALSE;
src/battle_controller_player.c:            gBattleStruct->mega.triggerSpriteId = 0xFF;
src/battle_controller_player.c:        *(&gBattleStruct->battlerPreventingSwitchout) = gBattleResources->bufferA[gActiveBattler][1] >> 4;
src/battle_controller_player.c:        *(&gBattleStruct->prevSelectedPartySlot) = gBattleResources->bufferA[gActiveBattler][2];
src/battle_controller_player.c:        *(&gBattleStruct->abilityPreventingSwitchout) = (gBattleResources->bufferA[gActiveBattler][3] & 0xFF) | (gBattleResources->bufferA[gActiveBattler][7] << 8);
src/party_menu.c:    if (slot < MULTI_PARTY_SIZE && (gBattleTypeFlags & BATTLE_TYPE_ARENA) && gMain.inBattle && (gBattleStruct->arenaLostPlayerMons >> GetPartyIdFromBattleSlot(slot) & 1))
src/party_menu.c:    if (GetPartyIdFromBattleSlot(slot) == gBattleStruct->prevSelectedPartySlot)
src/party_menu.c:    BufferBattlePartyOrderBySide(gBattleStruct->field_60[battlerId], flankId, battlerId);
src/party_menu.c:        partyBattleOrder = gBattleStruct->field_60[battlerId];
src/battle_bg.c:        gBattleStruct->linkBattleVsSpriteId_V = CreateSprite(&sVsLetter_V_SpriteTemplate, 111, 80, 0);
src/battle_bg.c:        gBattleStruct->linkBattleVsSpriteId_S = CreateSprite(&sVsLetter_S_SpriteTemplate, 129, 80, 0);
src/battle_bg.c:        gSprites[gBattleStruct->linkBattleVsSpriteId_V].invisible = TRUE;
src/battle_bg.c:        gSprites[gBattleStruct->linkBattleVsSpriteId_S].invisible = TRUE;
src/battle_bg.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].invisible = FALSE;
src/battle_bg.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].invisible = FALSE;
src/battle_bg.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].oam.tileNum += 0x40;
src/battle_bg.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].data[0] = 0;
src/battle_bg.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].data[0] = 1;
src/battle_bg.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].data[1] = gSprites[gBattleStruct->linkBattleVsSpriteId_V].pos1.x;
src/battle_bg.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].data[1] = gSprites[gBattleStruct->linkBattleVsSpriteId_S].pos1.x;
src/battle_bg.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_V].data[2] = 0;
src/battle_bg.c:            gSprites[gBattleStruct->linkBattleVsSpriteId_S].data[2] = 0;
src/battle_tv.c:    tvPtr = &gBattleStruct->tv;
src/battle_tv.c:        gBattleStruct->anyMonHasTransformed = TRUE;
src/battle_tv.c:    tvPtr = &gBattleStruct->tv;
src/battle_tv.c:    tvPtr = &gBattleStruct->tv;
src/battle_tv.c:    if (gBattleStruct->anyMonHasTransformed)
src/battle_tv.c:    movePoints = &gBattleStruct->tvMovePoints;
src/battle_tv.c:    struct BattleTvMovePoints *movePoints = &gBattleStruct->tvMovePoints;
src/battle_tv.c:    struct BattleTv *tvPtr = &gBattleStruct->tv;
src/battle_tv.c:    struct BattleTv *tvPtr = &gBattleStruct->tv;
src/battle_tv.c:        struct BattleTv *tvPtr = &gBattleStruct->tv;
