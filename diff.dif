diff --git a/src/event_object_movement.c b/src/event_object_movement.c
index e7c190e58e..068a2c194a 100644
--- a/src/event_object_movement.c
+++ b/src/event_object_movement.c
@@ -1,9 +1,13 @@
 #include "global.h"
 #include "malloc.h"
+#include "battle_anim.h"
 #include "battle_pyramid.h"
+#include "battle_util.h"
 #include "berry.h"
+#include "data.h"
 #include "debug.h"
 #include "decoration.h"
+#include "decompress.h"
 #include "event_data.h"
 #include "event_object_movement.h"
 #include "event_scripts.h"
@@ -14,25 +18,41 @@
 #include "field_player_avatar.h"
 #include "field_weather.h"
 #include "fieldmap.h"
+#include "follower_helper.h"
+#include "gpu_regs.h"
+#include "graphics.h"
 #include "mauville_old_man.h"
 #include "metatile_behavior.h"
 #include "overworld.h"
 #include "palette.h"
+#include "pokemon.h"
+#include "pokeball.h"
 #include "random.h"
+#include "region_map.h"
+#include "script.h"
+#include "sound.h"
 #include "sprite.h"
 #include "task.h"
 #include "trainer_see.h"
 #include "trainer_hill.h"
 #include "util.h"
+#include "wild_encounter.h"
 #include "constants/event_object_movement.h"
+#include "constants/abilities.h"
+#include "constants/battle.h"
 #include "constants/event_objects.h"
 #include "constants/field_effects.h"
 #include "constants/items.h"
+#include "constants/map_types.h"
 #include "constants/mauville_old_man.h"
 #include "constants/metatile_behaviors.h"
+#include "constants/rgb.h"
+#include "constants/region_map_sections.h"
+#include "constants/songs.h"
+#include "constants/species.h"
 #include "constants/trainer_types.h"
 #include "constants/union_room.h"
-#include "script.h"
+#include "constants/weather.h"
 
 // this file was known as evobjmv.c in Game Freak's original source
 
@@ -50,6 +70,13 @@ enum {
     JUMP_DISTANCE_FAR,
 };
 
+// Used for storing conditional emotes
+struct SpecialEmote
+{
+    u16 index;
+    u8 emotion;
+};
+
 // Sprite data used throughout
 #define sObjEventId   data[0]
 #define sTypeFuncId   data[1] // Index into corresponding gMovementTypeFuncs_* table
@@ -117,7 +144,10 @@ static void InitObjectPriorityByElevation(struct Sprite *, u8);
 static void ObjectEventUpdateSubpriority(struct ObjectEvent *, struct Sprite *);
 static void DoTracksGroundEffect_None(struct ObjectEvent *, struct Sprite *, u8);
 static void DoTracksGroundEffect_Footprints(struct ObjectEvent *, struct Sprite *, u8);
+static void DoTracksGroundEffect_FootprintsB(struct ObjectEvent*, struct Sprite*, u8);
+static void DoTracksGroundEffect_FootprintsC(struct ObjectEvent*, struct Sprite*, u8);
 static void DoTracksGroundEffect_BikeTireTracks(struct ObjectEvent *, struct Sprite *, u8);
+static void DoTracksGroundEffect_SlitherTracks(struct ObjectEvent*, struct Sprite*, u8);
 static void DoRippleFieldEffect(struct ObjectEvent *, struct Sprite *);
 static void DoGroundEffects_OnSpawn(struct ObjectEvent *, struct Sprite *);
 static void DoGroundEffects_OnBeginStep(struct ObjectEvent *, struct Sprite *);
@@ -136,26 +166,29 @@ static void UpdateObjectEventVisibility(struct ObjectEvent *, struct Sprite *);
 static void MakeSpriteTemplateFromObjectEventTemplate(const struct ObjectEventTemplate *, struct SpriteTemplate *, const struct SubspriteTable **);
 static void GetObjectEventMovingCameraOffset(s16 *, s16 *);
 static u8 GetObjectEventIdByLocalId(u8);
-const struct ObjectEventTemplate *GetObjectEventTemplateByLocalIdAndMap(u8, u8, u8);
-void LoadObjectEventPalette(u16); 
+static const struct ObjectEventTemplate *GetObjectEventTemplateByLocalIdAndMap(u8, u8, u8);
+u8 LoadObjectEventPalette(u16); 
 static void RemoveObjectEventIfOutsideView(struct ObjectEvent *);
 static void SpawnObjectEventOnReturnToField(u8, s16, s16);
 static void SetPlayerAvatarObjectEventIdAndObjectId(u8, u8);
+static u8 UpdateSpritePalette(const struct SpritePalette *spritePalette, struct Sprite *sprite);
 static void ResetObjectEventFldEffData(struct ObjectEvent *);
 static u8 LoadSpritePaletteIfTagExists(const struct SpritePalette *);
 static u16 FindObjectEventPaletteIndexByTag(u16);
-static void _PatchObjectPalette(u16, u8);
+void _PatchObjectPalette(u16, u8);
 static bool8 ObjectEventDoesElevationMatch(struct ObjectEvent *, u8);
 static void SpriteCB_CameraObject(struct Sprite *);
 static void CameraObject_Init(struct Sprite *);
 static void CameraObject_UpdateMove(struct Sprite *);
 static void CameraObject_UpdateFrozen(struct Sprite *);
 static const struct ObjectEventTemplate *FindObjectEventTemplateByLocalId(u8, const struct ObjectEventTemplate *, u8);
-static void ClearObjectEventMovement(struct ObjectEvent *, struct Sprite *);
 static void ObjectEventSetSingleMovement(struct ObjectEvent *, struct Sprite *, u8);
 static void SetSpriteDataForNormalStep(struct Sprite *, u8, u8);
 static void InitSpriteForFigure8Anim(struct Sprite *);
 static bool8 AnimateSpriteInFigure8(struct Sprite *);
+u8 GetDirectionToFace(s16 x1, s16 y1, s16 x2, s16 y2);
+static void FollowerSetGraphics(struct ObjectEvent *, u16, u8, bool8);
+static void ObjectEventSetGraphics(struct ObjectEvent *, const struct ObjectEventGraphicsInfo *);
 static void SpriteCB_VirtualObject(struct Sprite *);
 static void DoShadowFieldEffect(struct ObjectEvent *);
 static void SetJumpSpriteData(struct Sprite *, u8, u8, u8);
@@ -165,9 +198,14 @@ static u8 DoJumpSpriteMovement(struct Sprite *);
 static u8 DoJumpSpecialSpriteMovement(struct Sprite *);
 static void CreateLevitateMovementTask(struct ObjectEvent *);
 static void DestroyLevitateMovementTask(u8);
+static bool8 GetFollowerInfo(u16 *species, u8 *form, u8 *shiny);
+static u8 LoadDynamicFollowerPalette(u16 species, u8 form, bool32 shiny);
+static const struct ObjectEventGraphicsInfo *SpeciesToGraphicsInfo(u16 species, u8 form);
 static bool8 NpcTakeStep(struct Sprite *);
 static bool8 IsElevationMismatchAt(u8, s16, s16);
 static bool8 AreElevationsCompatible(u8, u8);
+static u16 PackGraphicsId(const struct ObjectEventTemplate *template);
+static void CopyObjectGraphicsInfoToSpriteTemplate_WithMovementType(u16 graphicsId, u16 movementType, struct SpriteTemplate *spriteTemplate, const struct SubspriteTable **subspriteTables);
 
 //Kustom Collisions
 static bool8 IsSpecialCollisionWithPlayer(struct ObjectEvent *, s16, s16);
@@ -300,6 +338,8 @@ static void (*const sMovementTypeCallbacks[])(struct Sprite *) =
     [MOVEMENT_TYPE_WALK_SLOWLY_IN_PLACE_UP] = MovementType_WalkSlowlyInPlace,
     [MOVEMENT_TYPE_WALK_SLOWLY_IN_PLACE_LEFT] = MovementType_WalkSlowlyInPlace,
     [MOVEMENT_TYPE_WALK_SLOWLY_IN_PLACE_RIGHT] = MovementType_WalkSlowlyInPlace,
+    [MOVEMENT_TYPE_FOLLOW_PLAYER] = MovementType_FollowPlayer,
+	//KUSTOM DESERT TEMPLE
     [MOVEMENT_TYPE_CHASE_PLAYER] = MovementType_ChasePlayer,
 };
 
@@ -434,943 +474,15 @@ const u8 gInitialMovementTypeFacingDirections[] = {
     [MOVEMENT_TYPE_CHASE_PLAYER] = DIR_SOUTH,
 };
 
-#define OBJ_EVENT_PAL_TAG_BRENDAN                 0x1100
-#define OBJ_EVENT_PAL_TAG_BRENDAN_REFLECTION      0x1101
-#define OBJ_EVENT_PAL_TAG_BRIDGE_REFLECTION       0x1102
-#define OBJ_EVENT_PAL_TAG_NPC_1                   0x1103
-#define OBJ_EVENT_PAL_TAG_NPC_2                   0x1104
-#define OBJ_EVENT_PAL_TAG_NPC_3                   0x1105
-#define OBJ_EVENT_PAL_TAG_NPC_4                   0x1106
-#define OBJ_EVENT_PAL_TAG_NPC_1_REFLECTION        0x1107
-#define OBJ_EVENT_PAL_TAG_NPC_2_REFLECTION        0x1108
-#define OBJ_EVENT_PAL_TAG_NPC_3_REFLECTION        0x1109
-#define OBJ_EVENT_PAL_TAG_NPC_4_REFLECTION        0x110A
-#define OBJ_EVENT_PAL_TAG_QUINTY_PLUMP            0x110B
-#define OBJ_EVENT_PAL_TAG_QUINTY_PLUMP_REFLECTION 0x110C
-#define OBJ_EVENT_PAL_TAG_TRUCK                   0x110D
-#define OBJ_EVENT_PAL_TAG_VIGOROTH                0x110E
-#define OBJ_EVENT_PAL_TAG_ZIGZAGOON               0x110F
-#define OBJ_EVENT_PAL_TAG_MAY                     0x1110
-#define OBJ_EVENT_PAL_TAG_MAY_REFLECTION          0x1111
-#define OBJ_EVENT_PAL_TAG_MOVING_BOX              0x1112
-#define OBJ_EVENT_PAL_TAG_CABLE_CAR               0x1113
-#define OBJ_EVENT_PAL_TAG_SSTIDAL                 0x1114
-#define OBJ_EVENT_PAL_TAG_PLAYER_UNDERWATER       0x1115
-#define OBJ_EVENT_PAL_TAG_KYOGRE                  0x1116
-#define OBJ_EVENT_PAL_TAG_KYOGRE_REFLECTION       0x1117
-#define OBJ_EVENT_PAL_TAG_GROUDON                 0x1118
-#define OBJ_EVENT_PAL_TAG_GROUDON_REFLECTION      0x1119
-#define OBJ_EVENT_PAL_TAG_UNUSED                  0x111A
-#define OBJ_EVENT_PAL_TAG_SUBMARINE_SHADOW        0x111B
-#define OBJ_EVENT_PAL_TAG_POOCHYENA               0x111C
-#define OBJ_EVENT_PAL_TAG_RED_LEAF                0x111D
-#define OBJ_EVENT_PAL_TAG_DEOXYS                  0x111E
-#define OBJ_EVENT_PAL_TAG_BIRTH_ISLAND_STONE      0x111F
-#define OBJ_EVENT_PAL_TAG_HO_OH                   0x1120
-#define OBJ_EVENT_PAL_TAG_LUGIA                   0x1121
-#define OBJ_EVENT_PAL_TAG_RS_BRENDAN              0x1122
-#define OBJ_EVENT_PAL_TAG_RS_MAY                  0x1123
-#define OBJ_EVENT_PAL_TAG_BLUE		              0x1124
-#define OBJ_EVENT_PAL_TAG_GRANDMA		          0x1125
-#define OBJ_EVENT_PAL_TAG_EEVEE		          	  0x1126
-#define OBJ_EVENT_PAL_TAG_FLAREON		          0x1127
-#define OBJ_EVENT_PAL_TAG_JOLTEON		          0x1128
-#define OBJ_EVENT_PAL_TAG_VAPOREON		          0x1129
-#define OBJ_EVENT_PAL_TAG_ESPEON		          0x112A
-#define OBJ_EVENT_PAL_TAG_UMBREON		          0x112B
-#define OBJ_EVENT_PAL_TAG_LEAFEON		          0x112C
-#define OBJ_EVENT_PAL_TAG_GLACEON		          0x112D
-#define OBJ_EVENT_PAL_TAG_ROCKET_M		          0x112E
-#define OBJ_EVENT_PAL_TAG_ROCKET_F		          0x112F
-#define OBJ_EVENT_PAL_TAG_GIOVANNI		          0x1130
-#define OBJ_EVENT_PAL_TAG_LORELEI		          0x1131
-#define OBJ_EVENT_PAL_TAG_BLAINE		          0x1132
-#define OBJ_EVENT_PAL_TAG_JESSIE		          0x1133
-#define OBJ_EVENT_PAL_TAG_JAMES		              0x1134
-#define OBJ_EVENT_PAL_TAG_MEOWTH	              0x1135
-#define OBJ_EVENT_PAL_TAG_SOLDIER	              0x1136
-#define OBJ_EVENT_PAL_TAG_BIKER		              0x1137
-#define OBJ_EVENT_PAL_TAG_CHANNELER	              0x1138
-#define OBJ_EVENT_PAL_TAG_CHEF  	              0x1139
-#define OBJ_EVENT_PAL_TAG_POLICEMAN  	          0x113A
-#define OBJ_EVENT_PAL_TAG_PROF_OAK  	          0x113B
-#define OBJ_EVENT_PAL_TAG_ROCKER	  	          0x113C
-#define OBJ_EVENT_PAL_TAG_YOUNGSTER2	  	      0x113D
-#define OBJ_EVENT_PAL_TAG_WORKER  		  	      0x113E
-#define OBJ_EVENT_PAL_TAG_MEWTWO_ARMOR		  	  0x113F
-#define OBJ_EVENT_PAL_TAG_LT_SURGE		  	      0x1140
-#define OBJ_EVENT_PAL_TAG_MISTY		  	          0x1141
-#define OBJ_EVENT_PAL_TAG_MAUVILLE_OLD_MAN_2	  0x1142
-#define OBJ_EVENT_PAL_TAG_NURSE_JOY          	  0x1143
-#define OBJ_EVENT_PAL_TAG_BIG_GREEN          	  0x1144
-#define OBJ_EVENT_PAL_TAG_YOUNGSTER_RED       	  0x1145
-#define OBJ_EVENT_PAL_TAG_GREEN              	  0x1146
-#define OBJ_EVENT_PAL_TAG_OLD_MAN_LYING_DOWN      0x1147
-#define OBJ_EVENT_PAL_TAG_BIG_RED                 0x1148
-#define OBJ_EVENT_PAL_TAG_BIG_YELLOW              0x1149
-#define OBJ_EVENT_PAL_TAG_BRUNO                   0x114A
-//HEXDECIMAL ABOVE 
-#define OBJ_EVENT_PAL_TAG_NONE                    0x11FF
-
-
-//Pokemon overworlds
-
-#define OBJ_EVENT_PAL_TAG_POKEMON_START 0x1800
-#define OBJ_EVENT_PAL_TAG_POKEMON_001 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 1)
-#define OBJ_EVENT_PAL_TAG_POKEMON_002 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 2)
-#define OBJ_EVENT_PAL_TAG_POKEMON_003 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 3)
-#define OBJ_EVENT_PAL_TAG_POKEMON_004 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 4)
-#define OBJ_EVENT_PAL_TAG_POKEMON_005 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 5)
-#define OBJ_EVENT_PAL_TAG_POKEMON_006 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 6)
-#define OBJ_EVENT_PAL_TAG_POKEMON_007 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 7)
-#define OBJ_EVENT_PAL_TAG_POKEMON_008 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 8)
-#define OBJ_EVENT_PAL_TAG_POKEMON_009 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 9)
-#define OBJ_EVENT_PAL_TAG_POKEMON_010 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 10)
-#define OBJ_EVENT_PAL_TAG_POKEMON_011 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 11)
-#define OBJ_EVENT_PAL_TAG_POKEMON_012 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 12)
-#define OBJ_EVENT_PAL_TAG_POKEMON_013 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 13)
-#define OBJ_EVENT_PAL_TAG_POKEMON_014 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 14)
-#define OBJ_EVENT_PAL_TAG_POKEMON_015 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 15)
-#define OBJ_EVENT_PAL_TAG_POKEMON_016 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 16)
-#define OBJ_EVENT_PAL_TAG_POKEMON_017 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 17)
-#define OBJ_EVENT_PAL_TAG_POKEMON_018 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 18)
-#define OBJ_EVENT_PAL_TAG_POKEMON_019 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 19)
-#define OBJ_EVENT_PAL_TAG_POKEMON_020 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 20)
-#define OBJ_EVENT_PAL_TAG_POKEMON_021 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 21)
-#define OBJ_EVENT_PAL_TAG_POKEMON_022 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 22)
-#define OBJ_EVENT_PAL_TAG_POKEMON_023 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 23)
-#define OBJ_EVENT_PAL_TAG_POKEMON_024 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 24)
-#define OBJ_EVENT_PAL_TAG_POKEMON_025 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 25)
-#define OBJ_EVENT_PAL_TAG_POKEMON_026 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 26)
-#define OBJ_EVENT_PAL_TAG_POKEMON_027 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 27)
-#define OBJ_EVENT_PAL_TAG_POKEMON_028 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 28)
-#define OBJ_EVENT_PAL_TAG_POKEMON_029 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 29)
-#define OBJ_EVENT_PAL_TAG_POKEMON_030 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 30)
-#define OBJ_EVENT_PAL_TAG_POKEMON_031 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 31)
-#define OBJ_EVENT_PAL_TAG_POKEMON_032 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 32)
-#define OBJ_EVENT_PAL_TAG_POKEMON_033 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 33)
-#define OBJ_EVENT_PAL_TAG_POKEMON_034 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 34)
-#define OBJ_EVENT_PAL_TAG_POKEMON_035 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 35)
-#define OBJ_EVENT_PAL_TAG_POKEMON_036 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 36)
-#define OBJ_EVENT_PAL_TAG_POKEMON_037 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 37)
-#define OBJ_EVENT_PAL_TAG_POKEMON_038 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 38)
-#define OBJ_EVENT_PAL_TAG_POKEMON_039 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 39)
-#define OBJ_EVENT_PAL_TAG_POKEMON_040 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 40)
-#define OBJ_EVENT_PAL_TAG_POKEMON_041 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 41)
-#define OBJ_EVENT_PAL_TAG_POKEMON_042 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 42)
-#define OBJ_EVENT_PAL_TAG_POKEMON_043 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 43)
-#define OBJ_EVENT_PAL_TAG_POKEMON_044 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 44)
-#define OBJ_EVENT_PAL_TAG_POKEMON_045 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 45)
-#define OBJ_EVENT_PAL_TAG_POKEMON_046 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 46)
-#define OBJ_EVENT_PAL_TAG_POKEMON_047 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 47)
-#define OBJ_EVENT_PAL_TAG_POKEMON_048 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 48)
-#define OBJ_EVENT_PAL_TAG_POKEMON_049 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 49)
-#define OBJ_EVENT_PAL_TAG_POKEMON_050 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 50)
-#define OBJ_EVENT_PAL_TAG_POKEMON_051 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 51)
-#define OBJ_EVENT_PAL_TAG_POKEMON_052 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 52)
-#define OBJ_EVENT_PAL_TAG_POKEMON_053 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 53)
-#define OBJ_EVENT_PAL_TAG_POKEMON_054 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 54)
-#define OBJ_EVENT_PAL_TAG_POKEMON_055 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 55)
-#define OBJ_EVENT_PAL_TAG_POKEMON_056 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 56)
-#define OBJ_EVENT_PAL_TAG_POKEMON_057 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 57)
-#define OBJ_EVENT_PAL_TAG_POKEMON_058 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 58)
-#define OBJ_EVENT_PAL_TAG_POKEMON_059 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 59)
-#define OBJ_EVENT_PAL_TAG_POKEMON_060 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 60)
-#define OBJ_EVENT_PAL_TAG_POKEMON_061 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 61)
-#define OBJ_EVENT_PAL_TAG_POKEMON_062 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 62)
-#define OBJ_EVENT_PAL_TAG_POKEMON_063 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 63)
-#define OBJ_EVENT_PAL_TAG_POKEMON_064 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 64)
-#define OBJ_EVENT_PAL_TAG_POKEMON_065 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 65)
-#define OBJ_EVENT_PAL_TAG_POKEMON_066 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 66)
-#define OBJ_EVENT_PAL_TAG_POKEMON_067 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 67)
-#define OBJ_EVENT_PAL_TAG_POKEMON_068 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 68)
-#define OBJ_EVENT_PAL_TAG_POKEMON_069 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 69)
-#define OBJ_EVENT_PAL_TAG_POKEMON_070 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 70)
-#define OBJ_EVENT_PAL_TAG_POKEMON_071 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 71)
-#define OBJ_EVENT_PAL_TAG_POKEMON_072 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 72)
-#define OBJ_EVENT_PAL_TAG_POKEMON_073 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 73)
-#define OBJ_EVENT_PAL_TAG_POKEMON_074 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 74)
-#define OBJ_EVENT_PAL_TAG_POKEMON_075 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 75)
-#define OBJ_EVENT_PAL_TAG_POKEMON_076 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 76)
-#define OBJ_EVENT_PAL_TAG_POKEMON_077 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 77)
-#define OBJ_EVENT_PAL_TAG_POKEMON_078 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 78)
-#define OBJ_EVENT_PAL_TAG_POKEMON_079 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 79)
-#define OBJ_EVENT_PAL_TAG_POKEMON_080 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 80)
-#define OBJ_EVENT_PAL_TAG_POKEMON_081 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 81)
-#define OBJ_EVENT_PAL_TAG_POKEMON_082 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 82)
-#define OBJ_EVENT_PAL_TAG_POKEMON_083 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 83)
-#define OBJ_EVENT_PAL_TAG_POKEMON_084 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 84)
-#define OBJ_EVENT_PAL_TAG_POKEMON_085 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 85)
-#define OBJ_EVENT_PAL_TAG_POKEMON_086 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 86)
-#define OBJ_EVENT_PAL_TAG_POKEMON_087 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 87)
-#define OBJ_EVENT_PAL_TAG_POKEMON_088 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 88)
-#define OBJ_EVENT_PAL_TAG_POKEMON_089 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 89)
-#define OBJ_EVENT_PAL_TAG_POKEMON_090 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 90)
-#define OBJ_EVENT_PAL_TAG_POKEMON_091 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 91)
-#define OBJ_EVENT_PAL_TAG_POKEMON_092 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 92)
-#define OBJ_EVENT_PAL_TAG_POKEMON_093 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 93)
-#define OBJ_EVENT_PAL_TAG_POKEMON_094 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 94)
-#define OBJ_EVENT_PAL_TAG_POKEMON_095 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 95)
-#define OBJ_EVENT_PAL_TAG_POKEMON_096 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 96)
-#define OBJ_EVENT_PAL_TAG_POKEMON_097 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 97)
-#define OBJ_EVENT_PAL_TAG_POKEMON_098 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 98)
-#define OBJ_EVENT_PAL_TAG_POKEMON_099 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 99)
-#define OBJ_EVENT_PAL_TAG_POKEMON_100 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 100)
-#define OBJ_EVENT_PAL_TAG_POKEMON_101 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 101)
-#define OBJ_EVENT_PAL_TAG_POKEMON_102 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 102)
-#define OBJ_EVENT_PAL_TAG_POKEMON_103 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 103)
-#define OBJ_EVENT_PAL_TAG_POKEMON_104 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 104)
-#define OBJ_EVENT_PAL_TAG_POKEMON_105 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 105)
-#define OBJ_EVENT_PAL_TAG_POKEMON_106 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 106)
-#define OBJ_EVENT_PAL_TAG_POKEMON_107 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 107)
-#define OBJ_EVENT_PAL_TAG_POKEMON_108 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 108)
-#define OBJ_EVENT_PAL_TAG_POKEMON_109 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 109)
-#define OBJ_EVENT_PAL_TAG_POKEMON_110 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 110)
-#define OBJ_EVENT_PAL_TAG_POKEMON_111 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 111)
-#define OBJ_EVENT_PAL_TAG_POKEMON_112 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 112)
-#define OBJ_EVENT_PAL_TAG_POKEMON_113 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 113)
-#define OBJ_EVENT_PAL_TAG_POKEMON_114 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 114)
-#define OBJ_EVENT_PAL_TAG_POKEMON_115 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 115)
-#define OBJ_EVENT_PAL_TAG_POKEMON_116 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 116)
-#define OBJ_EVENT_PAL_TAG_POKEMON_117 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 117)
-#define OBJ_EVENT_PAL_TAG_POKEMON_118 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 118)
-#define OBJ_EVENT_PAL_TAG_POKEMON_119 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 119)
-#define OBJ_EVENT_PAL_TAG_POKEMON_120 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 120)
-#define OBJ_EVENT_PAL_TAG_POKEMON_121 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 121)
-#define OBJ_EVENT_PAL_TAG_POKEMON_122 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 122)
-#define OBJ_EVENT_PAL_TAG_POKEMON_123 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 123)
-#define OBJ_EVENT_PAL_TAG_POKEMON_124 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 124)
-#define OBJ_EVENT_PAL_TAG_POKEMON_125 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 125)
-#define OBJ_EVENT_PAL_TAG_POKEMON_126 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 126)
-#define OBJ_EVENT_PAL_TAG_POKEMON_127 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 127)
-#define OBJ_EVENT_PAL_TAG_POKEMON_128 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 128)
-#define OBJ_EVENT_PAL_TAG_POKEMON_129 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 129)
-#define OBJ_EVENT_PAL_TAG_POKEMON_130 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 130)
-#define OBJ_EVENT_PAL_TAG_POKEMON_131 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 131)
-#define OBJ_EVENT_PAL_TAG_POKEMON_132 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 132)
-#define OBJ_EVENT_PAL_TAG_POKEMON_133 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 133)
-#define OBJ_EVENT_PAL_TAG_POKEMON_134 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 134)
-#define OBJ_EVENT_PAL_TAG_POKEMON_135 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 135)
-#define OBJ_EVENT_PAL_TAG_POKEMON_136 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 136)
-#define OBJ_EVENT_PAL_TAG_POKEMON_137 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 137)
-#define OBJ_EVENT_PAL_TAG_POKEMON_138 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 138)
-#define OBJ_EVENT_PAL_TAG_POKEMON_139 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 139)
-#define OBJ_EVENT_PAL_TAG_POKEMON_140 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 140)
-#define OBJ_EVENT_PAL_TAG_POKEMON_141 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 141)
-#define OBJ_EVENT_PAL_TAG_POKEMON_142 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 142)
-#define OBJ_EVENT_PAL_TAG_POKEMON_143 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 143)
-#define OBJ_EVENT_PAL_TAG_POKEMON_144 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 144)
-#define OBJ_EVENT_PAL_TAG_POKEMON_145 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 145)
-#define OBJ_EVENT_PAL_TAG_POKEMON_146 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 146)
-#define OBJ_EVENT_PAL_TAG_POKEMON_147 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 147)
-#define OBJ_EVENT_PAL_TAG_POKEMON_148 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 148)
-#define OBJ_EVENT_PAL_TAG_POKEMON_149 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 149)
-#define OBJ_EVENT_PAL_TAG_POKEMON_150 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 150)
-#define OBJ_EVENT_PAL_TAG_POKEMON_151 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 151)
-#define OBJ_EVENT_PAL_TAG_POKEMON_152 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 152)
-#define OBJ_EVENT_PAL_TAG_POKEMON_153 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 153)
-#define OBJ_EVENT_PAL_TAG_POKEMON_154 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 154)
-#define OBJ_EVENT_PAL_TAG_POKEMON_155 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 155)
-#define OBJ_EVENT_PAL_TAG_POKEMON_156 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 156)
-#define OBJ_EVENT_PAL_TAG_POKEMON_157 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 157)
-#define OBJ_EVENT_PAL_TAG_POKEMON_158 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 158)
-#define OBJ_EVENT_PAL_TAG_POKEMON_159 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 159)
-#define OBJ_EVENT_PAL_TAG_POKEMON_160 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 160)
-#define OBJ_EVENT_PAL_TAG_POKEMON_161 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 161)
-#define OBJ_EVENT_PAL_TAG_POKEMON_162 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 162)
-#define OBJ_EVENT_PAL_TAG_POKEMON_163 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 163)
-#define OBJ_EVENT_PAL_TAG_POKEMON_164 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 164)
-#define OBJ_EVENT_PAL_TAG_POKEMON_165 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 165)
-#define OBJ_EVENT_PAL_TAG_POKEMON_166 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 166)
-#define OBJ_EVENT_PAL_TAG_POKEMON_167 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 167)
-#define OBJ_EVENT_PAL_TAG_POKEMON_168 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 168)
-#define OBJ_EVENT_PAL_TAG_POKEMON_169 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 169)
-#define OBJ_EVENT_PAL_TAG_POKEMON_170 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 170)
-#define OBJ_EVENT_PAL_TAG_POKEMON_171 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 171)
-#define OBJ_EVENT_PAL_TAG_POKEMON_172 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 172)
-#define OBJ_EVENT_PAL_TAG_POKEMON_173 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 173)
-#define OBJ_EVENT_PAL_TAG_POKEMON_174 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 174)
-#define OBJ_EVENT_PAL_TAG_POKEMON_175 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 175)
-#define OBJ_EVENT_PAL_TAG_POKEMON_176 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 176)
-#define OBJ_EVENT_PAL_TAG_POKEMON_177 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 177)
-#define OBJ_EVENT_PAL_TAG_POKEMON_178 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 178)
-#define OBJ_EVENT_PAL_TAG_POKEMON_179 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 179)
-#define OBJ_EVENT_PAL_TAG_POKEMON_180 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 180)
-#define OBJ_EVENT_PAL_TAG_POKEMON_181 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 181)
-#define OBJ_EVENT_PAL_TAG_POKEMON_182 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 182)
-#define OBJ_EVENT_PAL_TAG_POKEMON_183 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 183)
-#define OBJ_EVENT_PAL_TAG_POKEMON_184 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 184)
-#define OBJ_EVENT_PAL_TAG_POKEMON_185 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 185)
-#define OBJ_EVENT_PAL_TAG_POKEMON_186 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 186)
-#define OBJ_EVENT_PAL_TAG_POKEMON_187 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 187)
-#define OBJ_EVENT_PAL_TAG_POKEMON_188 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 188)
-#define OBJ_EVENT_PAL_TAG_POKEMON_189 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 189)
-#define OBJ_EVENT_PAL_TAG_POKEMON_190 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 190)
-#define OBJ_EVENT_PAL_TAG_POKEMON_191 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 191)
-#define OBJ_EVENT_PAL_TAG_POKEMON_192 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 192)
-#define OBJ_EVENT_PAL_TAG_POKEMON_193 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 193)
-#define OBJ_EVENT_PAL_TAG_POKEMON_194 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 194)
-#define OBJ_EVENT_PAL_TAG_POKEMON_195 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 195)
-#define OBJ_EVENT_PAL_TAG_POKEMON_196 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 196)
-#define OBJ_EVENT_PAL_TAG_POKEMON_197 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 197)
-#define OBJ_EVENT_PAL_TAG_POKEMON_198 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 198)
-#define OBJ_EVENT_PAL_TAG_POKEMON_199 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 199)
-#define OBJ_EVENT_PAL_TAG_POKEMON_200 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 200)
-#define OBJ_EVENT_PAL_TAG_POKEMON_201 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 201)
-#define OBJ_EVENT_PAL_TAG_POKEMON_202 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 202)
-#define OBJ_EVENT_PAL_TAG_POKEMON_203 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 203)
-#define OBJ_EVENT_PAL_TAG_POKEMON_204 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 204)
-#define OBJ_EVENT_PAL_TAG_POKEMON_205 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 205)
-#define OBJ_EVENT_PAL_TAG_POKEMON_206 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 206)
-#define OBJ_EVENT_PAL_TAG_POKEMON_207 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 207)
-#define OBJ_EVENT_PAL_TAG_POKEMON_208 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 208)
-#define OBJ_EVENT_PAL_TAG_POKEMON_209 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 209)
-#define OBJ_EVENT_PAL_TAG_POKEMON_210 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 210)
-#define OBJ_EVENT_PAL_TAG_POKEMON_211 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 211)
-#define OBJ_EVENT_PAL_TAG_POKEMON_212 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 212)
-#define OBJ_EVENT_PAL_TAG_POKEMON_213 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 213)
-#define OBJ_EVENT_PAL_TAG_POKEMON_214 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 214)
-#define OBJ_EVENT_PAL_TAG_POKEMON_215 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 215)
-#define OBJ_EVENT_PAL_TAG_POKEMON_216 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 216)
-#define OBJ_EVENT_PAL_TAG_POKEMON_217 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 217)
-#define OBJ_EVENT_PAL_TAG_POKEMON_218 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 218)
-#define OBJ_EVENT_PAL_TAG_POKEMON_219 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 219)
-#define OBJ_EVENT_PAL_TAG_POKEMON_220 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 220)
-#define OBJ_EVENT_PAL_TAG_POKEMON_221 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 221)
-#define OBJ_EVENT_PAL_TAG_POKEMON_222 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 222)
-#define OBJ_EVENT_PAL_TAG_POKEMON_223 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 223)
-#define OBJ_EVENT_PAL_TAG_POKEMON_224 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 224)
-#define OBJ_EVENT_PAL_TAG_POKEMON_225 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 225)
-#define OBJ_EVENT_PAL_TAG_POKEMON_226 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 226)
-#define OBJ_EVENT_PAL_TAG_POKEMON_227 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 227)
-#define OBJ_EVENT_PAL_TAG_POKEMON_228 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 228)
-#define OBJ_EVENT_PAL_TAG_POKEMON_229 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 229)
-#define OBJ_EVENT_PAL_TAG_POKEMON_230 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 230)
-#define OBJ_EVENT_PAL_TAG_POKEMON_231 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 231)
-#define OBJ_EVENT_PAL_TAG_POKEMON_232 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 232)
-#define OBJ_EVENT_PAL_TAG_POKEMON_233 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 233)
-#define OBJ_EVENT_PAL_TAG_POKEMON_234 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 234)
-#define OBJ_EVENT_PAL_TAG_POKEMON_235 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 235)
-#define OBJ_EVENT_PAL_TAG_POKEMON_236 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 236)
-#define OBJ_EVENT_PAL_TAG_POKEMON_237 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 237)
-#define OBJ_EVENT_PAL_TAG_POKEMON_238 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 238)
-#define OBJ_EVENT_PAL_TAG_POKEMON_239 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 239)
-#define OBJ_EVENT_PAL_TAG_POKEMON_240 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 240)
-#define OBJ_EVENT_PAL_TAG_POKEMON_241 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 241)
-#define OBJ_EVENT_PAL_TAG_POKEMON_242 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 242)
-#define OBJ_EVENT_PAL_TAG_POKEMON_243 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 243)
-#define OBJ_EVENT_PAL_TAG_POKEMON_244 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 244)
-#define OBJ_EVENT_PAL_TAG_POKEMON_245 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 245)
-#define OBJ_EVENT_PAL_TAG_POKEMON_246 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 246)
-#define OBJ_EVENT_PAL_TAG_POKEMON_247 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 247)
-#define OBJ_EVENT_PAL_TAG_POKEMON_248 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 248)
-#define OBJ_EVENT_PAL_TAG_POKEMON_249 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 249)
-#define OBJ_EVENT_PAL_TAG_POKEMON_250 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 250)
-#define OBJ_EVENT_PAL_TAG_POKEMON_251 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 251)
-#define OBJ_EVENT_PAL_TAG_POKEMON_252 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 252)
-#define OBJ_EVENT_PAL_TAG_POKEMON_253 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 253)
-#define OBJ_EVENT_PAL_TAG_POKEMON_254 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 254)
-#define OBJ_EVENT_PAL_TAG_POKEMON_255 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 255)
-#define OBJ_EVENT_PAL_TAG_POKEMON_256 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 256)
-#define OBJ_EVENT_PAL_TAG_POKEMON_257 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 257)
-#define OBJ_EVENT_PAL_TAG_POKEMON_258 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 258)
-#define OBJ_EVENT_PAL_TAG_POKEMON_259 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 259)
-#define OBJ_EVENT_PAL_TAG_POKEMON_260 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 260)
-#define OBJ_EVENT_PAL_TAG_POKEMON_261 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 261)
-#define OBJ_EVENT_PAL_TAG_POKEMON_262 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 262)
-#define OBJ_EVENT_PAL_TAG_POKEMON_263 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 263)
-#define OBJ_EVENT_PAL_TAG_POKEMON_264 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 264)
-#define OBJ_EVENT_PAL_TAG_POKEMON_265 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 265)
-#define OBJ_EVENT_PAL_TAG_POKEMON_266 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 266)
-#define OBJ_EVENT_PAL_TAG_POKEMON_267 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 267)
-#define OBJ_EVENT_PAL_TAG_POKEMON_268 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 268)
-#define OBJ_EVENT_PAL_TAG_POKEMON_269 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 269)
-#define OBJ_EVENT_PAL_TAG_POKEMON_270 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 270)
-#define OBJ_EVENT_PAL_TAG_POKEMON_271 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 271)
-#define OBJ_EVENT_PAL_TAG_POKEMON_272 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 272)
-#define OBJ_EVENT_PAL_TAG_POKEMON_273 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 273)
-#define OBJ_EVENT_PAL_TAG_POKEMON_274 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 274)
-#define OBJ_EVENT_PAL_TAG_POKEMON_275 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 275)
-#define OBJ_EVENT_PAL_TAG_POKEMON_276 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 276)
-#define OBJ_EVENT_PAL_TAG_POKEMON_277 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 277)
-#define OBJ_EVENT_PAL_TAG_POKEMON_278 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 278)
-#define OBJ_EVENT_PAL_TAG_POKEMON_279 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 279)
-#define OBJ_EVENT_PAL_TAG_POKEMON_280 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 280)
-#define OBJ_EVENT_PAL_TAG_POKEMON_281 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 281)
-#define OBJ_EVENT_PAL_TAG_POKEMON_282 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 282)
-#define OBJ_EVENT_PAL_TAG_POKEMON_283 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 283)
-#define OBJ_EVENT_PAL_TAG_POKEMON_284 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 284)
-#define OBJ_EVENT_PAL_TAG_POKEMON_285 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 285)
-#define OBJ_EVENT_PAL_TAG_POKEMON_286 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 286)
-#define OBJ_EVENT_PAL_TAG_POKEMON_287 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 287)
-#define OBJ_EVENT_PAL_TAG_POKEMON_288 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 288)
-#define OBJ_EVENT_PAL_TAG_POKEMON_289 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 289)
-#define OBJ_EVENT_PAL_TAG_POKEMON_290 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 290)
-#define OBJ_EVENT_PAL_TAG_POKEMON_291 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 291)
-#define OBJ_EVENT_PAL_TAG_POKEMON_292 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 292)
-#define OBJ_EVENT_PAL_TAG_POKEMON_293 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 293)
-#define OBJ_EVENT_PAL_TAG_POKEMON_294 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 294)
-#define OBJ_EVENT_PAL_TAG_POKEMON_295 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 295)
-#define OBJ_EVENT_PAL_TAG_POKEMON_296 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 296)
-#define OBJ_EVENT_PAL_TAG_POKEMON_297 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 297)
-#define OBJ_EVENT_PAL_TAG_POKEMON_298 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 298)
-#define OBJ_EVENT_PAL_TAG_POKEMON_299 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 299)
-#define OBJ_EVENT_PAL_TAG_POKEMON_300 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 300)
-#define OBJ_EVENT_PAL_TAG_POKEMON_301 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 301)
-#define OBJ_EVENT_PAL_TAG_POKEMON_302 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 302)
-#define OBJ_EVENT_PAL_TAG_POKEMON_303 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 303)
-#define OBJ_EVENT_PAL_TAG_POKEMON_304 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 304)
-#define OBJ_EVENT_PAL_TAG_POKEMON_305 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 305)
-#define OBJ_EVENT_PAL_TAG_POKEMON_306 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 306)
-#define OBJ_EVENT_PAL_TAG_POKEMON_307 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 307)
-#define OBJ_EVENT_PAL_TAG_POKEMON_308 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 308)
-#define OBJ_EVENT_PAL_TAG_POKEMON_309 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 309)
-#define OBJ_EVENT_PAL_TAG_POKEMON_310 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 310)
-#define OBJ_EVENT_PAL_TAG_POKEMON_311 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 311)
-#define OBJ_EVENT_PAL_TAG_POKEMON_312 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 312)
-#define OBJ_EVENT_PAL_TAG_POKEMON_313 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 313)
-#define OBJ_EVENT_PAL_TAG_POKEMON_314 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 314)
-#define OBJ_EVENT_PAL_TAG_POKEMON_315 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 315)
-#define OBJ_EVENT_PAL_TAG_POKEMON_316 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 316)
-#define OBJ_EVENT_PAL_TAG_POKEMON_317 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 317)
-#define OBJ_EVENT_PAL_TAG_POKEMON_318 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 318)
-#define OBJ_EVENT_PAL_TAG_POKEMON_319 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 319)
-#define OBJ_EVENT_PAL_TAG_POKEMON_320 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 320)
-#define OBJ_EVENT_PAL_TAG_POKEMON_321 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 321)
-#define OBJ_EVENT_PAL_TAG_POKEMON_322 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 322)
-#define OBJ_EVENT_PAL_TAG_POKEMON_323 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 323)
-#define OBJ_EVENT_PAL_TAG_POKEMON_324 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 324)
-#define OBJ_EVENT_PAL_TAG_POKEMON_325 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 325)
-#define OBJ_EVENT_PAL_TAG_POKEMON_326 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 326)
-#define OBJ_EVENT_PAL_TAG_POKEMON_327 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 327)
-#define OBJ_EVENT_PAL_TAG_POKEMON_328 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 328)
-#define OBJ_EVENT_PAL_TAG_POKEMON_329 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 329)
-#define OBJ_EVENT_PAL_TAG_POKEMON_330 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 330)
-#define OBJ_EVENT_PAL_TAG_POKEMON_331 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 331)
-#define OBJ_EVENT_PAL_TAG_POKEMON_332 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 332)
-#define OBJ_EVENT_PAL_TAG_POKEMON_333 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 333)
-#define OBJ_EVENT_PAL_TAG_POKEMON_334 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 334)
-#define OBJ_EVENT_PAL_TAG_POKEMON_335 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 335)
-#define OBJ_EVENT_PAL_TAG_POKEMON_336 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 336)
-#define OBJ_EVENT_PAL_TAG_POKEMON_337 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 337)
-#define OBJ_EVENT_PAL_TAG_POKEMON_338 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 338)
-#define OBJ_EVENT_PAL_TAG_POKEMON_339 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 339)
-#define OBJ_EVENT_PAL_TAG_POKEMON_340 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 340)
-#define OBJ_EVENT_PAL_TAG_POKEMON_341 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 341)
-#define OBJ_EVENT_PAL_TAG_POKEMON_342 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 342)
-#define OBJ_EVENT_PAL_TAG_POKEMON_343 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 343)
-#define OBJ_EVENT_PAL_TAG_POKEMON_344 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 344)
-#define OBJ_EVENT_PAL_TAG_POKEMON_345 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 345)
-#define OBJ_EVENT_PAL_TAG_POKEMON_346 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 346)
-#define OBJ_EVENT_PAL_TAG_POKEMON_347 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 347)
-#define OBJ_EVENT_PAL_TAG_POKEMON_348 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 348)
-#define OBJ_EVENT_PAL_TAG_POKEMON_349 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 349)
-#define OBJ_EVENT_PAL_TAG_POKEMON_350 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 350)
-#define OBJ_EVENT_PAL_TAG_POKEMON_351 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 351)
-#define OBJ_EVENT_PAL_TAG_POKEMON_352 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 352)
-#define OBJ_EVENT_PAL_TAG_POKEMON_353 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 353)
-#define OBJ_EVENT_PAL_TAG_POKEMON_354 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 354)
-#define OBJ_EVENT_PAL_TAG_POKEMON_355 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 355)
-#define OBJ_EVENT_PAL_TAG_POKEMON_356 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 356)
-#define OBJ_EVENT_PAL_TAG_POKEMON_357 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 357)
-#define OBJ_EVENT_PAL_TAG_POKEMON_358 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 358)
-#define OBJ_EVENT_PAL_TAG_POKEMON_359 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 359)
-#define OBJ_EVENT_PAL_TAG_POKEMON_360 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 360)
-#define OBJ_EVENT_PAL_TAG_POKEMON_361 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 361)
-#define OBJ_EVENT_PAL_TAG_POKEMON_362 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 362)
-#define OBJ_EVENT_PAL_TAG_POKEMON_363 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 363)
-#define OBJ_EVENT_PAL_TAG_POKEMON_364 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 364)
-#define OBJ_EVENT_PAL_TAG_POKEMON_365 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 365)
-#define OBJ_EVENT_PAL_TAG_POKEMON_366 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 366)
-#define OBJ_EVENT_PAL_TAG_POKEMON_367 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 367)
-#define OBJ_EVENT_PAL_TAG_POKEMON_368 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 368)
-#define OBJ_EVENT_PAL_TAG_POKEMON_369 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 369)
-#define OBJ_EVENT_PAL_TAG_POKEMON_370 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 370)
-#define OBJ_EVENT_PAL_TAG_POKEMON_371 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 371)
-#define OBJ_EVENT_PAL_TAG_POKEMON_372 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 372)
-#define OBJ_EVENT_PAL_TAG_POKEMON_373 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 373)
-#define OBJ_EVENT_PAL_TAG_POKEMON_374 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 374)
-#define OBJ_EVENT_PAL_TAG_POKEMON_375 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 375)
-#define OBJ_EVENT_PAL_TAG_POKEMON_376 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 376)
-#define OBJ_EVENT_PAL_TAG_POKEMON_377 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 377)
-#define OBJ_EVENT_PAL_TAG_POKEMON_378 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 378)
-#define OBJ_EVENT_PAL_TAG_POKEMON_379 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 379)
-#define OBJ_EVENT_PAL_TAG_POKEMON_380 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 380)
-#define OBJ_EVENT_PAL_TAG_POKEMON_381 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 381)
-#define OBJ_EVENT_PAL_TAG_POKEMON_382 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 382)
-#define OBJ_EVENT_PAL_TAG_POKEMON_383 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 383)
-#define OBJ_EVENT_PAL_TAG_POKEMON_384 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 384)
-#define OBJ_EVENT_PAL_TAG_POKEMON_385 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 385)
-#define OBJ_EVENT_PAL_TAG_POKEMON_386 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 386)
-#define OBJ_EVENT_PAL_TAG_POKEMON_387 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 387)
-#define OBJ_EVENT_PAL_TAG_POKEMON_388 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 388)
-#define OBJ_EVENT_PAL_TAG_POKEMON_389 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 389)
-#define OBJ_EVENT_PAL_TAG_POKEMON_390 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 390)
-#define OBJ_EVENT_PAL_TAG_POKEMON_391 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 391)
-#define OBJ_EVENT_PAL_TAG_POKEMON_392 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 392)
-#define OBJ_EVENT_PAL_TAG_POKEMON_393 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 393)
-#define OBJ_EVENT_PAL_TAG_POKEMON_394 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 394)
-#define OBJ_EVENT_PAL_TAG_POKEMON_395 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 395)
-#define OBJ_EVENT_PAL_TAG_POKEMON_396 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 396)
-#define OBJ_EVENT_PAL_TAG_POKEMON_397 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 397)
-#define OBJ_EVENT_PAL_TAG_POKEMON_398 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 398)
-#define OBJ_EVENT_PAL_TAG_POKEMON_399 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 399)
-#define OBJ_EVENT_PAL_TAG_POKEMON_400 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 400)
-#define OBJ_EVENT_PAL_TAG_POKEMON_401 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 401)
-#define OBJ_EVENT_PAL_TAG_POKEMON_402 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 402)
-#define OBJ_EVENT_PAL_TAG_POKEMON_403 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 403)
-#define OBJ_EVENT_PAL_TAG_POKEMON_404 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 404)
-#define OBJ_EVENT_PAL_TAG_POKEMON_405 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 405)
-#define OBJ_EVENT_PAL_TAG_POKEMON_406 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 406)
-#define OBJ_EVENT_PAL_TAG_POKEMON_407 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 407)
-#define OBJ_EVENT_PAL_TAG_POKEMON_408 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 408)
-#define OBJ_EVENT_PAL_TAG_POKEMON_409 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 409)
-#define OBJ_EVENT_PAL_TAG_POKEMON_410 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 410)
-#define OBJ_EVENT_PAL_TAG_POKEMON_411 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 411)
-#define OBJ_EVENT_PAL_TAG_POKEMON_412 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 412)
-#define OBJ_EVENT_PAL_TAG_POKEMON_413 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 413)
-#define OBJ_EVENT_PAL_TAG_POKEMON_414 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 414)
-#define OBJ_EVENT_PAL_TAG_POKEMON_415 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 415)
-#define OBJ_EVENT_PAL_TAG_POKEMON_416 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 416)
-#define OBJ_EVENT_PAL_TAG_POKEMON_417 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 417)
-#define OBJ_EVENT_PAL_TAG_POKEMON_418 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 418)
-#define OBJ_EVENT_PAL_TAG_POKEMON_419 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 419)
-#define OBJ_EVENT_PAL_TAG_POKEMON_420 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 420)
-#define OBJ_EVENT_PAL_TAG_POKEMON_421 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 421)
-#define OBJ_EVENT_PAL_TAG_POKEMON_422 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 422)
-#define OBJ_EVENT_PAL_TAG_POKEMON_423 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 423)
-#define OBJ_EVENT_PAL_TAG_POKEMON_424 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 424)
-#define OBJ_EVENT_PAL_TAG_POKEMON_425 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 425)
-#define OBJ_EVENT_PAL_TAG_POKEMON_426 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 426)
-#define OBJ_EVENT_PAL_TAG_POKEMON_427 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 427)
-#define OBJ_EVENT_PAL_TAG_POKEMON_428 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 428)
-#define OBJ_EVENT_PAL_TAG_POKEMON_429 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 429)
-#define OBJ_EVENT_PAL_TAG_POKEMON_430 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 430)
-#define OBJ_EVENT_PAL_TAG_POKEMON_431 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 431)
-#define OBJ_EVENT_PAL_TAG_POKEMON_432 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 432)
-#define OBJ_EVENT_PAL_TAG_POKEMON_433 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 433)
-#define OBJ_EVENT_PAL_TAG_POKEMON_434 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 434)
-#define OBJ_EVENT_PAL_TAG_POKEMON_435 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 435)
-#define OBJ_EVENT_PAL_TAG_POKEMON_436 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 436)
-#define OBJ_EVENT_PAL_TAG_POKEMON_437 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 437)
-#define OBJ_EVENT_PAL_TAG_POKEMON_438 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 438)
-#define OBJ_EVENT_PAL_TAG_POKEMON_439 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 439)
-#define OBJ_EVENT_PAL_TAG_POKEMON_440 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 440)
-#define OBJ_EVENT_PAL_TAG_POKEMON_441 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 441)
-#define OBJ_EVENT_PAL_TAG_POKEMON_442 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 442)
-#define OBJ_EVENT_PAL_TAG_POKEMON_443 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 443)
-#define OBJ_EVENT_PAL_TAG_POKEMON_444 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 444)
-#define OBJ_EVENT_PAL_TAG_POKEMON_445 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 445)
-#define OBJ_EVENT_PAL_TAG_POKEMON_446 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 446)
-#define OBJ_EVENT_PAL_TAG_POKEMON_447 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 447)
-#define OBJ_EVENT_PAL_TAG_POKEMON_448 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 448)
-#define OBJ_EVENT_PAL_TAG_POKEMON_449 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 449)
-#define OBJ_EVENT_PAL_TAG_POKEMON_450 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 450)
-#define OBJ_EVENT_PAL_TAG_POKEMON_451 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 451)
-#define OBJ_EVENT_PAL_TAG_POKEMON_452 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 452)
-#define OBJ_EVENT_PAL_TAG_POKEMON_453 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 453)
-#define OBJ_EVENT_PAL_TAG_POKEMON_454 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 454)
-#define OBJ_EVENT_PAL_TAG_POKEMON_455 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 455)
-#define OBJ_EVENT_PAL_TAG_POKEMON_456 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 456)
-#define OBJ_EVENT_PAL_TAG_POKEMON_457 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 457)
-#define OBJ_EVENT_PAL_TAG_POKEMON_458 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 458)
-#define OBJ_EVENT_PAL_TAG_POKEMON_459 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 459)
-#define OBJ_EVENT_PAL_TAG_POKEMON_460 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 460)
-#define OBJ_EVENT_PAL_TAG_POKEMON_461 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 461)
-#define OBJ_EVENT_PAL_TAG_POKEMON_462 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 462)
-#define OBJ_EVENT_PAL_TAG_POKEMON_463 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 463)
-#define OBJ_EVENT_PAL_TAG_POKEMON_464 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 464)
-#define OBJ_EVENT_PAL_TAG_POKEMON_465 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 465)
-#define OBJ_EVENT_PAL_TAG_POKEMON_466 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 466)
-#define OBJ_EVENT_PAL_TAG_POKEMON_467 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 467)
-#define OBJ_EVENT_PAL_TAG_POKEMON_468 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 468)
-#define OBJ_EVENT_PAL_TAG_POKEMON_469 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 469)
-#define OBJ_EVENT_PAL_TAG_POKEMON_470 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 470)
-#define OBJ_EVENT_PAL_TAG_POKEMON_471 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 471)
-#define OBJ_EVENT_PAL_TAG_POKEMON_472 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 472)
-#define OBJ_EVENT_PAL_TAG_POKEMON_473 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 473)
-#define OBJ_EVENT_PAL_TAG_POKEMON_474 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 474)
-#define OBJ_EVENT_PAL_TAG_POKEMON_475 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 475)
-#define OBJ_EVENT_PAL_TAG_POKEMON_476 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 476)
-#define OBJ_EVENT_PAL_TAG_POKEMON_477 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 477)
-#define OBJ_EVENT_PAL_TAG_POKEMON_478 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 478)
-#define OBJ_EVENT_PAL_TAG_POKEMON_479 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 479)
-#define OBJ_EVENT_PAL_TAG_POKEMON_480 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 480)
-#define OBJ_EVENT_PAL_TAG_POKEMON_481 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 481)
-#define OBJ_EVENT_PAL_TAG_POKEMON_482 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 482)
-#define OBJ_EVENT_PAL_TAG_POKEMON_483 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 483)
-#define OBJ_EVENT_PAL_TAG_POKEMON_484 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 484)
-#define OBJ_EVENT_PAL_TAG_POKEMON_485 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 485)
-#define OBJ_EVENT_PAL_TAG_POKEMON_486 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 486)
-#define OBJ_EVENT_PAL_TAG_POKEMON_487 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 487)
-#define OBJ_EVENT_PAL_TAG_POKEMON_488 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 488)
-#define OBJ_EVENT_PAL_TAG_POKEMON_489 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 489)
-#define OBJ_EVENT_PAL_TAG_POKEMON_490 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 490)
-#define OBJ_EVENT_PAL_TAG_POKEMON_491 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 491)
-#define OBJ_EVENT_PAL_TAG_POKEMON_492 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 492)
-#define OBJ_EVENT_PAL_TAG_POKEMON_493 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 493)
-#define OBJ_EVENT_PAL_TAG_POKEMON_494 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 494)
-#define OBJ_EVENT_PAL_TAG_POKEMON_495 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 495)
-#define OBJ_EVENT_PAL_TAG_POKEMON_496 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 496)
-#define OBJ_EVENT_PAL_TAG_POKEMON_497 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 497)
-#define OBJ_EVENT_PAL_TAG_POKEMON_498 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 498)
-#define OBJ_EVENT_PAL_TAG_POKEMON_499 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 499)
-#define OBJ_EVENT_PAL_TAG_POKEMON_500 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 500)
-#define OBJ_EVENT_PAL_TAG_POKEMON_501 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 501)
-#define OBJ_EVENT_PAL_TAG_POKEMON_502 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 502)
-#define OBJ_EVENT_PAL_TAG_POKEMON_503 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 503)
-#define OBJ_EVENT_PAL_TAG_POKEMON_504 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 504)
-#define OBJ_EVENT_PAL_TAG_POKEMON_505 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 505)
-#define OBJ_EVENT_PAL_TAG_POKEMON_506 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 506)
-#define OBJ_EVENT_PAL_TAG_POKEMON_507 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 507)
-#define OBJ_EVENT_PAL_TAG_POKEMON_508 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 508)
-#define OBJ_EVENT_PAL_TAG_POKEMON_509 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 509)
-#define OBJ_EVENT_PAL_TAG_POKEMON_510 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 510)
-#define OBJ_EVENT_PAL_TAG_POKEMON_511 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 511)
-#define OBJ_EVENT_PAL_TAG_POKEMON_512 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 512)
-#define OBJ_EVENT_PAL_TAG_POKEMON_513 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 513)
-#define OBJ_EVENT_PAL_TAG_POKEMON_514 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 514)
-#define OBJ_EVENT_PAL_TAG_POKEMON_515 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 515)
-#define OBJ_EVENT_PAL_TAG_POKEMON_516 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 516)
-#define OBJ_EVENT_PAL_TAG_POKEMON_517 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 517)
-#define OBJ_EVENT_PAL_TAG_POKEMON_518 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 518)
-#define OBJ_EVENT_PAL_TAG_POKEMON_519 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 519)
-#define OBJ_EVENT_PAL_TAG_POKEMON_520 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 520)
-#define OBJ_EVENT_PAL_TAG_POKEMON_521 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 521)
-#define OBJ_EVENT_PAL_TAG_POKEMON_522 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 522)
-#define OBJ_EVENT_PAL_TAG_POKEMON_523 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 523)
-#define OBJ_EVENT_PAL_TAG_POKEMON_524 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 524)
-#define OBJ_EVENT_PAL_TAG_POKEMON_525 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 525)
-#define OBJ_EVENT_PAL_TAG_POKEMON_526 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 526)
-#define OBJ_EVENT_PAL_TAG_POKEMON_527 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 527)
-#define OBJ_EVENT_PAL_TAG_POKEMON_528 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 528)
-#define OBJ_EVENT_PAL_TAG_POKEMON_529 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 529)
-#define OBJ_EVENT_PAL_TAG_POKEMON_530 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 530)
-#define OBJ_EVENT_PAL_TAG_POKEMON_531 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 531)
-#define OBJ_EVENT_PAL_TAG_POKEMON_532 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 532)
-#define OBJ_EVENT_PAL_TAG_POKEMON_533 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 533)
-#define OBJ_EVENT_PAL_TAG_POKEMON_534 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 534)
-#define OBJ_EVENT_PAL_TAG_POKEMON_535 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 535)
-#define OBJ_EVENT_PAL_TAG_POKEMON_536 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 536)
-#define OBJ_EVENT_PAL_TAG_POKEMON_537 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 537)
-#define OBJ_EVENT_PAL_TAG_POKEMON_538 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 538)
-#define OBJ_EVENT_PAL_TAG_POKEMON_539 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 539)
-#define OBJ_EVENT_PAL_TAG_POKEMON_540 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 540)
-#define OBJ_EVENT_PAL_TAG_POKEMON_541 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 541)
-#define OBJ_EVENT_PAL_TAG_POKEMON_542 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 542)
-#define OBJ_EVENT_PAL_TAG_POKEMON_543 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 543)
-#define OBJ_EVENT_PAL_TAG_POKEMON_544 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 544)
-#define OBJ_EVENT_PAL_TAG_POKEMON_545 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 545)
-#define OBJ_EVENT_PAL_TAG_POKEMON_546 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 546)
-#define OBJ_EVENT_PAL_TAG_POKEMON_547 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 547)
-#define OBJ_EVENT_PAL_TAG_POKEMON_548 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 548)
-#define OBJ_EVENT_PAL_TAG_POKEMON_549 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 549)
-#define OBJ_EVENT_PAL_TAG_POKEMON_550 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 550)
-#define OBJ_EVENT_PAL_TAG_POKEMON_551 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 551)
-#define OBJ_EVENT_PAL_TAG_POKEMON_552 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 552)
-#define OBJ_EVENT_PAL_TAG_POKEMON_553 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 553)
-#define OBJ_EVENT_PAL_TAG_POKEMON_554 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 554)
-#define OBJ_EVENT_PAL_TAG_POKEMON_555 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 555)
-#define OBJ_EVENT_PAL_TAG_POKEMON_556 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 556)
-#define OBJ_EVENT_PAL_TAG_POKEMON_557 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 557)
-#define OBJ_EVENT_PAL_TAG_POKEMON_558 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 558)
-#define OBJ_EVENT_PAL_TAG_POKEMON_559 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 559)
-#define OBJ_EVENT_PAL_TAG_POKEMON_560 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 560)
-#define OBJ_EVENT_PAL_TAG_POKEMON_561 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 561)
-#define OBJ_EVENT_PAL_TAG_POKEMON_562 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 562)
-#define OBJ_EVENT_PAL_TAG_POKEMON_563 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 563)
-#define OBJ_EVENT_PAL_TAG_POKEMON_564 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 564)
-#define OBJ_EVENT_PAL_TAG_POKEMON_565 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 565)
-#define OBJ_EVENT_PAL_TAG_POKEMON_566 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 566)
-#define OBJ_EVENT_PAL_TAG_POKEMON_567 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 567)
-#define OBJ_EVENT_PAL_TAG_POKEMON_568 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 568)
-#define OBJ_EVENT_PAL_TAG_POKEMON_569 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 569)
-#define OBJ_EVENT_PAL_TAG_POKEMON_570 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 570)
-#define OBJ_EVENT_PAL_TAG_POKEMON_571 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 571)
-#define OBJ_EVENT_PAL_TAG_POKEMON_572 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 572)
-#define OBJ_EVENT_PAL_TAG_POKEMON_573 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 573)
-#define OBJ_EVENT_PAL_TAG_POKEMON_574 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 574)
-#define OBJ_EVENT_PAL_TAG_POKEMON_575 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 575)
-#define OBJ_EVENT_PAL_TAG_POKEMON_576 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 576)
-#define OBJ_EVENT_PAL_TAG_POKEMON_577 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 577)
-#define OBJ_EVENT_PAL_TAG_POKEMON_578 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 578)
-#define OBJ_EVENT_PAL_TAG_POKEMON_579 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 579)
-#define OBJ_EVENT_PAL_TAG_POKEMON_580 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 580)
-#define OBJ_EVENT_PAL_TAG_POKEMON_581 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 581)
-#define OBJ_EVENT_PAL_TAG_POKEMON_582 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 582)
-#define OBJ_EVENT_PAL_TAG_POKEMON_583 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 583)
-#define OBJ_EVENT_PAL_TAG_POKEMON_584 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 584)
-#define OBJ_EVENT_PAL_TAG_POKEMON_585 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 585)
-#define OBJ_EVENT_PAL_TAG_POKEMON_586 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 586)
-#define OBJ_EVENT_PAL_TAG_POKEMON_587 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 587)
-#define OBJ_EVENT_PAL_TAG_POKEMON_588 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 588)
-#define OBJ_EVENT_PAL_TAG_POKEMON_589 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 589)
-#define OBJ_EVENT_PAL_TAG_POKEMON_590 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 590)
-#define OBJ_EVENT_PAL_TAG_POKEMON_591 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 591)
-#define OBJ_EVENT_PAL_TAG_POKEMON_592 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 592)
-#define OBJ_EVENT_PAL_TAG_POKEMON_593 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 593)
-#define OBJ_EVENT_PAL_TAG_POKEMON_594 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 594)
-#define OBJ_EVENT_PAL_TAG_POKEMON_595 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 595)
-#define OBJ_EVENT_PAL_TAG_POKEMON_596 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 596)
-#define OBJ_EVENT_PAL_TAG_POKEMON_597 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 597)
-#define OBJ_EVENT_PAL_TAG_POKEMON_598 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 598)
-#define OBJ_EVENT_PAL_TAG_POKEMON_599 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 599)
-#define OBJ_EVENT_PAL_TAG_POKEMON_600 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 600)
-#define OBJ_EVENT_PAL_TAG_POKEMON_601 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 601)
-#define OBJ_EVENT_PAL_TAG_POKEMON_602 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 602)
-#define OBJ_EVENT_PAL_TAG_POKEMON_603 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 603)
-#define OBJ_EVENT_PAL_TAG_POKEMON_604 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 604)
-#define OBJ_EVENT_PAL_TAG_POKEMON_605 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 605)
-#define OBJ_EVENT_PAL_TAG_POKEMON_606 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 606)
-#define OBJ_EVENT_PAL_TAG_POKEMON_607 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 607)
-#define OBJ_EVENT_PAL_TAG_POKEMON_608 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 608)
-#define OBJ_EVENT_PAL_TAG_POKEMON_609 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 609)
-#define OBJ_EVENT_PAL_TAG_POKEMON_610 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 610)
-#define OBJ_EVENT_PAL_TAG_POKEMON_611 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 611)
-#define OBJ_EVENT_PAL_TAG_POKEMON_612 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 612)
-#define OBJ_EVENT_PAL_TAG_POKEMON_613 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 613)
-#define OBJ_EVENT_PAL_TAG_POKEMON_614 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 614)
-#define OBJ_EVENT_PAL_TAG_POKEMON_615 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 615)
-#define OBJ_EVENT_PAL_TAG_POKEMON_616 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 616)
-#define OBJ_EVENT_PAL_TAG_POKEMON_617 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 617)
-#define OBJ_EVENT_PAL_TAG_POKEMON_618 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 618)
-#define OBJ_EVENT_PAL_TAG_POKEMON_619 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 619)
-#define OBJ_EVENT_PAL_TAG_POKEMON_620 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 620)
-#define OBJ_EVENT_PAL_TAG_POKEMON_621 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 621)
-#define OBJ_EVENT_PAL_TAG_POKEMON_622 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 622)
-#define OBJ_EVENT_PAL_TAG_POKEMON_623 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 623)
-#define OBJ_EVENT_PAL_TAG_POKEMON_624 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 624)
-#define OBJ_EVENT_PAL_TAG_POKEMON_625 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 625)
-#define OBJ_EVENT_PAL_TAG_POKEMON_626 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 626)
-#define OBJ_EVENT_PAL_TAG_POKEMON_627 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 627)
-#define OBJ_EVENT_PAL_TAG_POKEMON_628 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 628)
-#define OBJ_EVENT_PAL_TAG_POKEMON_629 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 629)
-#define OBJ_EVENT_PAL_TAG_POKEMON_630 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 630)
-#define OBJ_EVENT_PAL_TAG_POKEMON_631 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 631)
-#define OBJ_EVENT_PAL_TAG_POKEMON_632 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 632)
-#define OBJ_EVENT_PAL_TAG_POKEMON_633 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 633)
-#define OBJ_EVENT_PAL_TAG_POKEMON_634 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 634)
-#define OBJ_EVENT_PAL_TAG_POKEMON_635 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 635)
-#define OBJ_EVENT_PAL_TAG_POKEMON_636 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 636)
-#define OBJ_EVENT_PAL_TAG_POKEMON_637 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 637)
-#define OBJ_EVENT_PAL_TAG_POKEMON_638 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 638)
-#define OBJ_EVENT_PAL_TAG_POKEMON_639 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 639)
-#define OBJ_EVENT_PAL_TAG_POKEMON_640 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 640)
-#define OBJ_EVENT_PAL_TAG_POKEMON_641 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 641)
-#define OBJ_EVENT_PAL_TAG_POKEMON_642 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 642)
-#define OBJ_EVENT_PAL_TAG_POKEMON_643 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 643)
-#define OBJ_EVENT_PAL_TAG_POKEMON_644 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 644)
-#define OBJ_EVENT_PAL_TAG_POKEMON_645 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 645)
-#define OBJ_EVENT_PAL_TAG_POKEMON_646 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 646)
-#define OBJ_EVENT_PAL_TAG_POKEMON_647 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 647)
-#define OBJ_EVENT_PAL_TAG_POKEMON_648 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 648)
-#define OBJ_EVENT_PAL_TAG_POKEMON_649 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 649)
-#define OBJ_EVENT_PAL_TAG_POKEMON_650 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 650)
-#define OBJ_EVENT_PAL_TAG_POKEMON_651 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 651)
-#define OBJ_EVENT_PAL_TAG_POKEMON_652 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 652)
-#define OBJ_EVENT_PAL_TAG_POKEMON_653 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 653)
-#define OBJ_EVENT_PAL_TAG_POKEMON_654 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 654)
-#define OBJ_EVENT_PAL_TAG_POKEMON_655 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 655)
-#define OBJ_EVENT_PAL_TAG_POKEMON_656 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 656)
-#define OBJ_EVENT_PAL_TAG_POKEMON_657 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 657)
-#define OBJ_EVENT_PAL_TAG_POKEMON_658 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 658)
-#define OBJ_EVENT_PAL_TAG_POKEMON_659 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 659)
-#define OBJ_EVENT_PAL_TAG_POKEMON_660 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 660)
-#define OBJ_EVENT_PAL_TAG_POKEMON_661 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 661)
-#define OBJ_EVENT_PAL_TAG_POKEMON_662 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 662)
-#define OBJ_EVENT_PAL_TAG_POKEMON_663 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 663)
-#define OBJ_EVENT_PAL_TAG_POKEMON_664 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 664)
-#define OBJ_EVENT_PAL_TAG_POKEMON_665 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 665)
-#define OBJ_EVENT_PAL_TAG_POKEMON_666 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 666)
-#define OBJ_EVENT_PAL_TAG_POKEMON_667 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 667)
-#define OBJ_EVENT_PAL_TAG_POKEMON_668 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 668)
-#define OBJ_EVENT_PAL_TAG_POKEMON_669 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 669)
-#define OBJ_EVENT_PAL_TAG_POKEMON_670 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 670)
-#define OBJ_EVENT_PAL_TAG_POKEMON_671 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 671)
-#define OBJ_EVENT_PAL_TAG_POKEMON_672 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 672)
-#define OBJ_EVENT_PAL_TAG_POKEMON_673 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 673)
-#define OBJ_EVENT_PAL_TAG_POKEMON_674 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 674)
-#define OBJ_EVENT_PAL_TAG_POKEMON_675 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 675)
-#define OBJ_EVENT_PAL_TAG_POKEMON_676 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 676)
-#define OBJ_EVENT_PAL_TAG_POKEMON_677 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 677)
-#define OBJ_EVENT_PAL_TAG_POKEMON_678 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 678)
-#define OBJ_EVENT_PAL_TAG_POKEMON_679 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 679)
-#define OBJ_EVENT_PAL_TAG_POKEMON_680 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 680)
-#define OBJ_EVENT_PAL_TAG_POKEMON_681 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 681)
-#define OBJ_EVENT_PAL_TAG_POKEMON_682 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 682)
-#define OBJ_EVENT_PAL_TAG_POKEMON_683 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 683)
-#define OBJ_EVENT_PAL_TAG_POKEMON_684 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 684)
-#define OBJ_EVENT_PAL_TAG_POKEMON_685 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 685)
-#define OBJ_EVENT_PAL_TAG_POKEMON_686 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 686)
-#define OBJ_EVENT_PAL_TAG_POKEMON_687 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 687)
-#define OBJ_EVENT_PAL_TAG_POKEMON_688 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 688)
-#define OBJ_EVENT_PAL_TAG_POKEMON_689 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 689)
-#define OBJ_EVENT_PAL_TAG_POKEMON_690 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 690)
-#define OBJ_EVENT_PAL_TAG_POKEMON_691 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 691)
-#define OBJ_EVENT_PAL_TAG_POKEMON_692 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 692)
-#define OBJ_EVENT_PAL_TAG_POKEMON_693 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 693)
-#define OBJ_EVENT_PAL_TAG_POKEMON_694 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 694)
-#define OBJ_EVENT_PAL_TAG_POKEMON_695 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 695)
-#define OBJ_EVENT_PAL_TAG_POKEMON_696 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 696)
-#define OBJ_EVENT_PAL_TAG_POKEMON_697 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 697)
-#define OBJ_EVENT_PAL_TAG_POKEMON_698 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 698)
-#define OBJ_EVENT_PAL_TAG_POKEMON_699 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 699)
-#define OBJ_EVENT_PAL_TAG_POKEMON_700 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 700)
-#define OBJ_EVENT_PAL_TAG_POKEMON_701 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 701)
-#define OBJ_EVENT_PAL_TAG_POKEMON_702 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 702)
-#define OBJ_EVENT_PAL_TAG_POKEMON_703 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 703)
-#define OBJ_EVENT_PAL_TAG_POKEMON_704 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 704)
-#define OBJ_EVENT_PAL_TAG_POKEMON_705 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 705)
-#define OBJ_EVENT_PAL_TAG_POKEMON_706 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 706)
-#define OBJ_EVENT_PAL_TAG_POKEMON_707 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 707)
-#define OBJ_EVENT_PAL_TAG_POKEMON_708 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 708)
-#define OBJ_EVENT_PAL_TAG_POKEMON_709 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 709)
-#define OBJ_EVENT_PAL_TAG_POKEMON_710 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 710)
-#define OBJ_EVENT_PAL_TAG_POKEMON_711 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 711)
-#define OBJ_EVENT_PAL_TAG_POKEMON_712 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 712)
-#define OBJ_EVENT_PAL_TAG_POKEMON_713 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 713)
-#define OBJ_EVENT_PAL_TAG_POKEMON_714 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 714)
-#define OBJ_EVENT_PAL_TAG_POKEMON_715 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 715)
-#define OBJ_EVENT_PAL_TAG_POKEMON_716 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 716)
-#define OBJ_EVENT_PAL_TAG_POKEMON_717 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 717)
-#define OBJ_EVENT_PAL_TAG_POKEMON_718 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 718)
-#define OBJ_EVENT_PAL_TAG_POKEMON_719 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 719)
-#define OBJ_EVENT_PAL_TAG_POKEMON_720 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 720)
-#define OBJ_EVENT_PAL_TAG_POKEMON_721 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 721)
-#define OBJ_EVENT_PAL_TAG_POKEMON_722 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 722)
-#define OBJ_EVENT_PAL_TAG_POKEMON_723 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 723)
-#define OBJ_EVENT_PAL_TAG_POKEMON_724 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 724)
-#define OBJ_EVENT_PAL_TAG_POKEMON_725 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 725)
-#define OBJ_EVENT_PAL_TAG_POKEMON_726 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 726)
-#define OBJ_EVENT_PAL_TAG_POKEMON_727 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 727)
-#define OBJ_EVENT_PAL_TAG_POKEMON_728 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 728)
-#define OBJ_EVENT_PAL_TAG_POKEMON_729 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 729)
-#define OBJ_EVENT_PAL_TAG_POKEMON_730 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 730)
-#define OBJ_EVENT_PAL_TAG_POKEMON_731 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 731)
-#define OBJ_EVENT_PAL_TAG_POKEMON_732 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 732)
-#define OBJ_EVENT_PAL_TAG_POKEMON_733 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 733)
-#define OBJ_EVENT_PAL_TAG_POKEMON_734 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 734)
-#define OBJ_EVENT_PAL_TAG_POKEMON_735 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 735)
-#define OBJ_EVENT_PAL_TAG_POKEMON_736 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 736)
-#define OBJ_EVENT_PAL_TAG_POKEMON_737 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 737)
-#define OBJ_EVENT_PAL_TAG_POKEMON_738 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 738)
-#define OBJ_EVENT_PAL_TAG_POKEMON_739 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 739)
-#define OBJ_EVENT_PAL_TAG_POKEMON_740 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 740)
-#define OBJ_EVENT_PAL_TAG_POKEMON_741 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 741)
-#define OBJ_EVENT_PAL_TAG_POKEMON_742 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 742)
-#define OBJ_EVENT_PAL_TAG_POKEMON_743 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 743)
-#define OBJ_EVENT_PAL_TAG_POKEMON_744 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 744)
-#define OBJ_EVENT_PAL_TAG_POKEMON_745 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 745)
-#define OBJ_EVENT_PAL_TAG_POKEMON_746 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 746)
-#define OBJ_EVENT_PAL_TAG_POKEMON_747 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 747)
-#define OBJ_EVENT_PAL_TAG_POKEMON_748 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 748)
-#define OBJ_EVENT_PAL_TAG_POKEMON_749 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 749)
-#define OBJ_EVENT_PAL_TAG_POKEMON_750 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 750)
-#define OBJ_EVENT_PAL_TAG_POKEMON_751 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 751)
-#define OBJ_EVENT_PAL_TAG_POKEMON_752 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 752)
-#define OBJ_EVENT_PAL_TAG_POKEMON_753 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 753)
-#define OBJ_EVENT_PAL_TAG_POKEMON_754 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 754)
-#define OBJ_EVENT_PAL_TAG_POKEMON_755 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 755)
-#define OBJ_EVENT_PAL_TAG_POKEMON_756 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 756)
-#define OBJ_EVENT_PAL_TAG_POKEMON_757 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 757)
-#define OBJ_EVENT_PAL_TAG_POKEMON_758 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 758)
-#define OBJ_EVENT_PAL_TAG_POKEMON_759 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 759)
-#define OBJ_EVENT_PAL_TAG_POKEMON_760 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 760)
-#define OBJ_EVENT_PAL_TAG_POKEMON_761 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 761)
-#define OBJ_EVENT_PAL_TAG_POKEMON_762 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 762)
-#define OBJ_EVENT_PAL_TAG_POKEMON_763 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 763)
-#define OBJ_EVENT_PAL_TAG_POKEMON_764 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 764)
-#define OBJ_EVENT_PAL_TAG_POKEMON_765 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 765)
-#define OBJ_EVENT_PAL_TAG_POKEMON_766 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 766)
-#define OBJ_EVENT_PAL_TAG_POKEMON_767 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 767)
-#define OBJ_EVENT_PAL_TAG_POKEMON_768 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 768)
-#define OBJ_EVENT_PAL_TAG_POKEMON_769 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 769)
-#define OBJ_EVENT_PAL_TAG_POKEMON_770 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 770)
-#define OBJ_EVENT_PAL_TAG_POKEMON_771 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 771)
-#define OBJ_EVENT_PAL_TAG_POKEMON_772 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 772)
-#define OBJ_EVENT_PAL_TAG_POKEMON_773 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 773)
-#define OBJ_EVENT_PAL_TAG_POKEMON_774 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 774)
-#define OBJ_EVENT_PAL_TAG_POKEMON_775 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 775)
-#define OBJ_EVENT_PAL_TAG_POKEMON_776 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 776)
-#define OBJ_EVENT_PAL_TAG_POKEMON_777 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 777)
-#define OBJ_EVENT_PAL_TAG_POKEMON_778 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 778)
-#define OBJ_EVENT_PAL_TAG_POKEMON_779 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 779)
-#define OBJ_EVENT_PAL_TAG_POKEMON_780 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 780)
-#define OBJ_EVENT_PAL_TAG_POKEMON_781 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 781)
-#define OBJ_EVENT_PAL_TAG_POKEMON_782 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 782)
-#define OBJ_EVENT_PAL_TAG_POKEMON_783 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 783)
-#define OBJ_EVENT_PAL_TAG_POKEMON_784 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 784)
-#define OBJ_EVENT_PAL_TAG_POKEMON_785 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 785)
-#define OBJ_EVENT_PAL_TAG_POKEMON_786 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 786)
-#define OBJ_EVENT_PAL_TAG_POKEMON_787 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 787)
-#define OBJ_EVENT_PAL_TAG_POKEMON_788 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 788)
-#define OBJ_EVENT_PAL_TAG_POKEMON_789 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 789)
-#define OBJ_EVENT_PAL_TAG_POKEMON_790 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 790)
-#define OBJ_EVENT_PAL_TAG_POKEMON_791 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 791)
-#define OBJ_EVENT_PAL_TAG_POKEMON_792 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 792)
-#define OBJ_EVENT_PAL_TAG_POKEMON_793 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 793)
-#define OBJ_EVENT_PAL_TAG_POKEMON_794 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 794)
-#define OBJ_EVENT_PAL_TAG_POKEMON_795 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 795)
-#define OBJ_EVENT_PAL_TAG_POKEMON_796 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 796)
-#define OBJ_EVENT_PAL_TAG_POKEMON_797 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 797)
-#define OBJ_EVENT_PAL_TAG_POKEMON_798 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 798)
-#define OBJ_EVENT_PAL_TAG_POKEMON_799 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 799)
-#define OBJ_EVENT_PAL_TAG_POKEMON_800 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 800)
-#define OBJ_EVENT_PAL_TAG_POKEMON_801 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 801)
-#define OBJ_EVENT_PAL_TAG_POKEMON_802 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 802)
-#define OBJ_EVENT_PAL_TAG_POKEMON_803 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 803)
-#define OBJ_EVENT_PAL_TAG_POKEMON_804 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 804)
-#define OBJ_EVENT_PAL_TAG_POKEMON_805 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 805)
-#define OBJ_EVENT_PAL_TAG_POKEMON_806 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 806)
-#define OBJ_EVENT_PAL_TAG_POKEMON_807 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 807)
-#define OBJ_EVENT_PAL_TAG_POKEMON_808 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 808)
-#define OBJ_EVENT_PAL_TAG_POKEMON_809 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 809)
-#define OBJ_EVENT_PAL_TAG_POKEMON_849 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 849)
-#define OBJ_EVENT_PAL_TAG_POKEMON_858 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 858)
-#define OBJ_EVENT_PAL_TAG_POKEMON_859 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 859)
-#define OBJ_EVENT_PAL_TAG_POKEMON_860 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 860)
-#define OBJ_EVENT_PAL_TAG_POKEMON_861 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 861)
-#define OBJ_EVENT_PAL_TAG_POKEMON_862 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 862)
-#define OBJ_EVENT_PAL_TAG_POKEMON_863 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 863)
-#define OBJ_EVENT_PAL_TAG_POKEMON_864 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 864)
-#define OBJ_EVENT_PAL_TAG_POKEMON_865 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 865)
-#define OBJ_EVENT_PAL_TAG_POKEMON_866 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 866)
-#define OBJ_EVENT_PAL_TAG_POKEMON_869 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 869)
-#define OBJ_EVENT_PAL_TAG_POKEMON_870 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 870)
-#define OBJ_EVENT_PAL_TAG_POKEMON_871 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 871)
-#define OBJ_EVENT_PAL_TAG_POKEMON_872 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 872)
-#define OBJ_EVENT_PAL_TAG_POKEMON_873 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 873)
-#define OBJ_EVENT_PAL_TAG_POKEMON_874 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 874)
-#define OBJ_EVENT_PAL_TAG_POKEMON_875 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 875)
-#define OBJ_EVENT_PAL_TAG_POKEMON_876 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 876)
-#define OBJ_EVENT_PAL_TAG_POKEMON_877 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 877)
-#define OBJ_EVENT_PAL_TAG_POKEMON_878 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 878)
-#define OBJ_EVENT_PAL_TAG_POKEMON_879 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 879)
-#define OBJ_EVENT_PAL_TAG_POKEMON_880 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 880)
-#define OBJ_EVENT_PAL_TAG_POKEMON_881 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 881)
-#define OBJ_EVENT_PAL_TAG_POKEMON_882 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 882)
-#define OBJ_EVENT_PAL_TAG_POKEMON_883 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 883)
-#define OBJ_EVENT_PAL_TAG_POKEMON_884 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 884)
-#define OBJ_EVENT_PAL_TAG_POKEMON_885 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 885)
-#define OBJ_EVENT_PAL_TAG_POKEMON_887 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 887)
-#define OBJ_EVENT_PAL_TAG_POKEMON_896 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 896)
-#define OBJ_EVENT_PAL_TAG_POKEMON_897 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 897)
-#define OBJ_EVENT_PAL_TAG_POKEMON_898 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 898)
-#define OBJ_EVENT_PAL_TAG_POKEMON_899 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 899)
-#define OBJ_EVENT_PAL_TAG_POKEMON_900 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 900)
-#define OBJ_EVENT_PAL_TAG_POKEMON_901 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 901)
-#define OBJ_EVENT_PAL_TAG_POKEMON_902 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 902)
-#define OBJ_EVENT_PAL_TAG_POKEMON_903 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 903)
-#define OBJ_EVENT_PAL_TAG_POKEMON_904 (OBJ_EVENT_PAL_TAG_POKEMON_START  + 904)
-
 
+#include "data/object_events/object_event_graphics_info_pointers.h"
 #include "data/field_effects/field_effect_object_template_pointers.h"
 #include "data/object_events/object_event_pic_tables.h"
 #include "data/object_events/object_event_anims.h"
 #include "data/object_events/base_oam.h"
 #include "data/object_events/object_event_subsprites.h"
 #include "data/object_events/object_event_graphics_info.h"
-#include "data/object_events/object_event_graphics_info_pointers.h"
+#include "data/object_events/object_event_graphics_info_followers.h"
 
 static const struct SpritePalette sObjectEventSpritePalettes[] = {
     {gObjectEventPal_Npc1,                  OBJ_EVENT_PAL_TAG_NPC_1},
@@ -1408,17 +520,10 @@ static const struct SpritePalette sObjectEventSpritePalettes[] = {
     {gObjectEventPal_Lugia,                 OBJ_EVENT_PAL_TAG_LUGIA},
     {gObjectEventPal_RubySapphireBrendan,   OBJ_EVENT_PAL_TAG_RS_BRENDAN},
     {gObjectEventPal_RubySapphireMay,       OBJ_EVENT_PAL_TAG_RS_MAY},
+
    //CUSTOMS 
 	{gObjectEventPal_Blue,       			OBJ_EVENT_PAL_TAG_BLUE},
     {gObjectEventPal_Grandma,       		OBJ_EVENT_PAL_TAG_GRANDMA},
-    {gObjectEventPal_Eevee,       			OBJ_EVENT_PAL_TAG_EEVEE},
-    {gObjectEventPal_Flareon,       		OBJ_EVENT_PAL_TAG_FLAREON},
-    {gObjectEventPal_Jolteon,       		OBJ_EVENT_PAL_TAG_JOLTEON},
-    {gObjectEventPal_Vaporeon,       		OBJ_EVENT_PAL_TAG_VAPOREON},
-    {gObjectEventPal_Espeon,       			OBJ_EVENT_PAL_TAG_ESPEON},
-    {gObjectEventPal_Umbreon,       		OBJ_EVENT_PAL_TAG_UMBREON},
-    {gObjectEventPal_Leafeon,       		OBJ_EVENT_PAL_TAG_LEAFEON},
-    {gObjectEventPal_Glaceon,       		OBJ_EVENT_PAL_TAG_GLACEON},
     {gObjectEventPal_Rocket_M,       		OBJ_EVENT_PAL_TAG_ROCKET_M},
     {gObjectEventPal_Rocket_F,       		OBJ_EVENT_PAL_TAG_ROCKET_F},
     {gObjectEventPal_Giovanni,       		OBJ_EVENT_PAL_TAG_GIOVANNI},
@@ -1426,7 +531,7 @@ static const struct SpritePalette sObjectEventSpritePalettes[] = {
     {gObjectEventPal_Blaine,       	    	OBJ_EVENT_PAL_TAG_BLAINE},
     {gObjectEventPal_Jessie,       	    	OBJ_EVENT_PAL_TAG_JESSIE},
     {gObjectEventPal_James,       	    	OBJ_EVENT_PAL_TAG_JAMES},
-    {gObjectEventPal_Meowth,       	    	OBJ_EVENT_PAL_TAG_MEOWTH},
+//    {gObjectEventPal_Meowth,       	    	OBJ_EVENT_PAL_TAG_MEOWTH},
 	{gObjectEventPal_Soldier,       	    OBJ_EVENT_PAL_TAG_SOLDIER},
 	{gObjectEventPal_Biker,       	   	    OBJ_EVENT_PAL_TAG_BIKER},
 	{gObjectEventPal_Channeler,       	   	OBJ_EVENT_PAL_TAG_CHANNELER},
@@ -1448,856 +553,44 @@ static const struct SpritePalette sObjectEventSpritePalettes[] = {
 	{gObjectEventPal_BigRed,                OBJ_EVENT_PAL_TAG_BIG_RED},
 	{gObjectEventPal_BigYellow,             OBJ_EVENT_PAL_TAG_BIG_YELLOW},
 	{gObjectEventPal_Bruno,                 OBJ_EVENT_PAL_TAG_BRUNO},
+	{gObjectEventPal_CollisionRattata,      OBJ_EVENT_PAL_TAG_COLLISIONRATTATA},
+	{gObjectEventPal_CollisionEkans,        OBJ_EVENT_PAL_TAG_COLLISIONEKANS},
+	{gObjectEventPal_CollisionDrifblim,     OBJ_EVENT_PAL_TAG_COLLISIONDRIFBLIM},
     
-	//Pokemon overworlds
-    {gObjectEventPalette_Pokemon_Species_001, OBJ_EVENT_PAL_TAG_POKEMON_001},
-	{gObjectEventPalette_Pokemon_Species_002, OBJ_EVENT_PAL_TAG_POKEMON_002},
-	{gObjectEventPalette_Pokemon_Species_003, OBJ_EVENT_PAL_TAG_POKEMON_003},
-	{gObjectEventPalette_Pokemon_Species_004, OBJ_EVENT_PAL_TAG_POKEMON_004},
-	{gObjectEventPalette_Pokemon_Species_005, OBJ_EVENT_PAL_TAG_POKEMON_005},
-	{gObjectEventPalette_Pokemon_Species_006, OBJ_EVENT_PAL_TAG_POKEMON_006},
-	{gObjectEventPalette_Pokemon_Species_007, OBJ_EVENT_PAL_TAG_POKEMON_007},
-	{gObjectEventPalette_Pokemon_Species_008, OBJ_EVENT_PAL_TAG_POKEMON_008},
-	{gObjectEventPalette_Pokemon_Species_009, OBJ_EVENT_PAL_TAG_POKEMON_009},
-	{gObjectEventPalette_Pokemon_Species_010, OBJ_EVENT_PAL_TAG_POKEMON_010},
-	{gObjectEventPalette_Pokemon_Species_011, OBJ_EVENT_PAL_TAG_POKEMON_011},
-	{gObjectEventPalette_Pokemon_Species_012, OBJ_EVENT_PAL_TAG_POKEMON_012},
-	{gObjectEventPalette_Pokemon_Species_013, OBJ_EVENT_PAL_TAG_POKEMON_013},
-	{gObjectEventPalette_Pokemon_Species_014, OBJ_EVENT_PAL_TAG_POKEMON_014},
-	{gObjectEventPalette_Pokemon_Species_015, OBJ_EVENT_PAL_TAG_POKEMON_015},
-	{gObjectEventPalette_Pokemon_Species_016, OBJ_EVENT_PAL_TAG_POKEMON_016},
-	{gObjectEventPalette_Pokemon_Species_017, OBJ_EVENT_PAL_TAG_POKEMON_017},
-	{gObjectEventPalette_Pokemon_Species_018, OBJ_EVENT_PAL_TAG_POKEMON_018},
-	{gObjectEventPalette_Pokemon_Species_019, OBJ_EVENT_PAL_TAG_POKEMON_019},
-	{gObjectEventPalette_Pokemon_Species_020, OBJ_EVENT_PAL_TAG_POKEMON_020},
-	{gObjectEventPalette_Pokemon_Species_021, OBJ_EVENT_PAL_TAG_POKEMON_021},
-	{gObjectEventPalette_Pokemon_Species_022, OBJ_EVENT_PAL_TAG_POKEMON_022},
-	{gObjectEventPalette_Pokemon_Species_023, OBJ_EVENT_PAL_TAG_POKEMON_023},
-	{gObjectEventPalette_Pokemon_Species_024, OBJ_EVENT_PAL_TAG_POKEMON_024},
-	{gObjectEventPalette_Pokemon_Species_025, OBJ_EVENT_PAL_TAG_POKEMON_025},
-	{gObjectEventPalette_Pokemon_Species_026, OBJ_EVENT_PAL_TAG_POKEMON_026},
-	{gObjectEventPalette_Pokemon_Species_027, OBJ_EVENT_PAL_TAG_POKEMON_027},
-	{gObjectEventPalette_Pokemon_Species_028, OBJ_EVENT_PAL_TAG_POKEMON_028},
-	{gObjectEventPalette_Pokemon_Species_029, OBJ_EVENT_PAL_TAG_POKEMON_029},
-	{gObjectEventPalette_Pokemon_Species_030, OBJ_EVENT_PAL_TAG_POKEMON_030},
-	{gObjectEventPalette_Pokemon_Species_031, OBJ_EVENT_PAL_TAG_POKEMON_031},
-	{gObjectEventPalette_Pokemon_Species_032, OBJ_EVENT_PAL_TAG_POKEMON_032},
-	{gObjectEventPalette_Pokemon_Species_033, OBJ_EVENT_PAL_TAG_POKEMON_033},
-	{gObjectEventPalette_Pokemon_Species_034, OBJ_EVENT_PAL_TAG_POKEMON_034},
-	{gObjectEventPalette_Pokemon_Species_035, OBJ_EVENT_PAL_TAG_POKEMON_035},
-	{gObjectEventPalette_Pokemon_Species_036, OBJ_EVENT_PAL_TAG_POKEMON_036},
-	{gObjectEventPalette_Pokemon_Species_037, OBJ_EVENT_PAL_TAG_POKEMON_037},
-	{gObjectEventPalette_Pokemon_Species_038, OBJ_EVENT_PAL_TAG_POKEMON_038},
-	{gObjectEventPalette_Pokemon_Species_039, OBJ_EVENT_PAL_TAG_POKEMON_039},
-	{gObjectEventPalette_Pokemon_Species_040, OBJ_EVENT_PAL_TAG_POKEMON_040},
-	{gObjectEventPalette_Pokemon_Species_041, OBJ_EVENT_PAL_TAG_POKEMON_041},
-	{gObjectEventPalette_Pokemon_Species_042, OBJ_EVENT_PAL_TAG_POKEMON_042},
-	{gObjectEventPalette_Pokemon_Species_043, OBJ_EVENT_PAL_TAG_POKEMON_043},
-	{gObjectEventPalette_Pokemon_Species_044, OBJ_EVENT_PAL_TAG_POKEMON_044},
-	{gObjectEventPalette_Pokemon_Species_045, OBJ_EVENT_PAL_TAG_POKEMON_045},
-	{gObjectEventPalette_Pokemon_Species_046, OBJ_EVENT_PAL_TAG_POKEMON_046},
-	{gObjectEventPalette_Pokemon_Species_047, OBJ_EVENT_PAL_TAG_POKEMON_047},
-	{gObjectEventPalette_Pokemon_Species_048, OBJ_EVENT_PAL_TAG_POKEMON_048},
-	{gObjectEventPalette_Pokemon_Species_049, OBJ_EVENT_PAL_TAG_POKEMON_049},
-	{gObjectEventPalette_Pokemon_Species_050, OBJ_EVENT_PAL_TAG_POKEMON_050},
-	{gObjectEventPalette_Pokemon_Species_051, OBJ_EVENT_PAL_TAG_POKEMON_051},
-	{gObjectEventPalette_Pokemon_Species_052, OBJ_EVENT_PAL_TAG_POKEMON_052},
-	{gObjectEventPalette_Pokemon_Species_053, OBJ_EVENT_PAL_TAG_POKEMON_053},
-	{gObjectEventPalette_Pokemon_Species_054, OBJ_EVENT_PAL_TAG_POKEMON_054},
-	{gObjectEventPalette_Pokemon_Species_055, OBJ_EVENT_PAL_TAG_POKEMON_055},
-	{gObjectEventPalette_Pokemon_Species_056, OBJ_EVENT_PAL_TAG_POKEMON_056},
-	{gObjectEventPalette_Pokemon_Species_057, OBJ_EVENT_PAL_TAG_POKEMON_057},
-	{gObjectEventPalette_Pokemon_Species_058, OBJ_EVENT_PAL_TAG_POKEMON_058},
-	{gObjectEventPalette_Pokemon_Species_059, OBJ_EVENT_PAL_TAG_POKEMON_059},
-	{gObjectEventPalette_Pokemon_Species_060, OBJ_EVENT_PAL_TAG_POKEMON_060},
-	{gObjectEventPalette_Pokemon_Species_061, OBJ_EVENT_PAL_TAG_POKEMON_061},
-	{gObjectEventPalette_Pokemon_Species_062, OBJ_EVENT_PAL_TAG_POKEMON_062},
-	{gObjectEventPalette_Pokemon_Species_063, OBJ_EVENT_PAL_TAG_POKEMON_063},
-	{gObjectEventPalette_Pokemon_Species_064, OBJ_EVENT_PAL_TAG_POKEMON_064},
-	{gObjectEventPalette_Pokemon_Species_065, OBJ_EVENT_PAL_TAG_POKEMON_065},
-	{gObjectEventPalette_Pokemon_Species_066, OBJ_EVENT_PAL_TAG_POKEMON_066},
-	{gObjectEventPalette_Pokemon_Species_067, OBJ_EVENT_PAL_TAG_POKEMON_067},
-	{gObjectEventPalette_Pokemon_Species_068, OBJ_EVENT_PAL_TAG_POKEMON_068},
-	{gObjectEventPalette_Pokemon_Species_069, OBJ_EVENT_PAL_TAG_POKEMON_069},
-	{gObjectEventPalette_Pokemon_Species_070, OBJ_EVENT_PAL_TAG_POKEMON_070},
-	{gObjectEventPalette_Pokemon_Species_071, OBJ_EVENT_PAL_TAG_POKEMON_071},
-	{gObjectEventPalette_Pokemon_Species_072, OBJ_EVENT_PAL_TAG_POKEMON_072},
-	{gObjectEventPalette_Pokemon_Species_073, OBJ_EVENT_PAL_TAG_POKEMON_073},
-	{gObjectEventPalette_Pokemon_Species_074, OBJ_EVENT_PAL_TAG_POKEMON_074},
-	{gObjectEventPalette_Pokemon_Species_075, OBJ_EVENT_PAL_TAG_POKEMON_075},
-	{gObjectEventPalette_Pokemon_Species_076, OBJ_EVENT_PAL_TAG_POKEMON_076},
-	{gObjectEventPalette_Pokemon_Species_077, OBJ_EVENT_PAL_TAG_POKEMON_077},
-	{gObjectEventPalette_Pokemon_Species_078, OBJ_EVENT_PAL_TAG_POKEMON_078},
-	{gObjectEventPalette_Pokemon_Species_079, OBJ_EVENT_PAL_TAG_POKEMON_079},
-	{gObjectEventPalette_Pokemon_Species_080, OBJ_EVENT_PAL_TAG_POKEMON_080},
-	{gObjectEventPalette_Pokemon_Species_081, OBJ_EVENT_PAL_TAG_POKEMON_081},
-	{gObjectEventPalette_Pokemon_Species_082, OBJ_EVENT_PAL_TAG_POKEMON_082},
-	{gObjectEventPalette_Pokemon_Species_083, OBJ_EVENT_PAL_TAG_POKEMON_083},
-	{gObjectEventPalette_Pokemon_Species_084, OBJ_EVENT_PAL_TAG_POKEMON_084},
-	{gObjectEventPalette_Pokemon_Species_085, OBJ_EVENT_PAL_TAG_POKEMON_085},
-	{gObjectEventPalette_Pokemon_Species_086, OBJ_EVENT_PAL_TAG_POKEMON_086},
-	{gObjectEventPalette_Pokemon_Species_087, OBJ_EVENT_PAL_TAG_POKEMON_087},
-	{gObjectEventPalette_Pokemon_Species_088, OBJ_EVENT_PAL_TAG_POKEMON_088},
-	{gObjectEventPalette_Pokemon_Species_089, OBJ_EVENT_PAL_TAG_POKEMON_089},
-	{gObjectEventPalette_Pokemon_Species_090, OBJ_EVENT_PAL_TAG_POKEMON_090},
-	{gObjectEventPalette_Pokemon_Species_091, OBJ_EVENT_PAL_TAG_POKEMON_091},
-	{gObjectEventPalette_Pokemon_Species_092, OBJ_EVENT_PAL_TAG_POKEMON_092},
-	{gObjectEventPalette_Pokemon_Species_093, OBJ_EVENT_PAL_TAG_POKEMON_093},
-	{gObjectEventPalette_Pokemon_Species_094, OBJ_EVENT_PAL_TAG_POKEMON_094},
-	{gObjectEventPalette_Pokemon_Species_095, OBJ_EVENT_PAL_TAG_POKEMON_095},
-	{gObjectEventPalette_Pokemon_Species_096, OBJ_EVENT_PAL_TAG_POKEMON_096},
-	{gObjectEventPalette_Pokemon_Species_097, OBJ_EVENT_PAL_TAG_POKEMON_097},
-	{gObjectEventPalette_Pokemon_Species_098, OBJ_EVENT_PAL_TAG_POKEMON_098},
-	{gObjectEventPalette_Pokemon_Species_099, OBJ_EVENT_PAL_TAG_POKEMON_099},
-	{gObjectEventPalette_Pokemon_Species_100, OBJ_EVENT_PAL_TAG_POKEMON_100},
-	{gObjectEventPalette_Pokemon_Species_101, OBJ_EVENT_PAL_TAG_POKEMON_101},
-	{gObjectEventPalette_Pokemon_Species_102, OBJ_EVENT_PAL_TAG_POKEMON_102},
-	{gObjectEventPalette_Pokemon_Species_103, OBJ_EVENT_PAL_TAG_POKEMON_103},
-	{gObjectEventPalette_Pokemon_Species_104, OBJ_EVENT_PAL_TAG_POKEMON_104},
-	{gObjectEventPalette_Pokemon_Species_105, OBJ_EVENT_PAL_TAG_POKEMON_105},
-	{gObjectEventPalette_Pokemon_Species_106, OBJ_EVENT_PAL_TAG_POKEMON_106},
-	{gObjectEventPalette_Pokemon_Species_107, OBJ_EVENT_PAL_TAG_POKEMON_107},
-	{gObjectEventPalette_Pokemon_Species_108, OBJ_EVENT_PAL_TAG_POKEMON_108},
-	{gObjectEventPalette_Pokemon_Species_109, OBJ_EVENT_PAL_TAG_POKEMON_109},
-	{gObjectEventPalette_Pokemon_Species_110, OBJ_EVENT_PAL_TAG_POKEMON_110},
-	{gObjectEventPalette_Pokemon_Species_111, OBJ_EVENT_PAL_TAG_POKEMON_111},
-	{gObjectEventPalette_Pokemon_Species_112, OBJ_EVENT_PAL_TAG_POKEMON_112},
-	{gObjectEventPalette_Pokemon_Species_113, OBJ_EVENT_PAL_TAG_POKEMON_113},
-	{gObjectEventPalette_Pokemon_Species_114, OBJ_EVENT_PAL_TAG_POKEMON_114},
-	{gObjectEventPalette_Pokemon_Species_115, OBJ_EVENT_PAL_TAG_POKEMON_115},
-	{gObjectEventPalette_Pokemon_Species_116, OBJ_EVENT_PAL_TAG_POKEMON_116},
-	{gObjectEventPalette_Pokemon_Species_117, OBJ_EVENT_PAL_TAG_POKEMON_117},
-	{gObjectEventPalette_Pokemon_Species_118, OBJ_EVENT_PAL_TAG_POKEMON_118},
-	{gObjectEventPalette_Pokemon_Species_119, OBJ_EVENT_PAL_TAG_POKEMON_119},
-	{gObjectEventPalette_Pokemon_Species_120, OBJ_EVENT_PAL_TAG_POKEMON_120},
-	{gObjectEventPalette_Pokemon_Species_121, OBJ_EVENT_PAL_TAG_POKEMON_121},
-	{gObjectEventPalette_Pokemon_Species_122, OBJ_EVENT_PAL_TAG_POKEMON_122},
-	{gObjectEventPalette_Pokemon_Species_123, OBJ_EVENT_PAL_TAG_POKEMON_123},
-	{gObjectEventPalette_Pokemon_Species_124, OBJ_EVENT_PAL_TAG_POKEMON_124},
-	{gObjectEventPalette_Pokemon_Species_125, OBJ_EVENT_PAL_TAG_POKEMON_125},
-	{gObjectEventPalette_Pokemon_Species_126, OBJ_EVENT_PAL_TAG_POKEMON_126},
-	{gObjectEventPalette_Pokemon_Species_127, OBJ_EVENT_PAL_TAG_POKEMON_127},
-	{gObjectEventPalette_Pokemon_Species_128, OBJ_EVENT_PAL_TAG_POKEMON_128},
-	{gObjectEventPalette_Pokemon_Species_129, OBJ_EVENT_PAL_TAG_POKEMON_129},
-	{gObjectEventPalette_Pokemon_Species_130, OBJ_EVENT_PAL_TAG_POKEMON_130},
-	{gObjectEventPalette_Pokemon_Species_131, OBJ_EVENT_PAL_TAG_POKEMON_131},
-	{gObjectEventPalette_Pokemon_Species_132, OBJ_EVENT_PAL_TAG_POKEMON_132},
-	{gObjectEventPalette_Pokemon_Species_133, OBJ_EVENT_PAL_TAG_POKEMON_133},
-	{gObjectEventPalette_Pokemon_Species_134, OBJ_EVENT_PAL_TAG_POKEMON_134},
-	{gObjectEventPalette_Pokemon_Species_135, OBJ_EVENT_PAL_TAG_POKEMON_135},
-	{gObjectEventPalette_Pokemon_Species_136, OBJ_EVENT_PAL_TAG_POKEMON_136},
-	{gObjectEventPalette_Pokemon_Species_137, OBJ_EVENT_PAL_TAG_POKEMON_137},
-	{gObjectEventPalette_Pokemon_Species_138, OBJ_EVENT_PAL_TAG_POKEMON_138},
-	{gObjectEventPalette_Pokemon_Species_139, OBJ_EVENT_PAL_TAG_POKEMON_139},
-	{gObjectEventPalette_Pokemon_Species_140, OBJ_EVENT_PAL_TAG_POKEMON_140},
-	{gObjectEventPalette_Pokemon_Species_141, OBJ_EVENT_PAL_TAG_POKEMON_141},
-	{gObjectEventPalette_Pokemon_Species_142, OBJ_EVENT_PAL_TAG_POKEMON_142},
-	{gObjectEventPalette_Pokemon_Species_143, OBJ_EVENT_PAL_TAG_POKEMON_143},
-	{gObjectEventPalette_Pokemon_Species_144, OBJ_EVENT_PAL_TAG_POKEMON_144},
-	{gObjectEventPalette_Pokemon_Species_145, OBJ_EVENT_PAL_TAG_POKEMON_145},
-	{gObjectEventPalette_Pokemon_Species_146, OBJ_EVENT_PAL_TAG_POKEMON_146},
-	{gObjectEventPalette_Pokemon_Species_147, OBJ_EVENT_PAL_TAG_POKEMON_147},
-	{gObjectEventPalette_Pokemon_Species_148, OBJ_EVENT_PAL_TAG_POKEMON_148},
-	{gObjectEventPalette_Pokemon_Species_149, OBJ_EVENT_PAL_TAG_POKEMON_149},
-	{gObjectEventPalette_Pokemon_Species_150, OBJ_EVENT_PAL_TAG_POKEMON_150},
-	{gObjectEventPalette_Pokemon_Species_151, OBJ_EVENT_PAL_TAG_POKEMON_151},
-	{gObjectEventPalette_Pokemon_Species_152, OBJ_EVENT_PAL_TAG_POKEMON_152},
-	{gObjectEventPalette_Pokemon_Species_153, OBJ_EVENT_PAL_TAG_POKEMON_153},
-	{gObjectEventPalette_Pokemon_Species_154, OBJ_EVENT_PAL_TAG_POKEMON_154},
-	{gObjectEventPalette_Pokemon_Species_155, OBJ_EVENT_PAL_TAG_POKEMON_155},
-	{gObjectEventPalette_Pokemon_Species_156, OBJ_EVENT_PAL_TAG_POKEMON_156},
-	{gObjectEventPalette_Pokemon_Species_157, OBJ_EVENT_PAL_TAG_POKEMON_157},
-	{gObjectEventPalette_Pokemon_Species_158, OBJ_EVENT_PAL_TAG_POKEMON_158},
-	{gObjectEventPalette_Pokemon_Species_159, OBJ_EVENT_PAL_TAG_POKEMON_159},
-	{gObjectEventPalette_Pokemon_Species_160, OBJ_EVENT_PAL_TAG_POKEMON_160},
-	{gObjectEventPalette_Pokemon_Species_161, OBJ_EVENT_PAL_TAG_POKEMON_161},
-	{gObjectEventPalette_Pokemon_Species_162, OBJ_EVENT_PAL_TAG_POKEMON_162},
-	{gObjectEventPalette_Pokemon_Species_163, OBJ_EVENT_PAL_TAG_POKEMON_163},
-	{gObjectEventPalette_Pokemon_Species_164, OBJ_EVENT_PAL_TAG_POKEMON_164},
-	{gObjectEventPalette_Pokemon_Species_165, OBJ_EVENT_PAL_TAG_POKEMON_165},
-	{gObjectEventPalette_Pokemon_Species_166, OBJ_EVENT_PAL_TAG_POKEMON_166},
-	{gObjectEventPalette_Pokemon_Species_167, OBJ_EVENT_PAL_TAG_POKEMON_167},
-	{gObjectEventPalette_Pokemon_Species_168, OBJ_EVENT_PAL_TAG_POKEMON_168},
-	{gObjectEventPalette_Pokemon_Species_169, OBJ_EVENT_PAL_TAG_POKEMON_169},
-	{gObjectEventPalette_Pokemon_Species_170, OBJ_EVENT_PAL_TAG_POKEMON_170},
-	{gObjectEventPalette_Pokemon_Species_171, OBJ_EVENT_PAL_TAG_POKEMON_171},
-	{gObjectEventPalette_Pokemon_Species_172, OBJ_EVENT_PAL_TAG_POKEMON_172},
-	{gObjectEventPalette_Pokemon_Species_173, OBJ_EVENT_PAL_TAG_POKEMON_173},
-	{gObjectEventPalette_Pokemon_Species_174, OBJ_EVENT_PAL_TAG_POKEMON_174},
-	{gObjectEventPalette_Pokemon_Species_175, OBJ_EVENT_PAL_TAG_POKEMON_175},
-	{gObjectEventPalette_Pokemon_Species_176, OBJ_EVENT_PAL_TAG_POKEMON_176},
-	{gObjectEventPalette_Pokemon_Species_177, OBJ_EVENT_PAL_TAG_POKEMON_177},
-	{gObjectEventPalette_Pokemon_Species_178, OBJ_EVENT_PAL_TAG_POKEMON_178},
-	{gObjectEventPalette_Pokemon_Species_179, OBJ_EVENT_PAL_TAG_POKEMON_179},
-	{gObjectEventPalette_Pokemon_Species_180, OBJ_EVENT_PAL_TAG_POKEMON_180},
-	{gObjectEventPalette_Pokemon_Species_181, OBJ_EVENT_PAL_TAG_POKEMON_181},
-	{gObjectEventPalette_Pokemon_Species_182, OBJ_EVENT_PAL_TAG_POKEMON_182},
-	{gObjectEventPalette_Pokemon_Species_183, OBJ_EVENT_PAL_TAG_POKEMON_183},
-	{gObjectEventPalette_Pokemon_Species_184, OBJ_EVENT_PAL_TAG_POKEMON_184},
-	{gObjectEventPalette_Pokemon_Species_185, OBJ_EVENT_PAL_TAG_POKEMON_185},
-	{gObjectEventPalette_Pokemon_Species_186, OBJ_EVENT_PAL_TAG_POKEMON_186},
-	{gObjectEventPalette_Pokemon_Species_187, OBJ_EVENT_PAL_TAG_POKEMON_187},
-	{gObjectEventPalette_Pokemon_Species_188, OBJ_EVENT_PAL_TAG_POKEMON_188},
-	{gObjectEventPalette_Pokemon_Species_189, OBJ_EVENT_PAL_TAG_POKEMON_189},
-	{gObjectEventPalette_Pokemon_Species_190, OBJ_EVENT_PAL_TAG_POKEMON_190},
-	{gObjectEventPalette_Pokemon_Species_191, OBJ_EVENT_PAL_TAG_POKEMON_191},
-	{gObjectEventPalette_Pokemon_Species_192, OBJ_EVENT_PAL_TAG_POKEMON_192},
-	{gObjectEventPalette_Pokemon_Species_193, OBJ_EVENT_PAL_TAG_POKEMON_193},
-	{gObjectEventPalette_Pokemon_Species_194, OBJ_EVENT_PAL_TAG_POKEMON_194},
-	{gObjectEventPalette_Pokemon_Species_195, OBJ_EVENT_PAL_TAG_POKEMON_195},
-	{gObjectEventPalette_Pokemon_Species_196, OBJ_EVENT_PAL_TAG_POKEMON_196},
-	{gObjectEventPalette_Pokemon_Species_197, OBJ_EVENT_PAL_TAG_POKEMON_197},
-	{gObjectEventPalette_Pokemon_Species_198, OBJ_EVENT_PAL_TAG_POKEMON_198},
-	{gObjectEventPalette_Pokemon_Species_199, OBJ_EVENT_PAL_TAG_POKEMON_199},
-	{gObjectEventPalette_Pokemon_Species_200, OBJ_EVENT_PAL_TAG_POKEMON_200},
-	{gObjectEventPalette_Pokemon_Species_201, OBJ_EVENT_PAL_TAG_POKEMON_201},
-	{gObjectEventPalette_Pokemon_Species_202, OBJ_EVENT_PAL_TAG_POKEMON_202},
-	{gObjectEventPalette_Pokemon_Species_203, OBJ_EVENT_PAL_TAG_POKEMON_203},
-	{gObjectEventPalette_Pokemon_Species_204, OBJ_EVENT_PAL_TAG_POKEMON_204},
-	{gObjectEventPalette_Pokemon_Species_205, OBJ_EVENT_PAL_TAG_POKEMON_205},
-	{gObjectEventPalette_Pokemon_Species_206, OBJ_EVENT_PAL_TAG_POKEMON_206},
-	{gObjectEventPalette_Pokemon_Species_207, OBJ_EVENT_PAL_TAG_POKEMON_207},
-	{gObjectEventPalette_Pokemon_Species_208, OBJ_EVENT_PAL_TAG_POKEMON_208},
-	{gObjectEventPalette_Pokemon_Species_209, OBJ_EVENT_PAL_TAG_POKEMON_209},
-	{gObjectEventPalette_Pokemon_Species_210, OBJ_EVENT_PAL_TAG_POKEMON_210},
-	{gObjectEventPalette_Pokemon_Species_211, OBJ_EVENT_PAL_TAG_POKEMON_211},
-	{gObjectEventPalette_Pokemon_Species_212, OBJ_EVENT_PAL_TAG_POKEMON_212},
-	{gObjectEventPalette_Pokemon_Species_213, OBJ_EVENT_PAL_TAG_POKEMON_213},
-	{gObjectEventPalette_Pokemon_Species_214, OBJ_EVENT_PAL_TAG_POKEMON_214},
-	{gObjectEventPalette_Pokemon_Species_215, OBJ_EVENT_PAL_TAG_POKEMON_215},
-	{gObjectEventPalette_Pokemon_Species_216, OBJ_EVENT_PAL_TAG_POKEMON_216},
-	{gObjectEventPalette_Pokemon_Species_217, OBJ_EVENT_PAL_TAG_POKEMON_217},
-	{gObjectEventPalette_Pokemon_Species_218, OBJ_EVENT_PAL_TAG_POKEMON_218},
-	{gObjectEventPalette_Pokemon_Species_219, OBJ_EVENT_PAL_TAG_POKEMON_219},
-	{gObjectEventPalette_Pokemon_Species_220, OBJ_EVENT_PAL_TAG_POKEMON_220},
-	{gObjectEventPalette_Pokemon_Species_221, OBJ_EVENT_PAL_TAG_POKEMON_221},
-	{gObjectEventPalette_Pokemon_Species_222, OBJ_EVENT_PAL_TAG_POKEMON_222},
-	{gObjectEventPalette_Pokemon_Species_223, OBJ_EVENT_PAL_TAG_POKEMON_223},
-	{gObjectEventPalette_Pokemon_Species_224, OBJ_EVENT_PAL_TAG_POKEMON_224},
-	{gObjectEventPalette_Pokemon_Species_225, OBJ_EVENT_PAL_TAG_POKEMON_225},
-	{gObjectEventPalette_Pokemon_Species_226, OBJ_EVENT_PAL_TAG_POKEMON_226},
-	{gObjectEventPalette_Pokemon_Species_227, OBJ_EVENT_PAL_TAG_POKEMON_227},
-	{gObjectEventPalette_Pokemon_Species_228, OBJ_EVENT_PAL_TAG_POKEMON_228},
-	{gObjectEventPalette_Pokemon_Species_229, OBJ_EVENT_PAL_TAG_POKEMON_229},
-	{gObjectEventPalette_Pokemon_Species_230, OBJ_EVENT_PAL_TAG_POKEMON_230},
-	{gObjectEventPalette_Pokemon_Species_231, OBJ_EVENT_PAL_TAG_POKEMON_231},
-	{gObjectEventPalette_Pokemon_Species_232, OBJ_EVENT_PAL_TAG_POKEMON_232},
-	{gObjectEventPalette_Pokemon_Species_233, OBJ_EVENT_PAL_TAG_POKEMON_233},
-	{gObjectEventPalette_Pokemon_Species_234, OBJ_EVENT_PAL_TAG_POKEMON_234},
-	{gObjectEventPalette_Pokemon_Species_235, OBJ_EVENT_PAL_TAG_POKEMON_235},
-	{gObjectEventPalette_Pokemon_Species_236, OBJ_EVENT_PAL_TAG_POKEMON_236},
-	{gObjectEventPalette_Pokemon_Species_237, OBJ_EVENT_PAL_TAG_POKEMON_237},
-	{gObjectEventPalette_Pokemon_Species_238, OBJ_EVENT_PAL_TAG_POKEMON_238},
-	{gObjectEventPalette_Pokemon_Species_239, OBJ_EVENT_PAL_TAG_POKEMON_239},
-	{gObjectEventPalette_Pokemon_Species_240, OBJ_EVENT_PAL_TAG_POKEMON_240},
-	{gObjectEventPalette_Pokemon_Species_241, OBJ_EVENT_PAL_TAG_POKEMON_241},
-	{gObjectEventPalette_Pokemon_Species_242, OBJ_EVENT_PAL_TAG_POKEMON_242},
-	{gObjectEventPalette_Pokemon_Species_243, OBJ_EVENT_PAL_TAG_POKEMON_243},
-	{gObjectEventPalette_Pokemon_Species_244, OBJ_EVENT_PAL_TAG_POKEMON_244},
-	{gObjectEventPalette_Pokemon_Species_245, OBJ_EVENT_PAL_TAG_POKEMON_245},
-	{gObjectEventPalette_Pokemon_Species_246, OBJ_EVENT_PAL_TAG_POKEMON_246},
-	{gObjectEventPalette_Pokemon_Species_247, OBJ_EVENT_PAL_TAG_POKEMON_247},
-	{gObjectEventPalette_Pokemon_Species_248, OBJ_EVENT_PAL_TAG_POKEMON_248},
-	{gObjectEventPalette_Pokemon_Species_249, OBJ_EVENT_PAL_TAG_POKEMON_249},
-	{gObjectEventPalette_Pokemon_Species_250, OBJ_EVENT_PAL_TAG_POKEMON_250},
-	{gObjectEventPalette_Pokemon_Species_251, OBJ_EVENT_PAL_TAG_POKEMON_251},
-	{gObjectEventPalette_Pokemon_Species_252, OBJ_EVENT_PAL_TAG_POKEMON_252},
-	{gObjectEventPalette_Pokemon_Species_253, OBJ_EVENT_PAL_TAG_POKEMON_253},
-	{gObjectEventPalette_Pokemon_Species_254, OBJ_EVENT_PAL_TAG_POKEMON_254},
-	{gObjectEventPalette_Pokemon_Species_255, OBJ_EVENT_PAL_TAG_POKEMON_255},
-	{gObjectEventPalette_Pokemon_Species_256, OBJ_EVENT_PAL_TAG_POKEMON_256},
-	{gObjectEventPalette_Pokemon_Species_257, OBJ_EVENT_PAL_TAG_POKEMON_257},
-	{gObjectEventPalette_Pokemon_Species_258, OBJ_EVENT_PAL_TAG_POKEMON_258},
-	{gObjectEventPalette_Pokemon_Species_259, OBJ_EVENT_PAL_TAG_POKEMON_259},
-	{gObjectEventPalette_Pokemon_Species_260, OBJ_EVENT_PAL_TAG_POKEMON_260},
-	{gObjectEventPalette_Pokemon_Species_261, OBJ_EVENT_PAL_TAG_POKEMON_261},
-	{gObjectEventPalette_Pokemon_Species_262, OBJ_EVENT_PAL_TAG_POKEMON_262},
-	{gObjectEventPalette_Pokemon_Species_263, OBJ_EVENT_PAL_TAG_POKEMON_263},
-	{gObjectEventPalette_Pokemon_Species_264, OBJ_EVENT_PAL_TAG_POKEMON_264},
-	{gObjectEventPalette_Pokemon_Species_265, OBJ_EVENT_PAL_TAG_POKEMON_265},
-	{gObjectEventPalette_Pokemon_Species_266, OBJ_EVENT_PAL_TAG_POKEMON_266},
-	{gObjectEventPalette_Pokemon_Species_267, OBJ_EVENT_PAL_TAG_POKEMON_267},
-	{gObjectEventPalette_Pokemon_Species_268, OBJ_EVENT_PAL_TAG_POKEMON_268},
-	{gObjectEventPalette_Pokemon_Species_269, OBJ_EVENT_PAL_TAG_POKEMON_269},
-	{gObjectEventPalette_Pokemon_Species_270, OBJ_EVENT_PAL_TAG_POKEMON_270},
-	{gObjectEventPalette_Pokemon_Species_271, OBJ_EVENT_PAL_TAG_POKEMON_271},
-	{gObjectEventPalette_Pokemon_Species_272, OBJ_EVENT_PAL_TAG_POKEMON_272},
-	{gObjectEventPalette_Pokemon_Species_273, OBJ_EVENT_PAL_TAG_POKEMON_273},
-	{gObjectEventPalette_Pokemon_Species_274, OBJ_EVENT_PAL_TAG_POKEMON_274},
-	{gObjectEventPalette_Pokemon_Species_275, OBJ_EVENT_PAL_TAG_POKEMON_275},
-	{gObjectEventPalette_Pokemon_Species_276, OBJ_EVENT_PAL_TAG_POKEMON_276},
-	{gObjectEventPalette_Pokemon_Species_277, OBJ_EVENT_PAL_TAG_POKEMON_277},
-	{gObjectEventPalette_Pokemon_Species_278, OBJ_EVENT_PAL_TAG_POKEMON_278},
-	{gObjectEventPalette_Pokemon_Species_279, OBJ_EVENT_PAL_TAG_POKEMON_279},
-	{gObjectEventPalette_Pokemon_Species_280, OBJ_EVENT_PAL_TAG_POKEMON_280},
-	{gObjectEventPalette_Pokemon_Species_281, OBJ_EVENT_PAL_TAG_POKEMON_281},
-	{gObjectEventPalette_Pokemon_Species_282, OBJ_EVENT_PAL_TAG_POKEMON_282},
-	{gObjectEventPalette_Pokemon_Species_283, OBJ_EVENT_PAL_TAG_POKEMON_283},
-	{gObjectEventPalette_Pokemon_Species_284, OBJ_EVENT_PAL_TAG_POKEMON_284},
-	{gObjectEventPalette_Pokemon_Species_285, OBJ_EVENT_PAL_TAG_POKEMON_285},
-	{gObjectEventPalette_Pokemon_Species_286, OBJ_EVENT_PAL_TAG_POKEMON_286},
-	{gObjectEventPalette_Pokemon_Species_287, OBJ_EVENT_PAL_TAG_POKEMON_287},
-	{gObjectEventPalette_Pokemon_Species_288, OBJ_EVENT_PAL_TAG_POKEMON_288},
-	{gObjectEventPalette_Pokemon_Species_289, OBJ_EVENT_PAL_TAG_POKEMON_289},
-	{gObjectEventPalette_Pokemon_Species_290, OBJ_EVENT_PAL_TAG_POKEMON_290},
-	{gObjectEventPalette_Pokemon_Species_291, OBJ_EVENT_PAL_TAG_POKEMON_291},
-	{gObjectEventPalette_Pokemon_Species_292, OBJ_EVENT_PAL_TAG_POKEMON_292},
-	{gObjectEventPalette_Pokemon_Species_293, OBJ_EVENT_PAL_TAG_POKEMON_293},
-	{gObjectEventPalette_Pokemon_Species_294, OBJ_EVENT_PAL_TAG_POKEMON_294},
-	{gObjectEventPalette_Pokemon_Species_295, OBJ_EVENT_PAL_TAG_POKEMON_295},
-	{gObjectEventPalette_Pokemon_Species_296, OBJ_EVENT_PAL_TAG_POKEMON_296},
-	{gObjectEventPalette_Pokemon_Species_297, OBJ_EVENT_PAL_TAG_POKEMON_297},
-	{gObjectEventPalette_Pokemon_Species_298, OBJ_EVENT_PAL_TAG_POKEMON_298},
-	{gObjectEventPalette_Pokemon_Species_299, OBJ_EVENT_PAL_TAG_POKEMON_299},
-	{gObjectEventPalette_Pokemon_Species_300, OBJ_EVENT_PAL_TAG_POKEMON_300},
-	{gObjectEventPalette_Pokemon_Species_301, OBJ_EVENT_PAL_TAG_POKEMON_301},
-	{gObjectEventPalette_Pokemon_Species_302, OBJ_EVENT_PAL_TAG_POKEMON_302},
-	{gObjectEventPalette_Pokemon_Species_303, OBJ_EVENT_PAL_TAG_POKEMON_303},
-	{gObjectEventPalette_Pokemon_Species_304, OBJ_EVENT_PAL_TAG_POKEMON_304},
-	{gObjectEventPalette_Pokemon_Species_305, OBJ_EVENT_PAL_TAG_POKEMON_305},
-	{gObjectEventPalette_Pokemon_Species_306, OBJ_EVENT_PAL_TAG_POKEMON_306},
-	{gObjectEventPalette_Pokemon_Species_307, OBJ_EVENT_PAL_TAG_POKEMON_307},
-	{gObjectEventPalette_Pokemon_Species_308, OBJ_EVENT_PAL_TAG_POKEMON_308},
-	{gObjectEventPalette_Pokemon_Species_309, OBJ_EVENT_PAL_TAG_POKEMON_309},
-	{gObjectEventPalette_Pokemon_Species_310, OBJ_EVENT_PAL_TAG_POKEMON_310},
-	{gObjectEventPalette_Pokemon_Species_311, OBJ_EVENT_PAL_TAG_POKEMON_311},
-	{gObjectEventPalette_Pokemon_Species_312, OBJ_EVENT_PAL_TAG_POKEMON_312},
-	{gObjectEventPalette_Pokemon_Species_313, OBJ_EVENT_PAL_TAG_POKEMON_313},
-	{gObjectEventPalette_Pokemon_Species_314, OBJ_EVENT_PAL_TAG_POKEMON_314},
-	{gObjectEventPalette_Pokemon_Species_315, OBJ_EVENT_PAL_TAG_POKEMON_315},
-	{gObjectEventPalette_Pokemon_Species_316, OBJ_EVENT_PAL_TAG_POKEMON_316},
-	{gObjectEventPalette_Pokemon_Species_317, OBJ_EVENT_PAL_TAG_POKEMON_317},
-	{gObjectEventPalette_Pokemon_Species_318, OBJ_EVENT_PAL_TAG_POKEMON_318},
-	{gObjectEventPalette_Pokemon_Species_319, OBJ_EVENT_PAL_TAG_POKEMON_319},
-	{gObjectEventPalette_Pokemon_Species_320, OBJ_EVENT_PAL_TAG_POKEMON_320},
-	{gObjectEventPalette_Pokemon_Species_321, OBJ_EVENT_PAL_TAG_POKEMON_321},
-	{gObjectEventPalette_Pokemon_Species_322, OBJ_EVENT_PAL_TAG_POKEMON_322},
-	{gObjectEventPalette_Pokemon_Species_323, OBJ_EVENT_PAL_TAG_POKEMON_323},
-	{gObjectEventPalette_Pokemon_Species_324, OBJ_EVENT_PAL_TAG_POKEMON_324},
-	{gObjectEventPalette_Pokemon_Species_325, OBJ_EVENT_PAL_TAG_POKEMON_325},
-	{gObjectEventPalette_Pokemon_Species_326, OBJ_EVENT_PAL_TAG_POKEMON_326},
-	{gObjectEventPalette_Pokemon_Species_327, OBJ_EVENT_PAL_TAG_POKEMON_327},
-	{gObjectEventPalette_Pokemon_Species_328, OBJ_EVENT_PAL_TAG_POKEMON_328},
-	{gObjectEventPalette_Pokemon_Species_329, OBJ_EVENT_PAL_TAG_POKEMON_329},
-	{gObjectEventPalette_Pokemon_Species_330, OBJ_EVENT_PAL_TAG_POKEMON_330},
-	{gObjectEventPalette_Pokemon_Species_331, OBJ_EVENT_PAL_TAG_POKEMON_331},
-	{gObjectEventPalette_Pokemon_Species_332, OBJ_EVENT_PAL_TAG_POKEMON_332},
-	{gObjectEventPalette_Pokemon_Species_333, OBJ_EVENT_PAL_TAG_POKEMON_333},
-	{gObjectEventPalette_Pokemon_Species_334, OBJ_EVENT_PAL_TAG_POKEMON_334},
-	{gObjectEventPalette_Pokemon_Species_335, OBJ_EVENT_PAL_TAG_POKEMON_335},
-	{gObjectEventPalette_Pokemon_Species_336, OBJ_EVENT_PAL_TAG_POKEMON_336},
-	{gObjectEventPalette_Pokemon_Species_337, OBJ_EVENT_PAL_TAG_POKEMON_337},
-	{gObjectEventPalette_Pokemon_Species_338, OBJ_EVENT_PAL_TAG_POKEMON_338},
-	{gObjectEventPalette_Pokemon_Species_339, OBJ_EVENT_PAL_TAG_POKEMON_339},
-	{gObjectEventPalette_Pokemon_Species_340, OBJ_EVENT_PAL_TAG_POKEMON_340},
-	{gObjectEventPalette_Pokemon_Species_341, OBJ_EVENT_PAL_TAG_POKEMON_341},
-	{gObjectEventPalette_Pokemon_Species_342, OBJ_EVENT_PAL_TAG_POKEMON_342},
-	{gObjectEventPalette_Pokemon_Species_343, OBJ_EVENT_PAL_TAG_POKEMON_343},
-	{gObjectEventPalette_Pokemon_Species_344, OBJ_EVENT_PAL_TAG_POKEMON_344},
-	{gObjectEventPalette_Pokemon_Species_345, OBJ_EVENT_PAL_TAG_POKEMON_345},
-	{gObjectEventPalette_Pokemon_Species_346, OBJ_EVENT_PAL_TAG_POKEMON_346},
-	{gObjectEventPalette_Pokemon_Species_347, OBJ_EVENT_PAL_TAG_POKEMON_347},
-	{gObjectEventPalette_Pokemon_Species_348, OBJ_EVENT_PAL_TAG_POKEMON_348},
-	{gObjectEventPalette_Pokemon_Species_349, OBJ_EVENT_PAL_TAG_POKEMON_349},
-	{gObjectEventPalette_Pokemon_Species_350, OBJ_EVENT_PAL_TAG_POKEMON_350},
-	{gObjectEventPalette_Pokemon_Species_351, OBJ_EVENT_PAL_TAG_POKEMON_351},
-	{gObjectEventPalette_Pokemon_Species_352, OBJ_EVENT_PAL_TAG_POKEMON_352},
-	{gObjectEventPalette_Pokemon_Species_353, OBJ_EVENT_PAL_TAG_POKEMON_353},
-	{gObjectEventPalette_Pokemon_Species_354, OBJ_EVENT_PAL_TAG_POKEMON_354},
-	{gObjectEventPalette_Pokemon_Species_355, OBJ_EVENT_PAL_TAG_POKEMON_355},
-	{gObjectEventPalette_Pokemon_Species_356, OBJ_EVENT_PAL_TAG_POKEMON_356},
-	{gObjectEventPalette_Pokemon_Species_357, OBJ_EVENT_PAL_TAG_POKEMON_357},
-	{gObjectEventPalette_Pokemon_Species_358, OBJ_EVENT_PAL_TAG_POKEMON_358},
-	{gObjectEventPalette_Pokemon_Species_359, OBJ_EVENT_PAL_TAG_POKEMON_359},
-	{gObjectEventPalette_Pokemon_Species_360, OBJ_EVENT_PAL_TAG_POKEMON_360},
-	{gObjectEventPalette_Pokemon_Species_361, OBJ_EVENT_PAL_TAG_POKEMON_361},
-	{gObjectEventPalette_Pokemon_Species_362, OBJ_EVENT_PAL_TAG_POKEMON_362},
-	{gObjectEventPalette_Pokemon_Species_363, OBJ_EVENT_PAL_TAG_POKEMON_363},
-	{gObjectEventPalette_Pokemon_Species_364, OBJ_EVENT_PAL_TAG_POKEMON_364},
-	{gObjectEventPalette_Pokemon_Species_365, OBJ_EVENT_PAL_TAG_POKEMON_365},
-	{gObjectEventPalette_Pokemon_Species_366, OBJ_EVENT_PAL_TAG_POKEMON_366},
-	{gObjectEventPalette_Pokemon_Species_367, OBJ_EVENT_PAL_TAG_POKEMON_367},
-	{gObjectEventPalette_Pokemon_Species_368, OBJ_EVENT_PAL_TAG_POKEMON_368},
-	{gObjectEventPalette_Pokemon_Species_369, OBJ_EVENT_PAL_TAG_POKEMON_369},
-	{gObjectEventPalette_Pokemon_Species_370, OBJ_EVENT_PAL_TAG_POKEMON_370},
-	{gObjectEventPalette_Pokemon_Species_371, OBJ_EVENT_PAL_TAG_POKEMON_371},
-	{gObjectEventPalette_Pokemon_Species_372, OBJ_EVENT_PAL_TAG_POKEMON_372},
-	{gObjectEventPalette_Pokemon_Species_373, OBJ_EVENT_PAL_TAG_POKEMON_373},
-	{gObjectEventPalette_Pokemon_Species_374, OBJ_EVENT_PAL_TAG_POKEMON_374},
-	{gObjectEventPalette_Pokemon_Species_375, OBJ_EVENT_PAL_TAG_POKEMON_375},
-	{gObjectEventPalette_Pokemon_Species_376, OBJ_EVENT_PAL_TAG_POKEMON_376},
-	{gObjectEventPalette_Pokemon_Species_377, OBJ_EVENT_PAL_TAG_POKEMON_377},
-	{gObjectEventPalette_Pokemon_Species_378, OBJ_EVENT_PAL_TAG_POKEMON_378},
-	{gObjectEventPalette_Pokemon_Species_379, OBJ_EVENT_PAL_TAG_POKEMON_379},
-	{gObjectEventPalette_Pokemon_Species_380, OBJ_EVENT_PAL_TAG_POKEMON_380},
-	{gObjectEventPalette_Pokemon_Species_381, OBJ_EVENT_PAL_TAG_POKEMON_381},
-	{gObjectEventPalette_Pokemon_Species_382, OBJ_EVENT_PAL_TAG_POKEMON_382},
-	{gObjectEventPalette_Pokemon_Species_383, OBJ_EVENT_PAL_TAG_POKEMON_383},
-	{gObjectEventPalette_Pokemon_Species_384, OBJ_EVENT_PAL_TAG_POKEMON_384},
-	{gObjectEventPalette_Pokemon_Species_385, OBJ_EVENT_PAL_TAG_POKEMON_385},
-	{gObjectEventPalette_Pokemon_Species_386, OBJ_EVENT_PAL_TAG_POKEMON_386},
-	{gObjectEventPalette_Pokemon_Species_387, OBJ_EVENT_PAL_TAG_POKEMON_387},
-	{gObjectEventPalette_Pokemon_Species_388, OBJ_EVENT_PAL_TAG_POKEMON_388},
-	{gObjectEventPalette_Pokemon_Species_389, OBJ_EVENT_PAL_TAG_POKEMON_389},
-	{gObjectEventPalette_Pokemon_Species_390, OBJ_EVENT_PAL_TAG_POKEMON_390},
-	{gObjectEventPalette_Pokemon_Species_391, OBJ_EVENT_PAL_TAG_POKEMON_391},
-	{gObjectEventPalette_Pokemon_Species_392, OBJ_EVENT_PAL_TAG_POKEMON_392},
-	{gObjectEventPalette_Pokemon_Species_393, OBJ_EVENT_PAL_TAG_POKEMON_393},
-	{gObjectEventPalette_Pokemon_Species_394, OBJ_EVENT_PAL_TAG_POKEMON_394},
-	{gObjectEventPalette_Pokemon_Species_395, OBJ_EVENT_PAL_TAG_POKEMON_395},
-	{gObjectEventPalette_Pokemon_Species_396, OBJ_EVENT_PAL_TAG_POKEMON_396},
-	{gObjectEventPalette_Pokemon_Species_397, OBJ_EVENT_PAL_TAG_POKEMON_397},
-	{gObjectEventPalette_Pokemon_Species_398, OBJ_EVENT_PAL_TAG_POKEMON_398},
-	{gObjectEventPalette_Pokemon_Species_399, OBJ_EVENT_PAL_TAG_POKEMON_399},
-	{gObjectEventPalette_Pokemon_Species_400, OBJ_EVENT_PAL_TAG_POKEMON_400},
-	{gObjectEventPalette_Pokemon_Species_401, OBJ_EVENT_PAL_TAG_POKEMON_401},
-	{gObjectEventPalette_Pokemon_Species_402, OBJ_EVENT_PAL_TAG_POKEMON_402},
-	{gObjectEventPalette_Pokemon_Species_403, OBJ_EVENT_PAL_TAG_POKEMON_403},
-	{gObjectEventPalette_Pokemon_Species_404, OBJ_EVENT_PAL_TAG_POKEMON_404},
-	{gObjectEventPalette_Pokemon_Species_405, OBJ_EVENT_PAL_TAG_POKEMON_405},
-	{gObjectEventPalette_Pokemon_Species_406, OBJ_EVENT_PAL_TAG_POKEMON_406},
-	{gObjectEventPalette_Pokemon_Species_407, OBJ_EVENT_PAL_TAG_POKEMON_407},
-	{gObjectEventPalette_Pokemon_Species_408, OBJ_EVENT_PAL_TAG_POKEMON_408},
-	{gObjectEventPalette_Pokemon_Species_409, OBJ_EVENT_PAL_TAG_POKEMON_409},
-	{gObjectEventPalette_Pokemon_Species_410, OBJ_EVENT_PAL_TAG_POKEMON_410},
-	{gObjectEventPalette_Pokemon_Species_411, OBJ_EVENT_PAL_TAG_POKEMON_411},
-	{gObjectEventPalette_Pokemon_Species_412, OBJ_EVENT_PAL_TAG_POKEMON_412},
-	{gObjectEventPalette_Pokemon_Species_413, OBJ_EVENT_PAL_TAG_POKEMON_413},
-	{gObjectEventPalette_Pokemon_Species_414, OBJ_EVENT_PAL_TAG_POKEMON_414},
-	{gObjectEventPalette_Pokemon_Species_415, OBJ_EVENT_PAL_TAG_POKEMON_415},
-	{gObjectEventPalette_Pokemon_Species_416, OBJ_EVENT_PAL_TAG_POKEMON_416},
-	{gObjectEventPalette_Pokemon_Species_417, OBJ_EVENT_PAL_TAG_POKEMON_417},
-	{gObjectEventPalette_Pokemon_Species_418, OBJ_EVENT_PAL_TAG_POKEMON_418},
-	{gObjectEventPalette_Pokemon_Species_419, OBJ_EVENT_PAL_TAG_POKEMON_419},
-	{gObjectEventPalette_Pokemon_Species_420, OBJ_EVENT_PAL_TAG_POKEMON_420},
-	{gObjectEventPalette_Pokemon_Species_421, OBJ_EVENT_PAL_TAG_POKEMON_421},
-	{gObjectEventPalette_Pokemon_Species_422, OBJ_EVENT_PAL_TAG_POKEMON_422},
-	{gObjectEventPalette_Pokemon_Species_423, OBJ_EVENT_PAL_TAG_POKEMON_423},
-	{gObjectEventPalette_Pokemon_Species_424, OBJ_EVENT_PAL_TAG_POKEMON_424},
-	{gObjectEventPalette_Pokemon_Species_425, OBJ_EVENT_PAL_TAG_POKEMON_425},
-	{gObjectEventPalette_Pokemon_Species_426, OBJ_EVENT_PAL_TAG_POKEMON_426},
-	{gObjectEventPalette_Pokemon_Species_427, OBJ_EVENT_PAL_TAG_POKEMON_427},
-	{gObjectEventPalette_Pokemon_Species_428, OBJ_EVENT_PAL_TAG_POKEMON_428},
-	{gObjectEventPalette_Pokemon_Species_429, OBJ_EVENT_PAL_TAG_POKEMON_429},
-	{gObjectEventPalette_Pokemon_Species_430, OBJ_EVENT_PAL_TAG_POKEMON_430},
-	{gObjectEventPalette_Pokemon_Species_431, OBJ_EVENT_PAL_TAG_POKEMON_431},
-	{gObjectEventPalette_Pokemon_Species_432, OBJ_EVENT_PAL_TAG_POKEMON_432},
-	{gObjectEventPalette_Pokemon_Species_433, OBJ_EVENT_PAL_TAG_POKEMON_433},
-	{gObjectEventPalette_Pokemon_Species_434, OBJ_EVENT_PAL_TAG_POKEMON_434},
-	{gObjectEventPalette_Pokemon_Species_435, OBJ_EVENT_PAL_TAG_POKEMON_435},
-	{gObjectEventPalette_Pokemon_Species_436, OBJ_EVENT_PAL_TAG_POKEMON_436},
-	{gObjectEventPalette_Pokemon_Species_437, OBJ_EVENT_PAL_TAG_POKEMON_437},
-	{gObjectEventPalette_Pokemon_Species_438, OBJ_EVENT_PAL_TAG_POKEMON_438},
-	{gObjectEventPalette_Pokemon_Species_439, OBJ_EVENT_PAL_TAG_POKEMON_439},
-	{gObjectEventPalette_Pokemon_Species_440, OBJ_EVENT_PAL_TAG_POKEMON_440},
-	{gObjectEventPalette_Pokemon_Species_441, OBJ_EVENT_PAL_TAG_POKEMON_441},
-	{gObjectEventPalette_Pokemon_Species_442, OBJ_EVENT_PAL_TAG_POKEMON_442},
-	{gObjectEventPalette_Pokemon_Species_443, OBJ_EVENT_PAL_TAG_POKEMON_443},
-	{gObjectEventPalette_Pokemon_Species_444, OBJ_EVENT_PAL_TAG_POKEMON_444},
-	{gObjectEventPalette_Pokemon_Species_445, OBJ_EVENT_PAL_TAG_POKEMON_445},
-	{gObjectEventPalette_Pokemon_Species_446, OBJ_EVENT_PAL_TAG_POKEMON_446},
-	{gObjectEventPalette_Pokemon_Species_447, OBJ_EVENT_PAL_TAG_POKEMON_447},
-	{gObjectEventPalette_Pokemon_Species_448, OBJ_EVENT_PAL_TAG_POKEMON_448},
-	{gObjectEventPalette_Pokemon_Species_449, OBJ_EVENT_PAL_TAG_POKEMON_449},
-	{gObjectEventPalette_Pokemon_Species_450, OBJ_EVENT_PAL_TAG_POKEMON_450},
-	{gObjectEventPalette_Pokemon_Species_451, OBJ_EVENT_PAL_TAG_POKEMON_451},
-	{gObjectEventPalette_Pokemon_Species_452, OBJ_EVENT_PAL_TAG_POKEMON_452},
-	{gObjectEventPalette_Pokemon_Species_453, OBJ_EVENT_PAL_TAG_POKEMON_453},
-	{gObjectEventPalette_Pokemon_Species_454, OBJ_EVENT_PAL_TAG_POKEMON_454},
-	{gObjectEventPalette_Pokemon_Species_455, OBJ_EVENT_PAL_TAG_POKEMON_455},
-	{gObjectEventPalette_Pokemon_Species_456, OBJ_EVENT_PAL_TAG_POKEMON_456},
-	{gObjectEventPalette_Pokemon_Species_457, OBJ_EVENT_PAL_TAG_POKEMON_457},
-	{gObjectEventPalette_Pokemon_Species_458, OBJ_EVENT_PAL_TAG_POKEMON_458},
-	{gObjectEventPalette_Pokemon_Species_459, OBJ_EVENT_PAL_TAG_POKEMON_459},
-	{gObjectEventPalette_Pokemon_Species_460, OBJ_EVENT_PAL_TAG_POKEMON_460},
-	{gObjectEventPalette_Pokemon_Species_461, OBJ_EVENT_PAL_TAG_POKEMON_461},
-	{gObjectEventPalette_Pokemon_Species_462, OBJ_EVENT_PAL_TAG_POKEMON_462},
-	{gObjectEventPalette_Pokemon_Species_463, OBJ_EVENT_PAL_TAG_POKEMON_463},
-	{gObjectEventPalette_Pokemon_Species_464, OBJ_EVENT_PAL_TAG_POKEMON_464},
-	{gObjectEventPalette_Pokemon_Species_465, OBJ_EVENT_PAL_TAG_POKEMON_465},
-	{gObjectEventPalette_Pokemon_Species_466, OBJ_EVENT_PAL_TAG_POKEMON_466},
-	{gObjectEventPalette_Pokemon_Species_467, OBJ_EVENT_PAL_TAG_POKEMON_467},
-	{gObjectEventPalette_Pokemon_Species_468, OBJ_EVENT_PAL_TAG_POKEMON_468},
-	{gObjectEventPalette_Pokemon_Species_469, OBJ_EVENT_PAL_TAG_POKEMON_469},
-	{gObjectEventPalette_Pokemon_Species_470, OBJ_EVENT_PAL_TAG_POKEMON_470},
-	{gObjectEventPalette_Pokemon_Species_471, OBJ_EVENT_PAL_TAG_POKEMON_471},
-	{gObjectEventPalette_Pokemon_Species_472, OBJ_EVENT_PAL_TAG_POKEMON_472},
-	{gObjectEventPalette_Pokemon_Species_473, OBJ_EVENT_PAL_TAG_POKEMON_473},
-	{gObjectEventPalette_Pokemon_Species_474, OBJ_EVENT_PAL_TAG_POKEMON_474},
-	{gObjectEventPalette_Pokemon_Species_475, OBJ_EVENT_PAL_TAG_POKEMON_475},
-	{gObjectEventPalette_Pokemon_Species_476, OBJ_EVENT_PAL_TAG_POKEMON_476},
-	{gObjectEventPalette_Pokemon_Species_477, OBJ_EVENT_PAL_TAG_POKEMON_477},
-	{gObjectEventPalette_Pokemon_Species_478, OBJ_EVENT_PAL_TAG_POKEMON_478},
-	{gObjectEventPalette_Pokemon_Species_479, OBJ_EVENT_PAL_TAG_POKEMON_479},
-	{gObjectEventPalette_Pokemon_Species_480, OBJ_EVENT_PAL_TAG_POKEMON_480},
-	{gObjectEventPalette_Pokemon_Species_481, OBJ_EVENT_PAL_TAG_POKEMON_481},
-	{gObjectEventPalette_Pokemon_Species_482, OBJ_EVENT_PAL_TAG_POKEMON_482},
-	{gObjectEventPalette_Pokemon_Species_483, OBJ_EVENT_PAL_TAG_POKEMON_483},
-	{gObjectEventPalette_Pokemon_Species_484, OBJ_EVENT_PAL_TAG_POKEMON_484},
-	{gObjectEventPalette_Pokemon_Species_485, OBJ_EVENT_PAL_TAG_POKEMON_485},
-	{gObjectEventPalette_Pokemon_Species_486, OBJ_EVENT_PAL_TAG_POKEMON_486},
-	{gObjectEventPalette_Pokemon_Species_487, OBJ_EVENT_PAL_TAG_POKEMON_487},
-	{gObjectEventPalette_Pokemon_Species_488, OBJ_EVENT_PAL_TAG_POKEMON_488},
-	{gObjectEventPalette_Pokemon_Species_489, OBJ_EVENT_PAL_TAG_POKEMON_489},
-	{gObjectEventPalette_Pokemon_Species_490, OBJ_EVENT_PAL_TAG_POKEMON_490},
-	{gObjectEventPalette_Pokemon_Species_491, OBJ_EVENT_PAL_TAG_POKEMON_491},
-	{gObjectEventPalette_Pokemon_Species_492, OBJ_EVENT_PAL_TAG_POKEMON_492},
-	{gObjectEventPalette_Pokemon_Species_493, OBJ_EVENT_PAL_TAG_POKEMON_493},
-	{gObjectEventPalette_Pokemon_Species_494, OBJ_EVENT_PAL_TAG_POKEMON_494},
-	{gObjectEventPalette_Pokemon_Species_495, OBJ_EVENT_PAL_TAG_POKEMON_495},
-	{gObjectEventPalette_Pokemon_Species_496, OBJ_EVENT_PAL_TAG_POKEMON_496},
-	{gObjectEventPalette_Pokemon_Species_497, OBJ_EVENT_PAL_TAG_POKEMON_497},
-	{gObjectEventPalette_Pokemon_Species_498, OBJ_EVENT_PAL_TAG_POKEMON_498},
-	{gObjectEventPalette_Pokemon_Species_499, OBJ_EVENT_PAL_TAG_POKEMON_499},
-	{gObjectEventPalette_Pokemon_Species_500, OBJ_EVENT_PAL_TAG_POKEMON_500},
-	{gObjectEventPalette_Pokemon_Species_501, OBJ_EVENT_PAL_TAG_POKEMON_501},
-	{gObjectEventPalette_Pokemon_Species_502, OBJ_EVENT_PAL_TAG_POKEMON_502},
-	{gObjectEventPalette_Pokemon_Species_503, OBJ_EVENT_PAL_TAG_POKEMON_503},
-	{gObjectEventPalette_Pokemon_Species_504, OBJ_EVENT_PAL_TAG_POKEMON_504},
-	{gObjectEventPalette_Pokemon_Species_505, OBJ_EVENT_PAL_TAG_POKEMON_505},
-	{gObjectEventPalette_Pokemon_Species_506, OBJ_EVENT_PAL_TAG_POKEMON_506},
-	{gObjectEventPalette_Pokemon_Species_507, OBJ_EVENT_PAL_TAG_POKEMON_507},
-	{gObjectEventPalette_Pokemon_Species_508, OBJ_EVENT_PAL_TAG_POKEMON_508},
-	{gObjectEventPalette_Pokemon_Species_509, OBJ_EVENT_PAL_TAG_POKEMON_509},
-	{gObjectEventPalette_Pokemon_Species_510, OBJ_EVENT_PAL_TAG_POKEMON_510},
-	{gObjectEventPalette_Pokemon_Species_511, OBJ_EVENT_PAL_TAG_POKEMON_511},
-	{gObjectEventPalette_Pokemon_Species_512, OBJ_EVENT_PAL_TAG_POKEMON_512},
-	{gObjectEventPalette_Pokemon_Species_513, OBJ_EVENT_PAL_TAG_POKEMON_513},
-	{gObjectEventPalette_Pokemon_Species_514, OBJ_EVENT_PAL_TAG_POKEMON_514},
-	{gObjectEventPalette_Pokemon_Species_515, OBJ_EVENT_PAL_TAG_POKEMON_515},
-	{gObjectEventPalette_Pokemon_Species_516, OBJ_EVENT_PAL_TAG_POKEMON_516},
-	{gObjectEventPalette_Pokemon_Species_517, OBJ_EVENT_PAL_TAG_POKEMON_517},
-	{gObjectEventPalette_Pokemon_Species_518, OBJ_EVENT_PAL_TAG_POKEMON_518},
-	{gObjectEventPalette_Pokemon_Species_519, OBJ_EVENT_PAL_TAG_POKEMON_519},
-	{gObjectEventPalette_Pokemon_Species_520, OBJ_EVENT_PAL_TAG_POKEMON_520},
-	{gObjectEventPalette_Pokemon_Species_521, OBJ_EVENT_PAL_TAG_POKEMON_521},
-	{gObjectEventPalette_Pokemon_Species_522, OBJ_EVENT_PAL_TAG_POKEMON_522},
-	{gObjectEventPalette_Pokemon_Species_523, OBJ_EVENT_PAL_TAG_POKEMON_523},
-	{gObjectEventPalette_Pokemon_Species_524, OBJ_EVENT_PAL_TAG_POKEMON_524},
-	{gObjectEventPalette_Pokemon_Species_525, OBJ_EVENT_PAL_TAG_POKEMON_525},
-	{gObjectEventPalette_Pokemon_Species_526, OBJ_EVENT_PAL_TAG_POKEMON_526},
-	{gObjectEventPalette_Pokemon_Species_527, OBJ_EVENT_PAL_TAG_POKEMON_527},
-	{gObjectEventPalette_Pokemon_Species_528, OBJ_EVENT_PAL_TAG_POKEMON_528},
-	{gObjectEventPalette_Pokemon_Species_529, OBJ_EVENT_PAL_TAG_POKEMON_529},
-	{gObjectEventPalette_Pokemon_Species_530, OBJ_EVENT_PAL_TAG_POKEMON_530},
-	{gObjectEventPalette_Pokemon_Species_531, OBJ_EVENT_PAL_TAG_POKEMON_531},
-	{gObjectEventPalette_Pokemon_Species_532, OBJ_EVENT_PAL_TAG_POKEMON_532},
-	{gObjectEventPalette_Pokemon_Species_533, OBJ_EVENT_PAL_TAG_POKEMON_533},
-	{gObjectEventPalette_Pokemon_Species_534, OBJ_EVENT_PAL_TAG_POKEMON_534},
-	{gObjectEventPalette_Pokemon_Species_535, OBJ_EVENT_PAL_TAG_POKEMON_535},
-	{gObjectEventPalette_Pokemon_Species_536, OBJ_EVENT_PAL_TAG_POKEMON_536},
-	{gObjectEventPalette_Pokemon_Species_537, OBJ_EVENT_PAL_TAG_POKEMON_537},
-	{gObjectEventPalette_Pokemon_Species_538, OBJ_EVENT_PAL_TAG_POKEMON_538},
-	{gObjectEventPalette_Pokemon_Species_539, OBJ_EVENT_PAL_TAG_POKEMON_539},
-	{gObjectEventPalette_Pokemon_Species_540, OBJ_EVENT_PAL_TAG_POKEMON_540},
-	{gObjectEventPalette_Pokemon_Species_541, OBJ_EVENT_PAL_TAG_POKEMON_541},
-	{gObjectEventPalette_Pokemon_Species_542, OBJ_EVENT_PAL_TAG_POKEMON_542},
-	{gObjectEventPalette_Pokemon_Species_543, OBJ_EVENT_PAL_TAG_POKEMON_543},
-	{gObjectEventPalette_Pokemon_Species_544, OBJ_EVENT_PAL_TAG_POKEMON_544},
-	{gObjectEventPalette_Pokemon_Species_545, OBJ_EVENT_PAL_TAG_POKEMON_545},
-	{gObjectEventPalette_Pokemon_Species_546, OBJ_EVENT_PAL_TAG_POKEMON_546},
-	{gObjectEventPalette_Pokemon_Species_547, OBJ_EVENT_PAL_TAG_POKEMON_547},
-	{gObjectEventPalette_Pokemon_Species_548, OBJ_EVENT_PAL_TAG_POKEMON_548},
-	{gObjectEventPalette_Pokemon_Species_549, OBJ_EVENT_PAL_TAG_POKEMON_549},
-	{gObjectEventPalette_Pokemon_Species_550, OBJ_EVENT_PAL_TAG_POKEMON_550},
-	{gObjectEventPalette_Pokemon_Species_551, OBJ_EVENT_PAL_TAG_POKEMON_551},
-	{gObjectEventPalette_Pokemon_Species_552, OBJ_EVENT_PAL_TAG_POKEMON_552},
-	{gObjectEventPalette_Pokemon_Species_553, OBJ_EVENT_PAL_TAG_POKEMON_553},
-	{gObjectEventPalette_Pokemon_Species_554, OBJ_EVENT_PAL_TAG_POKEMON_554},
-	{gObjectEventPalette_Pokemon_Species_555, OBJ_EVENT_PAL_TAG_POKEMON_555},
-	{gObjectEventPalette_Pokemon_Species_556, OBJ_EVENT_PAL_TAG_POKEMON_556},
-	{gObjectEventPalette_Pokemon_Species_557, OBJ_EVENT_PAL_TAG_POKEMON_557},
-	{gObjectEventPalette_Pokemon_Species_558, OBJ_EVENT_PAL_TAG_POKEMON_558},
-	{gObjectEventPalette_Pokemon_Species_559, OBJ_EVENT_PAL_TAG_POKEMON_559},
-	{gObjectEventPalette_Pokemon_Species_560, OBJ_EVENT_PAL_TAG_POKEMON_560},
-	{gObjectEventPalette_Pokemon_Species_561, OBJ_EVENT_PAL_TAG_POKEMON_561},
-	{gObjectEventPalette_Pokemon_Species_562, OBJ_EVENT_PAL_TAG_POKEMON_562},
-	{gObjectEventPalette_Pokemon_Species_563, OBJ_EVENT_PAL_TAG_POKEMON_563},
-	{gObjectEventPalette_Pokemon_Species_564, OBJ_EVENT_PAL_TAG_POKEMON_564},
-	{gObjectEventPalette_Pokemon_Species_565, OBJ_EVENT_PAL_TAG_POKEMON_565},
-	{gObjectEventPalette_Pokemon_Species_566, OBJ_EVENT_PAL_TAG_POKEMON_566},
-	{gObjectEventPalette_Pokemon_Species_567, OBJ_EVENT_PAL_TAG_POKEMON_567},
-	{gObjectEventPalette_Pokemon_Species_568, OBJ_EVENT_PAL_TAG_POKEMON_568},
-	{gObjectEventPalette_Pokemon_Species_569, OBJ_EVENT_PAL_TAG_POKEMON_569},
-	{gObjectEventPalette_Pokemon_Species_570, OBJ_EVENT_PAL_TAG_POKEMON_570},
-	{gObjectEventPalette_Pokemon_Species_571, OBJ_EVENT_PAL_TAG_POKEMON_571},
-	{gObjectEventPalette_Pokemon_Species_572, OBJ_EVENT_PAL_TAG_POKEMON_572},
-	{gObjectEventPalette_Pokemon_Species_573, OBJ_EVENT_PAL_TAG_POKEMON_573},
-	{gObjectEventPalette_Pokemon_Species_574, OBJ_EVENT_PAL_TAG_POKEMON_574},
-	{gObjectEventPalette_Pokemon_Species_575, OBJ_EVENT_PAL_TAG_POKEMON_575},
-	{gObjectEventPalette_Pokemon_Species_576, OBJ_EVENT_PAL_TAG_POKEMON_576},
-	{gObjectEventPalette_Pokemon_Species_577, OBJ_EVENT_PAL_TAG_POKEMON_577},
-	{gObjectEventPalette_Pokemon_Species_578, OBJ_EVENT_PAL_TAG_POKEMON_578},
-	{gObjectEventPalette_Pokemon_Species_579, OBJ_EVENT_PAL_TAG_POKEMON_579},
-	{gObjectEventPalette_Pokemon_Species_580, OBJ_EVENT_PAL_TAG_POKEMON_580},
-	{gObjectEventPalette_Pokemon_Species_581, OBJ_EVENT_PAL_TAG_POKEMON_581},
-	{gObjectEventPalette_Pokemon_Species_582, OBJ_EVENT_PAL_TAG_POKEMON_582},
-	{gObjectEventPalette_Pokemon_Species_583, OBJ_EVENT_PAL_TAG_POKEMON_583},
-	{gObjectEventPalette_Pokemon_Species_584, OBJ_EVENT_PAL_TAG_POKEMON_584},
-	{gObjectEventPalette_Pokemon_Species_585, OBJ_EVENT_PAL_TAG_POKEMON_585},
-	{gObjectEventPalette_Pokemon_Species_586, OBJ_EVENT_PAL_TAG_POKEMON_586},
-	{gObjectEventPalette_Pokemon_Species_587, OBJ_EVENT_PAL_TAG_POKEMON_587},
-	{gObjectEventPalette_Pokemon_Species_588, OBJ_EVENT_PAL_TAG_POKEMON_588},
-	{gObjectEventPalette_Pokemon_Species_589, OBJ_EVENT_PAL_TAG_POKEMON_589},
-	{gObjectEventPalette_Pokemon_Species_590, OBJ_EVENT_PAL_TAG_POKEMON_590},
-	{gObjectEventPalette_Pokemon_Species_591, OBJ_EVENT_PAL_TAG_POKEMON_591},
-	{gObjectEventPalette_Pokemon_Species_592, OBJ_EVENT_PAL_TAG_POKEMON_592},
-	{gObjectEventPalette_Pokemon_Species_593, OBJ_EVENT_PAL_TAG_POKEMON_593},
-	{gObjectEventPalette_Pokemon_Species_594, OBJ_EVENT_PAL_TAG_POKEMON_594},
-	{gObjectEventPalette_Pokemon_Species_595, OBJ_EVENT_PAL_TAG_POKEMON_595},
-	{gObjectEventPalette_Pokemon_Species_596, OBJ_EVENT_PAL_TAG_POKEMON_596},
-	{gObjectEventPalette_Pokemon_Species_597, OBJ_EVENT_PAL_TAG_POKEMON_597},
-	{gObjectEventPalette_Pokemon_Species_598, OBJ_EVENT_PAL_TAG_POKEMON_598},
-	{gObjectEventPalette_Pokemon_Species_599, OBJ_EVENT_PAL_TAG_POKEMON_599},
-	{gObjectEventPalette_Pokemon_Species_600, OBJ_EVENT_PAL_TAG_POKEMON_600},
-	{gObjectEventPalette_Pokemon_Species_601, OBJ_EVENT_PAL_TAG_POKEMON_601},
-	{gObjectEventPalette_Pokemon_Species_602, OBJ_EVENT_PAL_TAG_POKEMON_602},
-	{gObjectEventPalette_Pokemon_Species_603, OBJ_EVENT_PAL_TAG_POKEMON_603},
-	{gObjectEventPalette_Pokemon_Species_604, OBJ_EVENT_PAL_TAG_POKEMON_604},
-	{gObjectEventPalette_Pokemon_Species_605, OBJ_EVENT_PAL_TAG_POKEMON_605},
-	{gObjectEventPalette_Pokemon_Species_606, OBJ_EVENT_PAL_TAG_POKEMON_606},
-	{gObjectEventPalette_Pokemon_Species_607, OBJ_EVENT_PAL_TAG_POKEMON_607},
-	{gObjectEventPalette_Pokemon_Species_608, OBJ_EVENT_PAL_TAG_POKEMON_608},
-	{gObjectEventPalette_Pokemon_Species_609, OBJ_EVENT_PAL_TAG_POKEMON_609},
-	{gObjectEventPalette_Pokemon_Species_610, OBJ_EVENT_PAL_TAG_POKEMON_610},
-	{gObjectEventPalette_Pokemon_Species_611, OBJ_EVENT_PAL_TAG_POKEMON_611},
-	{gObjectEventPalette_Pokemon_Species_612, OBJ_EVENT_PAL_TAG_POKEMON_612},
-	{gObjectEventPalette_Pokemon_Species_613, OBJ_EVENT_PAL_TAG_POKEMON_613},
-	{gObjectEventPalette_Pokemon_Species_614, OBJ_EVENT_PAL_TAG_POKEMON_614},
-	{gObjectEventPalette_Pokemon_Species_615, OBJ_EVENT_PAL_TAG_POKEMON_615},
-	{gObjectEventPalette_Pokemon_Species_616, OBJ_EVENT_PAL_TAG_POKEMON_616},
-	{gObjectEventPalette_Pokemon_Species_617, OBJ_EVENT_PAL_TAG_POKEMON_617},
-	{gObjectEventPalette_Pokemon_Species_618, OBJ_EVENT_PAL_TAG_POKEMON_618},
-	{gObjectEventPalette_Pokemon_Species_619, OBJ_EVENT_PAL_TAG_POKEMON_619},
-	{gObjectEventPalette_Pokemon_Species_620, OBJ_EVENT_PAL_TAG_POKEMON_620},
-	{gObjectEventPalette_Pokemon_Species_621, OBJ_EVENT_PAL_TAG_POKEMON_621},
-	{gObjectEventPalette_Pokemon_Species_622, OBJ_EVENT_PAL_TAG_POKEMON_622},
-	{gObjectEventPalette_Pokemon_Species_623, OBJ_EVENT_PAL_TAG_POKEMON_623},
-	{gObjectEventPalette_Pokemon_Species_624, OBJ_EVENT_PAL_TAG_POKEMON_624},
-	{gObjectEventPalette_Pokemon_Species_625, OBJ_EVENT_PAL_TAG_POKEMON_625},
-	{gObjectEventPalette_Pokemon_Species_626, OBJ_EVENT_PAL_TAG_POKEMON_626},
-	{gObjectEventPalette_Pokemon_Species_627, OBJ_EVENT_PAL_TAG_POKEMON_627},
-	{gObjectEventPalette_Pokemon_Species_628, OBJ_EVENT_PAL_TAG_POKEMON_628},
-	{gObjectEventPalette_Pokemon_Species_629, OBJ_EVENT_PAL_TAG_POKEMON_629},
-	{gObjectEventPalette_Pokemon_Species_630, OBJ_EVENT_PAL_TAG_POKEMON_630},
-	{gObjectEventPalette_Pokemon_Species_631, OBJ_EVENT_PAL_TAG_POKEMON_631},
-	{gObjectEventPalette_Pokemon_Species_632, OBJ_EVENT_PAL_TAG_POKEMON_632},
-	{gObjectEventPalette_Pokemon_Species_633, OBJ_EVENT_PAL_TAG_POKEMON_633},
-	{gObjectEventPalette_Pokemon_Species_634, OBJ_EVENT_PAL_TAG_POKEMON_634},
-	{gObjectEventPalette_Pokemon_Species_635, OBJ_EVENT_PAL_TAG_POKEMON_635},
-	{gObjectEventPalette_Pokemon_Species_636, OBJ_EVENT_PAL_TAG_POKEMON_636},
-	{gObjectEventPalette_Pokemon_Species_637, OBJ_EVENT_PAL_TAG_POKEMON_637},
-	{gObjectEventPalette_Pokemon_Species_638, OBJ_EVENT_PAL_TAG_POKEMON_638},
-	{gObjectEventPalette_Pokemon_Species_639, OBJ_EVENT_PAL_TAG_POKEMON_639},
-	{gObjectEventPalette_Pokemon_Species_640, OBJ_EVENT_PAL_TAG_POKEMON_640},
-	{gObjectEventPalette_Pokemon_Species_641, OBJ_EVENT_PAL_TAG_POKEMON_641},
-	{gObjectEventPalette_Pokemon_Species_642, OBJ_EVENT_PAL_TAG_POKEMON_642},
-	{gObjectEventPalette_Pokemon_Species_643, OBJ_EVENT_PAL_TAG_POKEMON_643},
-	{gObjectEventPalette_Pokemon_Species_644, OBJ_EVENT_PAL_TAG_POKEMON_644},
-	{gObjectEventPalette_Pokemon_Species_645, OBJ_EVENT_PAL_TAG_POKEMON_645},
-	{gObjectEventPalette_Pokemon_Species_646, OBJ_EVENT_PAL_TAG_POKEMON_646},
-	{gObjectEventPalette_Pokemon_Species_647, OBJ_EVENT_PAL_TAG_POKEMON_647},
-	{gObjectEventPalette_Pokemon_Species_648, OBJ_EVENT_PAL_TAG_POKEMON_648},
-	{gObjectEventPalette_Pokemon_Species_649, OBJ_EVENT_PAL_TAG_POKEMON_649},
-	{gObjectEventPalette_Pokemon_Species_650, OBJ_EVENT_PAL_TAG_POKEMON_650},
-	{gObjectEventPalette_Pokemon_Species_651, OBJ_EVENT_PAL_TAG_POKEMON_651},
-	{gObjectEventPalette_Pokemon_Species_652, OBJ_EVENT_PAL_TAG_POKEMON_652},
-	{gObjectEventPalette_Pokemon_Species_653, OBJ_EVENT_PAL_TAG_POKEMON_653},
-	{gObjectEventPalette_Pokemon_Species_654, OBJ_EVENT_PAL_TAG_POKEMON_654},
-	{gObjectEventPalette_Pokemon_Species_655, OBJ_EVENT_PAL_TAG_POKEMON_655},
-	{gObjectEventPalette_Pokemon_Species_656, OBJ_EVENT_PAL_TAG_POKEMON_656},
-	{gObjectEventPalette_Pokemon_Species_657, OBJ_EVENT_PAL_TAG_POKEMON_657},
-	{gObjectEventPalette_Pokemon_Species_658, OBJ_EVENT_PAL_TAG_POKEMON_658},
-	{gObjectEventPalette_Pokemon_Species_659, OBJ_EVENT_PAL_TAG_POKEMON_659},
-	{gObjectEventPalette_Pokemon_Species_660, OBJ_EVENT_PAL_TAG_POKEMON_660},
-	{gObjectEventPalette_Pokemon_Species_661, OBJ_EVENT_PAL_TAG_POKEMON_661},
-	{gObjectEventPalette_Pokemon_Species_662, OBJ_EVENT_PAL_TAG_POKEMON_662},
-	{gObjectEventPalette_Pokemon_Species_663, OBJ_EVENT_PAL_TAG_POKEMON_663},
-	{gObjectEventPalette_Pokemon_Species_664, OBJ_EVENT_PAL_TAG_POKEMON_664},
-	{gObjectEventPalette_Pokemon_Species_665, OBJ_EVENT_PAL_TAG_POKEMON_665},
-	{gObjectEventPalette_Pokemon_Species_666, OBJ_EVENT_PAL_TAG_POKEMON_666},
-	{gObjectEventPalette_Pokemon_Species_667, OBJ_EVENT_PAL_TAG_POKEMON_667},
-	{gObjectEventPalette_Pokemon_Species_668, OBJ_EVENT_PAL_TAG_POKEMON_668},
-	{gObjectEventPalette_Pokemon_Species_669, OBJ_EVENT_PAL_TAG_POKEMON_669},
-	{gObjectEventPalette_Pokemon_Species_670, OBJ_EVENT_PAL_TAG_POKEMON_670},
-	{gObjectEventPalette_Pokemon_Species_671, OBJ_EVENT_PAL_TAG_POKEMON_671},
-	{gObjectEventPalette_Pokemon_Species_672, OBJ_EVENT_PAL_TAG_POKEMON_672},
-	{gObjectEventPalette_Pokemon_Species_673, OBJ_EVENT_PAL_TAG_POKEMON_673},
-	{gObjectEventPalette_Pokemon_Species_674, OBJ_EVENT_PAL_TAG_POKEMON_674},
-	{gObjectEventPalette_Pokemon_Species_675, OBJ_EVENT_PAL_TAG_POKEMON_675},
-	{gObjectEventPalette_Pokemon_Species_676, OBJ_EVENT_PAL_TAG_POKEMON_676},
-	{gObjectEventPalette_Pokemon_Species_677, OBJ_EVENT_PAL_TAG_POKEMON_677},
-	{gObjectEventPalette_Pokemon_Species_678, OBJ_EVENT_PAL_TAG_POKEMON_678},
-	{gObjectEventPalette_Pokemon_Species_679, OBJ_EVENT_PAL_TAG_POKEMON_679},
-	{gObjectEventPalette_Pokemon_Species_680, OBJ_EVENT_PAL_TAG_POKEMON_680},
-	{gObjectEventPalette_Pokemon_Species_681, OBJ_EVENT_PAL_TAG_POKEMON_681},
-	{gObjectEventPalette_Pokemon_Species_682, OBJ_EVENT_PAL_TAG_POKEMON_682},
-	{gObjectEventPalette_Pokemon_Species_683, OBJ_EVENT_PAL_TAG_POKEMON_683},
-	{gObjectEventPalette_Pokemon_Species_684, OBJ_EVENT_PAL_TAG_POKEMON_684},
-	{gObjectEventPalette_Pokemon_Species_685, OBJ_EVENT_PAL_TAG_POKEMON_685},
-	{gObjectEventPalette_Pokemon_Species_686, OBJ_EVENT_PAL_TAG_POKEMON_686},
-	{gObjectEventPalette_Pokemon_Species_687, OBJ_EVENT_PAL_TAG_POKEMON_687},
-	{gObjectEventPalette_Pokemon_Species_688, OBJ_EVENT_PAL_TAG_POKEMON_688},
-	{gObjectEventPalette_Pokemon_Species_689, OBJ_EVENT_PAL_TAG_POKEMON_689},
-	{gObjectEventPalette_Pokemon_Species_690, OBJ_EVENT_PAL_TAG_POKEMON_690},
-	{gObjectEventPalette_Pokemon_Species_691, OBJ_EVENT_PAL_TAG_POKEMON_691},
-	{gObjectEventPalette_Pokemon_Species_692, OBJ_EVENT_PAL_TAG_POKEMON_692},
-	{gObjectEventPalette_Pokemon_Species_693, OBJ_EVENT_PAL_TAG_POKEMON_693},
-	{gObjectEventPalette_Pokemon_Species_694, OBJ_EVENT_PAL_TAG_POKEMON_694},
-	{gObjectEventPalette_Pokemon_Species_695, OBJ_EVENT_PAL_TAG_POKEMON_695},
-	{gObjectEventPalette_Pokemon_Species_696, OBJ_EVENT_PAL_TAG_POKEMON_696},
-	{gObjectEventPalette_Pokemon_Species_697, OBJ_EVENT_PAL_TAG_POKEMON_697},
-	{gObjectEventPalette_Pokemon_Species_698, OBJ_EVENT_PAL_TAG_POKEMON_698},
-	{gObjectEventPalette_Pokemon_Species_699, OBJ_EVENT_PAL_TAG_POKEMON_699},
-	{gObjectEventPalette_Pokemon_Species_700, OBJ_EVENT_PAL_TAG_POKEMON_700},
-	{gObjectEventPalette_Pokemon_Species_701, OBJ_EVENT_PAL_TAG_POKEMON_701},
-	{gObjectEventPalette_Pokemon_Species_702, OBJ_EVENT_PAL_TAG_POKEMON_702},
-	{gObjectEventPalette_Pokemon_Species_703, OBJ_EVENT_PAL_TAG_POKEMON_703},
-	{gObjectEventPalette_Pokemon_Species_704, OBJ_EVENT_PAL_TAG_POKEMON_704},
-	{gObjectEventPalette_Pokemon_Species_705, OBJ_EVENT_PAL_TAG_POKEMON_705},
-	{gObjectEventPalette_Pokemon_Species_706, OBJ_EVENT_PAL_TAG_POKEMON_706},
-	{gObjectEventPalette_Pokemon_Species_707, OBJ_EVENT_PAL_TAG_POKEMON_707},
-	{gObjectEventPalette_Pokemon_Species_708, OBJ_EVENT_PAL_TAG_POKEMON_708},
-	{gObjectEventPalette_Pokemon_Species_709, OBJ_EVENT_PAL_TAG_POKEMON_709},
-	{gObjectEventPalette_Pokemon_Species_710, OBJ_EVENT_PAL_TAG_POKEMON_710},
-	{gObjectEventPalette_Pokemon_Species_711, OBJ_EVENT_PAL_TAG_POKEMON_711},
-	{gObjectEventPalette_Pokemon_Species_712, OBJ_EVENT_PAL_TAG_POKEMON_712},
-	{gObjectEventPalette_Pokemon_Species_713, OBJ_EVENT_PAL_TAG_POKEMON_713},
-	{gObjectEventPalette_Pokemon_Species_714, OBJ_EVENT_PAL_TAG_POKEMON_714},
-	{gObjectEventPalette_Pokemon_Species_715, OBJ_EVENT_PAL_TAG_POKEMON_715},
-	{gObjectEventPalette_Pokemon_Species_716, OBJ_EVENT_PAL_TAG_POKEMON_716},
-	{gObjectEventPalette_Pokemon_Species_717, OBJ_EVENT_PAL_TAG_POKEMON_717},
-	{gObjectEventPalette_Pokemon_Species_718, OBJ_EVENT_PAL_TAG_POKEMON_718},
-	{gObjectEventPalette_Pokemon_Species_719, OBJ_EVENT_PAL_TAG_POKEMON_719},
-	{gObjectEventPalette_Pokemon_Species_720, OBJ_EVENT_PAL_TAG_POKEMON_720},
-	{gObjectEventPalette_Pokemon_Species_721, OBJ_EVENT_PAL_TAG_POKEMON_721},
-	{gObjectEventPalette_Pokemon_Species_722, OBJ_EVENT_PAL_TAG_POKEMON_722},
-	{gObjectEventPalette_Pokemon_Species_723, OBJ_EVENT_PAL_TAG_POKEMON_723},
-	{gObjectEventPalette_Pokemon_Species_724, OBJ_EVENT_PAL_TAG_POKEMON_724},
-	{gObjectEventPalette_Pokemon_Species_725, OBJ_EVENT_PAL_TAG_POKEMON_725},
-	{gObjectEventPalette_Pokemon_Species_726, OBJ_EVENT_PAL_TAG_POKEMON_726},
-	{gObjectEventPalette_Pokemon_Species_727, OBJ_EVENT_PAL_TAG_POKEMON_727},
-	{gObjectEventPalette_Pokemon_Species_728, OBJ_EVENT_PAL_TAG_POKEMON_728},
-	{gObjectEventPalette_Pokemon_Species_729, OBJ_EVENT_PAL_TAG_POKEMON_729},
-	{gObjectEventPalette_Pokemon_Species_730, OBJ_EVENT_PAL_TAG_POKEMON_730},
-	{gObjectEventPalette_Pokemon_Species_731, OBJ_EVENT_PAL_TAG_POKEMON_731},
-	{gObjectEventPalette_Pokemon_Species_732, OBJ_EVENT_PAL_TAG_POKEMON_732},
-	{gObjectEventPalette_Pokemon_Species_733, OBJ_EVENT_PAL_TAG_POKEMON_733},
-	{gObjectEventPalette_Pokemon_Species_734, OBJ_EVENT_PAL_TAG_POKEMON_734},
-	{gObjectEventPalette_Pokemon_Species_735, OBJ_EVENT_PAL_TAG_POKEMON_735},
-	{gObjectEventPalette_Pokemon_Species_736, OBJ_EVENT_PAL_TAG_POKEMON_736},
-	{gObjectEventPalette_Pokemon_Species_737, OBJ_EVENT_PAL_TAG_POKEMON_737},
-	{gObjectEventPalette_Pokemon_Species_738, OBJ_EVENT_PAL_TAG_POKEMON_738},
-	{gObjectEventPalette_Pokemon_Species_739, OBJ_EVENT_PAL_TAG_POKEMON_739},
-	{gObjectEventPalette_Pokemon_Species_740, OBJ_EVENT_PAL_TAG_POKEMON_740},
-	{gObjectEventPalette_Pokemon_Species_741, OBJ_EVENT_PAL_TAG_POKEMON_741},
-	{gObjectEventPalette_Pokemon_Species_742, OBJ_EVENT_PAL_TAG_POKEMON_742},
-	{gObjectEventPalette_Pokemon_Species_743, OBJ_EVENT_PAL_TAG_POKEMON_743},
-	{gObjectEventPalette_Pokemon_Species_744, OBJ_EVENT_PAL_TAG_POKEMON_744},
-	{gObjectEventPalette_Pokemon_Species_745, OBJ_EVENT_PAL_TAG_POKEMON_745},
-	{gObjectEventPalette_Pokemon_Species_746, OBJ_EVENT_PAL_TAG_POKEMON_746},
-	{gObjectEventPalette_Pokemon_Species_747, OBJ_EVENT_PAL_TAG_POKEMON_747},
-	{gObjectEventPalette_Pokemon_Species_748, OBJ_EVENT_PAL_TAG_POKEMON_748},
-	{gObjectEventPalette_Pokemon_Species_749, OBJ_EVENT_PAL_TAG_POKEMON_749},
-	{gObjectEventPalette_Pokemon_Species_750, OBJ_EVENT_PAL_TAG_POKEMON_750},
-	{gObjectEventPalette_Pokemon_Species_751, OBJ_EVENT_PAL_TAG_POKEMON_751},
-	{gObjectEventPalette_Pokemon_Species_752, OBJ_EVENT_PAL_TAG_POKEMON_752},
-	{gObjectEventPalette_Pokemon_Species_753, OBJ_EVENT_PAL_TAG_POKEMON_753},
-	{gObjectEventPalette_Pokemon_Species_754, OBJ_EVENT_PAL_TAG_POKEMON_754},
-	{gObjectEventPalette_Pokemon_Species_755, OBJ_EVENT_PAL_TAG_POKEMON_755},
-	{gObjectEventPalette_Pokemon_Species_756, OBJ_EVENT_PAL_TAG_POKEMON_756},
-	{gObjectEventPalette_Pokemon_Species_757, OBJ_EVENT_PAL_TAG_POKEMON_757},
-	{gObjectEventPalette_Pokemon_Species_758, OBJ_EVENT_PAL_TAG_POKEMON_758},
-	{gObjectEventPalette_Pokemon_Species_759, OBJ_EVENT_PAL_TAG_POKEMON_759},
-	{gObjectEventPalette_Pokemon_Species_760, OBJ_EVENT_PAL_TAG_POKEMON_760},
-	{gObjectEventPalette_Pokemon_Species_761, OBJ_EVENT_PAL_TAG_POKEMON_761},
-	{gObjectEventPalette_Pokemon_Species_762, OBJ_EVENT_PAL_TAG_POKEMON_762},
-	{gObjectEventPalette_Pokemon_Species_763, OBJ_EVENT_PAL_TAG_POKEMON_763},
-	{gObjectEventPalette_Pokemon_Species_764, OBJ_EVENT_PAL_TAG_POKEMON_764},
-	{gObjectEventPalette_Pokemon_Species_765, OBJ_EVENT_PAL_TAG_POKEMON_765},
-	{gObjectEventPalette_Pokemon_Species_766, OBJ_EVENT_PAL_TAG_POKEMON_766},
-	{gObjectEventPalette_Pokemon_Species_767, OBJ_EVENT_PAL_TAG_POKEMON_767},
-	{gObjectEventPalette_Pokemon_Species_768, OBJ_EVENT_PAL_TAG_POKEMON_768},
-	{gObjectEventPalette_Pokemon_Species_769, OBJ_EVENT_PAL_TAG_POKEMON_769},
-	{gObjectEventPalette_Pokemon_Species_770, OBJ_EVENT_PAL_TAG_POKEMON_770},
-	{gObjectEventPalette_Pokemon_Species_771, OBJ_EVENT_PAL_TAG_POKEMON_771},
-	{gObjectEventPalette_Pokemon_Species_772, OBJ_EVENT_PAL_TAG_POKEMON_772},
-	{gObjectEventPalette_Pokemon_Species_773, OBJ_EVENT_PAL_TAG_POKEMON_773},
-	{gObjectEventPalette_Pokemon_Species_774, OBJ_EVENT_PAL_TAG_POKEMON_774},
-	{gObjectEventPalette_Pokemon_Species_775, OBJ_EVENT_PAL_TAG_POKEMON_775},
-	{gObjectEventPalette_Pokemon_Species_776, OBJ_EVENT_PAL_TAG_POKEMON_776},
-	{gObjectEventPalette_Pokemon_Species_777, OBJ_EVENT_PAL_TAG_POKEMON_777},
-	{gObjectEventPalette_Pokemon_Species_778, OBJ_EVENT_PAL_TAG_POKEMON_778},
-	{gObjectEventPalette_Pokemon_Species_779, OBJ_EVENT_PAL_TAG_POKEMON_779},
-	{gObjectEventPalette_Pokemon_Species_780, OBJ_EVENT_PAL_TAG_POKEMON_780},
-	{gObjectEventPalette_Pokemon_Species_781, OBJ_EVENT_PAL_TAG_POKEMON_781},
-	{gObjectEventPalette_Pokemon_Species_782, OBJ_EVENT_PAL_TAG_POKEMON_782},
-	{gObjectEventPalette_Pokemon_Species_783, OBJ_EVENT_PAL_TAG_POKEMON_783},
-	{gObjectEventPalette_Pokemon_Species_784, OBJ_EVENT_PAL_TAG_POKEMON_784},
-	{gObjectEventPalette_Pokemon_Species_785, OBJ_EVENT_PAL_TAG_POKEMON_785},
-	{gObjectEventPalette_Pokemon_Species_786, OBJ_EVENT_PAL_TAG_POKEMON_786},
-	{gObjectEventPalette_Pokemon_Species_787, OBJ_EVENT_PAL_TAG_POKEMON_787},
-	{gObjectEventPalette_Pokemon_Species_788, OBJ_EVENT_PAL_TAG_POKEMON_788},
-	{gObjectEventPalette_Pokemon_Species_789, OBJ_EVENT_PAL_TAG_POKEMON_789},
-	{gObjectEventPalette_Pokemon_Species_790, OBJ_EVENT_PAL_TAG_POKEMON_790},
-	{gObjectEventPalette_Pokemon_Species_791, OBJ_EVENT_PAL_TAG_POKEMON_791},
-	{gObjectEventPalette_Pokemon_Species_792, OBJ_EVENT_PAL_TAG_POKEMON_792},
-	{gObjectEventPalette_Pokemon_Species_793, OBJ_EVENT_PAL_TAG_POKEMON_793},
-	{gObjectEventPalette_Pokemon_Species_794, OBJ_EVENT_PAL_TAG_POKEMON_794},
-	{gObjectEventPalette_Pokemon_Species_795, OBJ_EVENT_PAL_TAG_POKEMON_795},
-	{gObjectEventPalette_Pokemon_Species_796, OBJ_EVENT_PAL_TAG_POKEMON_796},
-	{gObjectEventPalette_Pokemon_Species_797, OBJ_EVENT_PAL_TAG_POKEMON_797},
-	{gObjectEventPalette_Pokemon_Species_798, OBJ_EVENT_PAL_TAG_POKEMON_798},
-	{gObjectEventPalette_Pokemon_Species_799, OBJ_EVENT_PAL_TAG_POKEMON_799},
-	{gObjectEventPalette_Pokemon_Species_800, OBJ_EVENT_PAL_TAG_POKEMON_800},
-	{gObjectEventPalette_Pokemon_Species_801, OBJ_EVENT_PAL_TAG_POKEMON_801},
-	{gObjectEventPalette_Pokemon_Species_802, OBJ_EVENT_PAL_TAG_POKEMON_802},
-	{gObjectEventPalette_Pokemon_Species_803, OBJ_EVENT_PAL_TAG_POKEMON_803},
-	{gObjectEventPalette_Pokemon_Species_804, OBJ_EVENT_PAL_TAG_POKEMON_804},
-	{gObjectEventPalette_Pokemon_Species_805, OBJ_EVENT_PAL_TAG_POKEMON_805},
-	{gObjectEventPalette_Pokemon_Species_806, OBJ_EVENT_PAL_TAG_POKEMON_806},
-	{gObjectEventPalette_Pokemon_Species_807, OBJ_EVENT_PAL_TAG_POKEMON_807},
-	{gObjectEventPalette_Pokemon_Species_808, OBJ_EVENT_PAL_TAG_POKEMON_808},
-	{gObjectEventPalette_Pokemon_Species_809, OBJ_EVENT_PAL_TAG_POKEMON_809},
-	{gObjectEventPalette_Pokemon_Species_849, OBJ_EVENT_PAL_TAG_POKEMON_849},
-	{gObjectEventPalette_Pokemon_Species_858, OBJ_EVENT_PAL_TAG_POKEMON_858},
-	{gObjectEventPalette_Pokemon_Species_859, OBJ_EVENT_PAL_TAG_POKEMON_859},
-	{gObjectEventPalette_Pokemon_Species_860, OBJ_EVENT_PAL_TAG_POKEMON_860},
-	{gObjectEventPalette_Pokemon_Species_861, OBJ_EVENT_PAL_TAG_POKEMON_861},
-	{gObjectEventPalette_Pokemon_Species_862, OBJ_EVENT_PAL_TAG_POKEMON_862},
-	{gObjectEventPalette_Pokemon_Species_863, OBJ_EVENT_PAL_TAG_POKEMON_863},
-	{gObjectEventPalette_Pokemon_Species_864, OBJ_EVENT_PAL_TAG_POKEMON_864},
-	{gObjectEventPalette_Pokemon_Species_865, OBJ_EVENT_PAL_TAG_POKEMON_865},
-	{gObjectEventPalette_Pokemon_Species_866, OBJ_EVENT_PAL_TAG_POKEMON_866},
-	{gObjectEventPalette_Pokemon_Species_869, OBJ_EVENT_PAL_TAG_POKEMON_869},
-	{gObjectEventPalette_Pokemon_Species_870, OBJ_EVENT_PAL_TAG_POKEMON_870},
-	{gObjectEventPalette_Pokemon_Species_871, OBJ_EVENT_PAL_TAG_POKEMON_871},
-	{gObjectEventPalette_Pokemon_Species_872, OBJ_EVENT_PAL_TAG_POKEMON_872},
-	{gObjectEventPalette_Pokemon_Species_873, OBJ_EVENT_PAL_TAG_POKEMON_873},
-	{gObjectEventPalette_Pokemon_Species_874, OBJ_EVENT_PAL_TAG_POKEMON_874},
-	{gObjectEventPalette_Pokemon_Species_875, OBJ_EVENT_PAL_TAG_POKEMON_875},
-	{gObjectEventPalette_Pokemon_Species_876, OBJ_EVENT_PAL_TAG_POKEMON_876},
-	{gObjectEventPalette_Pokemon_Species_877, OBJ_EVENT_PAL_TAG_POKEMON_877},
-	{gObjectEventPalette_Pokemon_Species_878, OBJ_EVENT_PAL_TAG_POKEMON_878},
-	{gObjectEventPalette_Pokemon_Species_879, OBJ_EVENT_PAL_TAG_POKEMON_879},
-	{gObjectEventPalette_Pokemon_Species_880, OBJ_EVENT_PAL_TAG_POKEMON_880},
-	{gObjectEventPalette_Pokemon_Species_881, OBJ_EVENT_PAL_TAG_POKEMON_881},
-	{gObjectEventPalette_Pokemon_Species_882, OBJ_EVENT_PAL_TAG_POKEMON_882},
-	{gObjectEventPalette_Pokemon_Species_883, OBJ_EVENT_PAL_TAG_POKEMON_883},
-	{gObjectEventPalette_Pokemon_Species_884, OBJ_EVENT_PAL_TAG_POKEMON_884},
-	{gObjectEventPalette_Pokemon_Species_885, OBJ_EVENT_PAL_TAG_POKEMON_885},
-	{gObjectEventPalette_Pokemon_Species_887, OBJ_EVENT_PAL_TAG_POKEMON_887},
-	{gObjectEventPalette_Pokemon_Species_896, OBJ_EVENT_PAL_TAG_POKEMON_896},
-	{gObjectEventPalette_Pokemon_Species_897, OBJ_EVENT_PAL_TAG_POKEMON_897},
-	{gObjectEventPalette_Pokemon_Species_898, OBJ_EVENT_PAL_TAG_POKEMON_898},
-	{gObjectEventPalette_Pokemon_Species_899, OBJ_EVENT_PAL_TAG_POKEMON_899},
-	{gObjectEventPalette_Pokemon_Species_900, OBJ_EVENT_PAL_TAG_POKEMON_900},
-	{gObjectEventPalette_Pokemon_Species_901, OBJ_EVENT_PAL_TAG_POKEMON_901},
-	{gObjectEventPalette_Pokemon_Species_902, OBJ_EVENT_PAL_TAG_POKEMON_902},
-	{gObjectEventPalette_Pokemon_Species_903, OBJ_EVENT_PAL_TAG_POKEMON_903},
-	{gObjectEventPalette_Pokemon_Species_904, OBJ_EVENT_PAL_TAG_POKEMON_904},
-    {},
-
+#if OW_FOLLOWERS_POKEBALLS
+    {gObjectEventPal_MasterBall,            OBJ_EVENT_PAL_TAG_BALL_MASTER},
+    {gObjectEventPal_UltraBall,             OBJ_EVENT_PAL_TAG_BALL_ULTRA},
+    {gObjectEventPal_GreatBall,             OBJ_EVENT_PAL_TAG_BALL_GREAT},
+    {gObjectEventPal_SafariBall,            OBJ_EVENT_PAL_TAG_BALL_SAFARI},
+    {gObjectEventPal_NetBall,               OBJ_EVENT_PAL_TAG_BALL_NET},
+    {gObjectEventPal_DiveBall,              OBJ_EVENT_PAL_TAG_BALL_DIVE},
+    {gObjectEventPal_NestBall,              OBJ_EVENT_PAL_TAG_BALL_NEST},
+    {gObjectEventPal_RepeatBall,            OBJ_EVENT_PAL_TAG_BALL_REPEAT},
+    {gObjectEventPal_TimerBall,             OBJ_EVENT_PAL_TAG_BALL_TIMER},
+    {gObjectEventPal_LuxuryBall,            OBJ_EVENT_PAL_TAG_BALL_LUXURY},
+    {gObjectEventPal_PremierBall,           OBJ_EVENT_PAL_TAG_BALL_PREMIER},
+    {gObjectEventPal_DuskBall,              OBJ_EVENT_PAL_TAG_BALL_DUSK},
+    {gObjectEventPal_HealBall,              OBJ_EVENT_PAL_TAG_BALL_HEAL},
+    {gObjectEventPal_QuickBall,             OBJ_EVENT_PAL_TAG_BALL_QUICK},
+    {gObjectEventPal_CherishBall,           OBJ_EVENT_PAL_TAG_BALL_CHERISH},
+    {gObjectEventPal_ParkBall,              OBJ_EVENT_PAL_TAG_BALL_PARK},
+    {gObjectEventPal_FastBall,              OBJ_EVENT_PAL_TAG_BALL_FAST},
+    {gObjectEventPal_LevelBall,             OBJ_EVENT_PAL_TAG_BALL_LEVEL},
+    {gObjectEventPal_LureBall,              OBJ_EVENT_PAL_TAG_BALL_LURE},
+    {gObjectEventPal_HeavyBall,             OBJ_EVENT_PAL_TAG_BALL_HEAVY},
+    {gObjectEventPal_LoveBall,              OBJ_EVENT_PAL_TAG_BALL_LOVE},
+    {gObjectEventPal_FriendBall,            OBJ_EVENT_PAL_TAG_BALL_FRIEND},
+    {gObjectEventPal_MoonBall,              OBJ_EVENT_PAL_TAG_BALL_MOON},
+    {gObjectEventPal_SportBall,             OBJ_EVENT_PAL_TAG_BALL_SPORT},
+    {gObjectEventPal_DreamBall,             OBJ_EVENT_PAL_TAG_BALL_DREAM},
+    {gObjectEventPal_BeastBall,             OBJ_EVENT_PAL_TAG_BALL_BEAST},
+    // Gen VIII
+    #ifdef ITEM_STRANGE_BALL
+    {gObjectEventPal_StrangeBall,           OBJ_EVENT_PAL_TAG_BALL_STRANGE},
+    #endif //ITEM_STRANGE_BALL
+#endif //OW_FOLLOWERS_POKEBALLS
+    {gObjectEventPal_Substitute,            OBJ_EVENT_PAL_TAG_SUBSTITUTE},
+    {gObjectEventPaletteEmotes,             OBJ_EVENT_PAL_TAG_EMOTES},
 #ifdef BUGFIX
     {NULL,                                  OBJ_EVENT_PAL_TAG_NONE},
 #else
@@ -3130,8 +1423,7 @@ u8 GetFirstInactiveObjectEventId(void)
 
 u8 GetObjectEventIdByLocalIdAndMap(u8 localId, u8 mapNum, u8 mapGroupId)
 {
-
-    if (localId < OBJ_EVENT_ID_PLAYER)
+    if (localId < OBJ_EVENT_ID_FOLLOWER)
         return GetObjectEventIdByLocalIdAndMapInternal(localId, mapNum, mapGroupId);
 
     return GetObjectEventIdByLocalId(localId);
@@ -3197,7 +1489,15 @@ static u8 InitObjectEventStateFromTemplate(const struct ObjectEventTemplate *tem
     y = template->y + MAP_OFFSET;
     objectEvent->active = TRUE;
     objectEvent->triggerGroundEffectsOnMove = TRUE;
-    objectEvent->graphicsId = template->graphicsId;
+    objectEvent->graphicsId = PackGraphicsId(template);
+    SetObjectEventDynamicGraphicsId(objectEvent);
+    if (objectEvent->graphicsId >= OBJ_EVENT_GFX_MON_BASE)
+    {
+        if (template->script && template->script[0] == 0x7d)
+            objectEvent->shiny = T1_READ_16(&template->script[2]) >> 15;
+        else if (template->trainerRange_berryTreeId)
+            objectEvent->shiny = VarGet(template->trainerRange_berryTreeId) >> 5;
+    }
     objectEvent->movementType = template->movementType;
     objectEvent->localId = template->localId;
     objectEvent->mapNum = mapNum;
@@ -3217,7 +1517,6 @@ static u8 InitObjectEventStateFromTemplate(const struct ObjectEventTemplate *tem
     objectEvent->trainerRange_berryTreeId = template->trainerRange_berryTreeId;
     objectEvent->previousMovementDirection = gInitialMovementTypeFacingDirections[template->movementType];
     SetObjectEventDirection(objectEvent, objectEvent->previousMovementDirection);
-    SetObjectEventDynamicGraphicsId(objectEvent);
     if (sMovementTypeHasRange[objectEvent->movementType])
     {
         if (objectEvent->rangeX == 0)
@@ -3282,6 +1581,8 @@ void RemoveObjectEvent(struct ObjectEvent *objectEvent)
 {
     objectEvent->active = FALSE;
     RemoveObjectEventInternal(objectEvent);
+    // zero potential species info
+    objectEvent->graphicsId = objectEvent->shiny = 0;
 }
 
 void RemoveObjectEventByLocalIdAndMap(u8 localId, u8 mapNum, u8 mapGroup)
@@ -3296,14 +1597,29 @@ void RemoveObjectEventByLocalIdAndMap(u8 localId, u8 mapNum, u8 mapGroup)
 
 static void RemoveObjectEventInternal(struct ObjectEvent *objectEvent)
 {
-    u8 paletteNum;
 
     struct SpriteFrameImage image;
     image.size = GetObjectEventGraphicsInfo(objectEvent->graphicsId)->size;
     gSprites[objectEvent->spriteId].images = &image;
-    paletteNum = gSprites[objectEvent->spriteId].oam.paletteNum;
-    DestroySprite(&gSprites[objectEvent->spriteId]);
-    FieldEffectFreePaletteIfUnused(paletteNum);
+    // It's possible that this function is called while the sprite pointed to `== sDummySprite`, i.e during map resume;
+    // In this case, don't free the palette as `paletteNum` is likely blank dummy data
+    if (!gSprites[objectEvent->spriteId].inUse &&
+        !gSprites[objectEvent->spriteId].oam.paletteNum &&
+        gSprites[objectEvent->spriteId].callback == SpriteCallbackDummy)
+    {
+        DestroySprite(&gSprites[objectEvent->spriteId]);
+    }
+    else
+    {
+        u32 paletteNum = gSprites[objectEvent->spriteId].oam.paletteNum;
+        u16 tileStart;
+        if (OW_GFX_COMPRESS)
+            tileStart = gSprites[objectEvent->spriteId].sheetTileStart;
+        DestroySprite(&gSprites[objectEvent->spriteId]);
+        FieldEffectFreePaletteIfUnused(paletteNum);
+        if (OW_GFX_COMPRESS && tileStart)
+            FieldEffectFreeTilesIfUnused(tileStart);
+    }
 }
 
 void RemoveAllObjectEventsExceptPlayer(void)
@@ -3317,10 +1633,117 @@ void RemoveAllObjectEventsExceptPlayer(void)
     }
 }
 
+// Free a sprite's current tiles and reallocate with a new size
+// Used when changing to a gfx info with a larger size
+static s16 ReallocSpriteTiles(struct Sprite *sprite, u32 byteSize)
+{
+    s16 i;
+    bool32 wasVisible = sprite->invisible;
+    sprite->invisible = TRUE;
+
+    i = CopySprite(sprite, sprite->x, sprite->y, 0xFF);
+    if (i < MAX_SPRITES)
+    {
+        DestroySprite(&gSprites[i]);
+        i = AllocSpriteTiles(byteSize / TILE_SIZE_4BPP);
+        if (i >= 0)
+        {
+            // Fill the allocated area with zeroes
+            // To avoid visual glitches if the frame hasn't been copied yet
+            CpuFastFill16(0, (u8 *)OBJ_VRAM0 + TILE_SIZE_4BPP * i, byteSize);
+            sprite->oam.tileNum = i;
+        }
+    }
+    else
+    {
+        i = -1;
+    }
+    
+    sprite->invisible = wasVisible;
+    return i;
+}
+
+u16 LoadSheetGraphicsInfo(const struct ObjectEventGraphicsInfo *info, u16 uuid, struct Sprite *sprite)
+{
+    u16 tag = info->tileTag;
+    if (tag != TAG_NONE || info->compressed)
+    {
+        // sheet-based gfx
+        u32 sheetSpan = GetSpanPerImage(info->oam->shape, info->oam->size);
+        u16 oldTiles = 0;
+        u16 tileStart;
+        bool32 oldInvisible;
+        if (tag == TAG_NONE)
+            tag = COMP_OW_TILE_TAG_BASE + uuid;
+        
+        if (sprite)
+        {
+            oldInvisible = sprite->invisible;
+            oldTiles = sprite->sheetTileStart;
+            sprite->sheetTileStart = 0; // mark unused
+            // Note: If sprite was not allocated to use a sheet,
+            // the tiles assigned to it will leak here,
+            // as its tileNum will be repointed to the new tileStart
+            // TODO: Unload static tiles!
+        }
+
+        tileStart = GetSpriteTileStartByTag(tag);
+        // sheet not loaded; unload any old tiles and load it
+        if (tileStart == TAG_NONE)
+        {
+            struct SpriteFrameImage image = {.size = info->size, .data = info->images->data};
+            struct SpriteTemplate template = {.tileTag = tag, .images = &image};
+            // Load, then free, in order to avoid displaying garbage data
+            // before sprite's `sheetTileStart` is repointed
+            tileStart = LoadCompressedSpriteSheetByTemplate(&template, TILE_SIZE_4BPP << sheetSpan);
+            if (oldTiles) {
+                FieldEffectFreeTilesIfUnused(oldTiles);
+                // We weren't able to load the sheet;
+                // retry (after having freed), and set sprite to invisible until done
+                if (tileStart <= 0) {
+                    if (sprite)
+                        sprite->invisible = TRUE;
+                    tileStart = LoadCompressedSpriteSheetByTemplate(&template, TILE_SIZE_4BPP << sheetSpan);
+                }
+            }
+        // sheet loaded; unload any *other* sheet for sprite
+        }
+        else if (oldTiles && oldTiles != tileStart)
+        {
+            FieldEffectFreeTilesIfUnused(oldTiles);
+        }
+        
+        if (sprite)
+        {
+            sprite->sheetTileStart = tileStart;
+            sprite->sheetSpan = sheetSpan;
+            sprite->usingSheet = TRUE;
+            sprite->invisible = oldInvisible;
+        }
+    // Going from sheet -> !sheet, reset tile number
+    // (sheet stays loaded)
+    // Note: It's possible to load a non-sheet gfx
+    // larger than the allocated prefix space,
+    // in which case we would have to realloc
+    // TODO: Realloc usingSheet -> !usingSheet larger gfx
+    }
+    else if (sprite && sprite->usingSheet)
+    {
+        sprite->oam.tileNum = sprite->sheetTileStart;
+        sprite->usingSheet = FALSE;
+    
+    }
+    else if (sprite && !sprite->sheetTileStart && sprite->oam.size != info->oam->size)
+    {
+        // Not usingSheet and info size differs; realloc tiles
+        ReallocSpriteTiles(sprite, info->images->size);
+    }
+    return tag;
+}
+
 static u8 TrySetupObjectEventSprite(const struct ObjectEventTemplate *objectEventTemplate, struct SpriteTemplate *spriteTemplate, u8 mapNum, u8 mapGroup, s16 cameraX, s16 cameraY)
 {
     u8 spriteId;
-    //u8 paletteSlot;
     u8 objectEventId;
     struct Sprite *sprite;
     struct ObjectEvent *objectEvent;
@@ -3332,7 +1755,9 @@ static u8 TrySetupObjectEventSprite(const struct ObjectEventTemplate *objectEven
 
     objectEvent = &gObjectEvents[objectEventId];
     graphicsInfo = GetObjectEventGraphicsInfo(objectEvent->graphicsId);
-    if (spriteTemplate->paletteTag != TAG_NONE)
+	//cornix 1.9.0 merge 240804
+    // if (spriteTemplate->paletteTag != TAG_NONE && spriteTemplate->paletteTag != OBJ_EVENT_PAL_TAG_DYNAMIC)
+    if (spriteTemplate->paletteTag != TAG_NONE) 
     {
         LoadObjectEventPalette(spriteTemplate->paletteTag);
         UpdatePaletteGammaType(IndexOfSpritePaletteTag(spriteTemplate->paletteTag), GAMMA_ALT);
@@ -3341,6 +1766,15 @@ static u8 TrySetupObjectEventSprite(const struct ObjectEventTemplate *objectEven
     if (objectEvent->movementType == MOVEMENT_TYPE_INVISIBLE)
         objectEvent->invisible = TRUE;
 
+    if (OW_GFX_COMPRESS)
+        spriteTemplate->tileTag = LoadSheetGraphicsInfo(graphicsInfo, objectEvent->graphicsId, NULL);
+
+    if (objectEvent->graphicsId >= OBJ_EVENT_GFX_MON_BASE + SPECIES_SHINY_TAG)
+    {
+        objectEvent->shiny = TRUE;
+        objectEvent->graphicsId -= SPECIES_SHINY_TAG;
+    }
+
     spriteId = CreateSprite(spriteTemplate, 0, 0, 0);
     if (spriteId == MAX_SPRITES)
     {
@@ -3349,12 +1783,18 @@ static u8 TrySetupObjectEventSprite(const struct ObjectEventTemplate *objectEven
     }
 
     sprite = &gSprites[spriteId];
+    // Use palette from species palette table
+    if (spriteTemplate->paletteTag == OBJ_EVENT_PAL_TAG_DYNAMIC)
+        sprite->oam.paletteNum = LoadDynamicFollowerPalette(OW_SPECIES(objectEvent), OW_FORM(objectEvent), objectEvent->shiny);
+    if (OW_GFX_COMPRESS && sprite->usingSheet)
+        sprite->sheetSpan = GetSpanPerImage(sprite->oam.shape, sprite->oam.size);
     GetMapCoordsFromSpritePos(objectEvent->currentCoords.x + cameraX, objectEvent->currentCoords.y + cameraY, &sprite->x, &sprite->y);
     sprite->centerToCornerVecX = -(graphicsInfo->width >> 1);
     sprite->centerToCornerVecY = -(graphicsInfo->height >> 1);
     sprite->x += 8;
     sprite->y += 16 + sprite->centerToCornerVecY;
-    sprite->oam.paletteNum = IndexOfSpritePaletteTag(spriteTemplate->paletteTag);
+	//CornixSenex removed this line to fix OW_POKEMON palettes loading incorrectly UNLESS called by the ReturnToField function - IDK why it's here or what it does or if / what this breaks...but it works as of now 240804
+    //sprite->oam.paletteNum = IndexOfSpritePaletteTag(spriteTemplate->paletteTag);
     sprite->coordOffsetEnabled = TRUE;
     sprite->sObjEventId = objectEventId;
     objectEvent->spriteId = spriteId;
@@ -3367,16 +1807,40 @@ static u8 TrySetupObjectEventSprite(const struct ObjectEventTemplate *objectEven
     return objectEventId;
 }
 
-u8 TrySpawnObjectEventTemplate(const struct ObjectEventTemplate *objectEventTemplate, u8 mapNum, u8 mapGroup, s16 cameraX, s16 cameraY)
+// Pack pokemon form info into a graphicsId, from a template's script
+static u16 PackGraphicsId(const struct ObjectEventTemplate *template)
+{
+    u16 graphicsId = template->graphicsId;
+    u32 form = 0;
+    // set form based on template's script,
+    // if first command is bufferspeciesname
+    if (graphicsId >= OBJ_EVENT_GFX_MON_BASE)
+    {
+        if (template->script && template->script[0] == 0x7d)
+        {
+            form = T1_READ_16(&template->script[2]);
+            form = (form >> 10) & 0x1F;
+        }
+        else if (template->trainerRange_berryTreeId)
+        {
+            form = template->trainerRange_berryTreeId & 0x1F;
+        }
+        graphicsId |= form << OBJ_EVENT_GFX_SPECIES_BITS;
+    }
+    return graphicsId;
+}
+
+static u8 TrySpawnObjectEventTemplate(const struct ObjectEventTemplate *objectEventTemplate, u8 mapNum, u8 mapGroup, s16 cameraX, s16 cameraY)
 {
     u8 objectEventId;
+    u16 graphicsId = PackGraphicsId(objectEventTemplate);
     struct SpriteTemplate spriteTemplate;
     struct SpriteFrameImage spriteFrameImage;
     const struct ObjectEventGraphicsInfo *graphicsInfo;
     const struct SubspriteTable *subspriteTables = NULL;
 
-    graphicsInfo = GetObjectEventGraphicsInfo(objectEventTemplate->graphicsId);
-    MakeSpriteTemplateFromObjectEventTemplate(objectEventTemplate, &spriteTemplate, &subspriteTables);
+    graphicsInfo = GetObjectEventGraphicsInfo(graphicsId);
+    CopyObjectGraphicsInfoToSpriteTemplate_WithMovementType(graphicsId, objectEventTemplate->movementType, &spriteTemplate, &subspriteTables);
     spriteFrameImage.size = graphicsInfo->size;
     spriteTemplate.images = &spriteFrameImage;
     objectEventId = TrySetupObjectEventSprite(objectEventTemplate, &spriteTemplate, mapNum, mapGroup, cameraX, cameraY);
@@ -3399,7 +1863,6 @@ u8 SpawnSpecialObjectEvent(struct ObjectEventTemplate *objectEventTemplate)
     return TrySpawnObjectEventTemplate(objectEventTemplate, gSaveBlock1Ptr->location.mapNum, gSaveBlock1Ptr->location.mapGroup, cameraX, cameraY);
 }
 
-//DO NOTE CHANGE FOR OVERWORLD EXPANSION
 u8 SpawnSpecialObjectEventParameterized(u16 graphicsId, u8 movementBehavior, u8 localId, s16 x, s16 y, u8 elevation)
 {
     struct ObjectEventTemplate objectEventTemplate;
@@ -3456,30 +1919,65 @@ static void CopyObjectGraphicsInfoToSpriteTemplate_WithMovementType(u16 graphics
     CopyObjectGraphicsInfoToSpriteTemplate(graphicsId, sMovementTypeCallbacks[movementType], spriteTemplate, subspriteTables);
 }
 
-static void MakeSpriteTemplateFromObjectEventTemplate(const struct ObjectEventTemplate *objectEventTemplate, struct SpriteTemplate *spriteTemplate, const struct SubspriteTable **subspriteTables)
+static void UNUSED MakeSpriteTemplateFromObjectEventTemplate(const struct ObjectEventTemplate *objectEventTemplate, struct SpriteTemplate *spriteTemplate, const struct SubspriteTable **subspriteTables)
 {
     CopyObjectGraphicsInfoToSpriteTemplate_WithMovementType(objectEventTemplate->graphicsId, objectEventTemplate->movementType, spriteTemplate, subspriteTables);
 }
 
+// Loads information from graphicsId, with shininess separate
+// also can write palette tag to the template
+static u8 LoadDynamicFollowerPaletteFromGraphicsId(u16 graphicsId, bool8 shiny, struct SpriteTemplate *template)
+{
+    u16 species = ((graphicsId & OBJ_EVENT_GFX_SPECIES_MASK) - OBJ_EVENT_GFX_MON_BASE);
+    u8 form = (graphicsId >> OBJ_EVENT_GFX_SPECIES_BITS);
+    u8 paletteNum = LoadDynamicFollowerPalette(species, form, shiny);
+    if (template)
+        template->paletteTag = species;
+    return paletteNum;
+}
+
 // Used to create a sprite using a graphicsId associated with object events.
 u8 CreateObjectGraphicsSprite(u16 graphicsId, void (*callback)(struct Sprite *), s16 x, s16 y, u8 subpriority)
 {
     struct SpriteTemplate *spriteTemplate;
     const struct SubspriteTable *subspriteTables;
+    const struct ObjectEventGraphicsInfo *graphicsInfo;
     struct Sprite *sprite;
     u8 spriteId;
+    bool32 isShiny = graphicsId >= SPECIES_SHINY_TAG + OBJ_EVENT_GFX_MON_BASE;
+
+    if (isShiny)
+        graphicsId -= SPECIES_SHINY_TAG;
 
     spriteTemplate = Alloc(sizeof(struct SpriteTemplate));
     CopyObjectGraphicsInfoToSpriteTemplate(graphicsId, callback, spriteTemplate, &subspriteTables);
-    if (spriteTemplate->paletteTag != TAG_NONE)
+
+    if (spriteTemplate->paletteTag == OBJ_EVENT_PAL_TAG_DYNAMIC)
+    {
+        u32 paletteNum = LoadDynamicFollowerPaletteFromGraphicsId(graphicsId, isShiny, spriteTemplate);
+        spriteTemplate->paletteTag = GetSpritePaletteTagByPaletteNum(paletteNum);
+    }
+    else if (spriteTemplate->paletteTag != TAG_NONE)
+    {
         LoadObjectEventPalette(spriteTemplate->paletteTag);
+    }
 
+    if (OW_GFX_COMPRESS)
+    {
+        graphicsInfo = GetObjectEventGraphicsInfo(graphicsId);
+        // Checking only for compressed here so as not to mess with decorations
+        if (graphicsInfo->compressed)
+            spriteTemplate->tileTag = LoadSheetGraphicsInfo(graphicsInfo, graphicsId, NULL);
+    }
     spriteId = CreateSprite(spriteTemplate, x, y, subpriority);
+
     Free(spriteTemplate);
 
     if (spriteId != MAX_SPRITES && subspriteTables != NULL)
     {
         sprite = &gSprites[spriteId];
+        if (OW_GFX_COMPRESS && graphicsInfo->compressed)
+            sprite->sheetSpan = GetSpanPerImage(sprite->oam.shape, sprite->oam.size);
         SetSubspriteTables(sprite, subspriteTables);
         sprite->subspriteMode = SUBSPRITES_IGNORE_PRIORITY;
     }
@@ -3512,6 +2010,9 @@ u8 CreateVirtualObject(u16 graphicsId, u8 virtualObjId, s16 x, s16 y, u8 elevati
     x += MAP_OFFSET;
     y += MAP_OFFSET;
     SetSpritePosToOffsetMapCoords(&x, &y, 8, 16);
+    if (spriteTemplate.paletteTag != TAG_NONE)
+        LoadObjectEventPalette(spriteTemplate.paletteTag);
+
     spriteId = CreateSpriteAtEnd(&spriteTemplate, x, y, 0);
     if (spriteId != MAX_SPRITES)
     {
@@ -3542,6 +2043,605 @@ u8 CreateVirtualObject(u16 graphicsId, u8 virtualObjId, s16 x, s16 y, u8 elevati
     return spriteId;
 }
 
+// Return address of first conscious party mon or NULL
+struct Pokemon *GetFirstLiveMon(void)
+{
+    u32 i;
+    for (i = 0; i < PARTY_SIZE; i++)
+    {
+        if (gPlayerParty[i].hp > 0 && !(gPlayerParty[i].box.isEgg || gPlayerParty[i].box.isBadEgg))
+            return &gPlayerParty[i];
+    }
+    return NULL;
+}
+
+// Return follower ObjectEvent or NULL
+struct ObjectEvent *GetFollowerObject(void)
+{
+    u32 i;
+    for (i = 0; i < OBJECT_EVENTS_COUNT; i++)
+    {
+        if (gObjectEvents[i].localId == OBJ_EVENT_ID_FOLLOWER && gObjectEvents[i].active)
+            return &gObjectEvents[i];
+    }
+    return NULL;
+}
+
+// Return graphicsInfo for a pokemon species & form
+static const struct ObjectEventGraphicsInfo *SpeciesToGraphicsInfo(u16 species, u8 form)
+{
+    const struct ObjectEventGraphicsInfo *graphicsInfo = NULL;
+#if OW_POKEMON_OBJECT_EVENTS
+    switch (species)
+    {
+    case SPECIES_UNOWN: // Letters >A are defined as species >= NUM_SPECIES, so are not contiguous with A
+        form %= NUM_UNOWN_FORMS;
+        graphicsInfo = &gSpeciesInfo[form ? SPECIES_UNOWN_B + form - 1 : species].overworldData;
+        break;
+    default:
+        graphicsInfo = &gSpeciesInfo[species].overworldData;
+        break;
+    }
+    // Try to avoid OOB or undefined access
+    if ((graphicsInfo->tileTag == 0 && species < NUM_SPECIES) || (graphicsInfo->tileTag != TAG_NONE && species >= NUM_SPECIES))
+    {
+        if (OW_SUBSTITUTE_PLACEHOLDER)
+            return &gSpeciesInfo[SPECIES_NONE].overworldData;
+        return NULL;
+    }
+#endif // OW_POKEMON_OBJECT_EVENTS
+    return graphicsInfo;
+}
+
+// Find, or load, the palette for the specified pokemon info
+static u8 LoadDynamicFollowerPalette(u16 species, u8 form, bool32 shiny)
+{
+    u32 paletteNum;
+    // Use standalone palette, unless entry is OOB or NULL (fallback to front-sprite-based)
+#if OW_POKEMON_OBJECT_EVENTS == TRUE && OW_PKMN_OBJECTS_SHARE_PALETTES == FALSE
+    if ((shiny && gSpeciesInfo[species].overworldPalette)
+    || (!shiny && gSpeciesInfo[species].overworldShinyPalette))
+    {
+        struct SpritePalette spritePalette;
+        u16 palTag = shiny ? (species + SPECIES_SHINY_TAG + OBJ_EVENT_PAL_TAG_DYNAMIC) : (species + OBJ_EVENT_PAL_TAG_DYNAMIC);
+        // palette already loaded
+        if ((paletteNum = IndexOfSpritePaletteTag(palTag)) < 16) {
+            return paletteNum;
+		}
+        spritePalette.tag = palTag;
+        if (shiny)
+            spritePalette.data = gSpeciesInfo[species].overworldShinyPalette;
+        else {
+            spritePalette.data = gSpeciesInfo[species].overworldPalette;
+		}
+        
+        // Check if pal data must be decompressed
+        if (IsLZ77Data(spritePalette.data, PLTT_SIZE_4BPP, PLTT_SIZE_4BPP))
+        {
+            // IsLZ77Data guarantees word-alignment, so casting this is safe
+            LZ77UnCompWram((u32*)spritePalette.data, gDecompressionBuffer);
+            spritePalette.data = (void*)gDecompressionBuffer;
+        }
+        paletteNum = LoadSpritePalette(&spritePalette);
+    }
+    else
+#endif //OW_POKEMON_OBJECT_EVENTS == TRUE && OW_PKMN_OBJECTS_SHARE_PALETTES == FALSE
+    {
+        // Note that the shiny palette tag is `species + SPECIES_SHINY_TAG`, which must be increased with more pokemon
+        // so that palette tags do not overlap
+        const u32 *palette = GetMonSpritePalFromSpecies(species, shiny, FALSE); //ETODO
+        // palette already loaded
+        if ((paletteNum = IndexOfSpritePaletteTag(species)) < 16) {
+            return paletteNum;
+		}
+        // Use matching front sprite's normal/shiny palettes
+        // Load compressed palette
+        LoadCompressedSpritePaletteWithTag(palette, species);
+        paletteNum = IndexOfSpritePaletteTag(species); // Tag is always present
+    }
+
+    if (gWeatherPtr->currWeather != WEATHER_FOG_HORIZONTAL) // don't want to weather blend in fog
+        UpdateSpritePaletteWithWeather(paletteNum);
+
+    return paletteNum;
+}
+
+// Set graphics & sprite for a follower object event by species & shininess.
+static void FollowerSetGraphics(struct ObjectEvent *objEvent, u16 species, u8 form, bool8 shiny)
+{
+    const struct ObjectEventGraphicsInfo *graphicsInfo = SpeciesToGraphicsInfo(species, form);
+    ObjectEventSetGraphics(objEvent, graphicsInfo);
+    objEvent->graphicsId = (OBJ_EVENT_GFX_MON_BASE + species) & OBJ_EVENT_GFX_SPECIES_MASK;
+    objEvent->graphicsId |= form << OBJ_EVENT_GFX_SPECIES_BITS;
+    objEvent->shiny = shiny;
+    if (graphicsInfo->paletteTag == OBJ_EVENT_PAL_TAG_DYNAMIC) // Use palette from species palette table
+    {
+        struct Sprite *sprite = &gSprites[objEvent->spriteId];
+        // Free palette if otherwise unused
+        sprite->inUse = FALSE;
+        FieldEffectFreePaletteIfUnused(sprite->oam.paletteNum);
+        sprite->inUse = TRUE;
+        sprite->oam.paletteNum = LoadDynamicFollowerPalette(species, form, shiny);
+    }
+    else if (gWeatherPtr->currWeather != WEATHER_FOG_HORIZONTAL) // don't want to weather blend in fog
+    {
+        UpdateSpritePaletteWithWeather(gSprites[objEvent->spriteId].oam.paletteNum);
+    }
+}
+
+// Like FollowerSetGraphics, but does not recenter sprite on a metatile
+// Intended to be used for mid-movement form changes, etc.
+static void RefreshFollowerGraphics(struct ObjectEvent *objEvent)
+{
+    u32 species = OW_SPECIES(objEvent);
+    u32 form = OW_FORM(objEvent);
+    u32 shiny = objEvent->shiny;
+    const struct ObjectEventGraphicsInfo *graphicsInfo = SpeciesToGraphicsInfo(species, form);
+    struct Sprite *sprite = &gSprites[objEvent->spriteId];
+    u32 i = FindObjectEventPaletteIndexByTag(graphicsInfo->paletteTag);
+
+    if (graphicsInfo->oam->size != sprite->oam.size)
+    {
+        if (OW_LARGE_OW_SUPPORT && !OW_GFX_COMPRESS)
+            ReallocSpriteTiles(sprite, graphicsInfo->images->size);
+        // Add difference in Y vectors
+        sprite->y += -(graphicsInfo->height >> 1) - sprite->centerToCornerVecY;
+    }
+
+    if (OW_GFX_COMPRESS)
+        LoadSheetGraphicsInfo(graphicsInfo, objEvent->graphicsId, sprite);
+
+    sprite->oam.shape = graphicsInfo->oam->shape;
+    sprite->oam.size = graphicsInfo->oam->size;
+    sprite->images = graphicsInfo->images;
+    sprite->anims = graphicsInfo->anims;
+    sprite->subspriteTables = graphicsInfo->subspriteTables;
+    objEvent->inanimate = graphicsInfo->inanimate;
+    sprite->centerToCornerVecX = -(graphicsInfo->width >> 1);
+    sprite->centerToCornerVecY = -(graphicsInfo->height >> 1);
+
+    if (graphicsInfo->paletteTag == OBJ_EVENT_PAL_TAG_DYNAMIC)
+    {
+        sprite->inUse = FALSE;
+        FieldEffectFreePaletteIfUnused(sprite->oam.paletteNum);
+        sprite->inUse = TRUE;
+        sprite->oam.paletteNum = LoadDynamicFollowerPalette(species, form, shiny);
+    }
+    else if (i != 0xFF)
+    {
+        UpdateSpritePalette(&sObjectEventSpritePalettes[i], sprite);
+        if (gWeatherPtr->currWeather != WEATHER_FOG_HORIZONTAL) // don't want to weather blend in fog
+            UpdateSpritePaletteWithWeather(sprite->oam.paletteNum);
+    }
+}
+
+static u16 GetOverworldCastformSpecies(void)
+{
+    switch (GetCurrentWeather())
+    {
+    case WEATHER_SUNNY_CLOUDS:
+    case WEATHER_DROUGHT:
+        return SPECIES_CASTFORM_SUNNY;
+    case WEATHER_RAIN:
+    case WEATHER_RAIN_THUNDERSTORM:
+    case WEATHER_DOWNPOUR:
+        return SPECIES_CASTFORM_RAINY;
+    case WEATHER_SNOW:
+        return SPECIES_CASTFORM_SNOWY;
+    }
+    return SPECIES_CASTFORM_NORMAL;
+}
+
+static bool8 GetMonInfo(struct Pokemon *mon, u16 *species, u8 *form, u8 *shiny)
+{
+    *form = 0; // default
+    if (!mon)
+    {
+        *species = SPECIES_NONE;
+        *form = 0;
+        *shiny = 0;
+        return FALSE;
+    }
+    *species = GetMonData(mon, MON_DATA_SPECIES);
+    *shiny = IsMonShiny(mon);
+    switch (*species)
+    {
+    case SPECIES_UNOWN:
+        *form = GET_UNOWN_LETTER(mon->box.personality);
+        break;
+    case SPECIES_CASTFORM: // form is based on overworld weather
+        *species = GetOverworldCastformSpecies();
+        break;
+    }
+    return TRUE;
+}
+
+// Retrieve graphic information about the following pokemon, if any
+static bool8 GetFollowerInfo(u16 *species, u8 *form, u8 *shiny)
+{
+    return GetMonInfo(GetFirstLiveMon(), species, form, shiny);
+}
+
+// Update following pokemon if any
+void UpdateFollowingPokemon(void)
+{
+    struct ObjectEvent *objEvent = GetFollowerObject();
+    struct Sprite *sprite;
+    u16 species;
+    bool8 shiny;
+    u8 form;
+    // Don't spawn follower if:
+    // 1. GetFollowerInfo returns FALSE
+    // 2. Map is indoors and gfx is larger than 32x32
+    // 3. flag is set
+    if (OW_POKEMON_OBJECT_EVENTS == FALSE
+     || OW_FOLLOWERS_ENABLED == FALSE
+     || !GetFollowerInfo(&species, &form, &shiny)
+     || SpeciesToGraphicsInfo(species, form) == NULL
+     || (gMapHeader.mapType == MAP_TYPE_INDOOR && SpeciesToGraphicsInfo(species, form)->oam->size > ST_OAM_SIZE_2)
+     || FlagGet(FLAG_TEMP_HIDE_FOLLOWER))
+    {
+        RemoveFollowingPokemon();
+        return;
+    }
+	
+    if (objEvent == NULL)
+    {
+        // Spawn follower
+        u32 objId = gPlayerAvatar.objectEventId;
+        struct ObjectEventTemplate template =
+        {
+            .localId = OBJ_EVENT_ID_FOLLOWER,
+            .graphicsId = OBJ_EVENT_GFX_MON_BASE + species,
+            .flagId = 0,
+            .x = gSaveBlock1Ptr->pos.x,
+            .y = gSaveBlock1Ptr->pos.y,
+            // If player active, copy player elevation
+            .elevation = gObjectEvents[objId].active ? gObjectEvents[objId].currentElevation : 3,
+            .movementType = MOVEMENT_TYPE_FOLLOW_PLAYER,
+            // store form info in template
+            .trainerRange_berryTreeId = (form & 0x1F) | (shiny << 5),
+        };
+        if ((objId = SpawnSpecialObjectEvent(&template)) >= OBJECT_EVENTS_COUNT)
+            return;
+        objEvent = &gObjectEvents[objId];
+        objEvent->invisible = TRUE;
+    }
+    sprite = &gSprites[objEvent->spriteId];
+    // Follower appearance changed; move to player and set invisible
+    if (species != OW_SPECIES(objEvent) || shiny != objEvent->shiny || form != OW_FORM(objEvent))
+    {
+        MoveObjectEventToMapCoords(objEvent,
+                                   gObjectEvents[gPlayerAvatar.objectEventId].currentCoords.x,
+                                   gObjectEvents[gPlayerAvatar.objectEventId].currentCoords.y);
+        FollowerSetGraphics(objEvent, species, form, shiny);
+        objEvent->invisible = TRUE;
+    }
+    sprite->data[6] = 0; // set animation data
+}
+
+// Remove follower object. Idempotent.
+void RemoveFollowingPokemon(void)
+{
+    struct ObjectEvent *objectEvent = GetFollowerObject();
+    if (objectEvent == NULL)
+        return;
+    RemoveObjectEvent(objectEvent);
+}
+
+// Determine whether follower *should* be visible
+static bool32 IsFollowerVisible(void)
+{
+    return !(TestPlayerAvatarFlags(FOLLOWER_INVISIBLE_FLAGS)
+            || MetatileBehavior_IsSurfableWaterOrUnderwater(gObjectEvents[gPlayerAvatar.objectEventId].previousMetatileBehavior)
+            || MetatileBehavior_IsForcedMovementTile(gObjectEvents[gPlayerAvatar.objectEventId].currentMetatileBehavior));
+}
+
+static bool8 SpeciesHasType(u16 species, u8 type)
+{
+    return gSpeciesInfo[species].types[0] == type || gSpeciesInfo[species].types[1] == type;
+}
+
+// Display an emote above an object event
+// Note that this is not a movement action
+static void ObjectEventEmote(struct ObjectEvent *objEvent, u8 emotion)
+{
+    emotion %= FOLLOWER_EMOTION_LENGTH;
+    ObjectEventGetLocalIdAndMap(objEvent, &gFieldEffectArguments[0], &gFieldEffectArguments[1], &gFieldEffectArguments[2]);
+    gFieldEffectArguments[7] = emotion;
+    FieldEffectStart(FLDEFF_EMOTE);
+}
+
+// Find and return direction of metatile behavior within distance
+static u32 FindMetatileBehaviorWithinRange(s32 x, s32 y, u32 mb, u8 distance)
+{
+    s32 i;
+
+    for (i = y + 1; i <= y + distance; i++)
+    {
+        if (MapGridGetMetatileBehaviorAt(x, i) == mb)
+            return DIR_SOUTH;
+    }
+
+    for (i = y - 1; i >= y - distance; i--)
+    {
+        if (MapGridGetMetatileBehaviorAt(x, i) == mb)
+            return DIR_NORTH;
+    }
+
+    for (i = x + 1; i <= x + distance; i++)
+    {
+        if (MapGridGetMetatileBehaviorAt(i, y) == mb)
+            return DIR_EAST;
+    }
+
+    for (i = x - 1; i >= x - distance; i--)
+    {
+        if (MapGridGetMetatileBehaviorAt(i, y) == mb)
+            return DIR_WEST;
+    }
+
+    return DIR_NONE;
+}
+
+// Check a single follower message condition
+bool32 CheckMsgCondition(const struct MsgCondition *cond, struct Pokemon *mon, u32 species, struct ObjectEvent *obj)
+{
+    u32 multi;
+    if (species == SPECIES_NONE)
+        species = GetMonData(mon, MON_DATA_SPECIES);
+
+    switch (cond->type)
+    {
+    case MSG_COND_SPECIES:
+        return (cond->data.raw == species);
+    case MSG_COND_TYPE:
+        multi = (SpeciesHasType(species, cond->data.bytes[0]) ||
+                 SpeciesHasType(species, cond->data.bytes[1]));
+        // if bytes[2] nonzero,
+        // invert; check that mon has *neither* type!
+        if (cond->data.bytes[2] != 0)
+            return !multi;
+        else
+            return multi;
+        break;
+    case MSG_COND_STATUS:
+        return (cond->data.raw & mon->status);
+    case MSG_COND_MAPSEC:
+        return (cond->data.raw == gMapHeader.regionMapSectionId);
+    case MSG_COND_MAP:
+        return (gSaveBlock1Ptr->location.mapGroup == cond->data.bytes[0] &&
+                gSaveBlock1Ptr->location.mapNum == cond->data.bytes[1]);
+    case MSG_COND_ON_MB:
+        return (obj->currentMetatileBehavior == cond->data.bytes[0] ||
+                obj->currentMetatileBehavior == cond->data.bytes[1]);
+    case MSG_COND_WEATHER:
+        multi = GetCurrentWeather();
+        return (multi == cond->data.bytes[0] || multi == cond->data.bytes[1]);
+    case MSG_COND_MUSIC:
+        return (cond->data.raw == GetCurrentMapMusic());
+    // Added on `lighting` branch
+    // case MSG_COND_TIME_OF_DAY:
+    //     break;
+    case MSG_COND_NEAR_MB:
+        multi = FindMetatileBehaviorWithinRange(obj->currentCoords.x,
+                                                obj->currentCoords.y,
+                                                cond->data.bytes[0],
+                                                cond->data.bytes[1]);
+        if (multi)
+            gSpecialVar_Result = multi;
+        return multi;
+    case MSG_COND_NONE:
+    // fallthrough
+    default:
+        return TRUE;
+    }
+}
+
+// Check if follower info can be displayed in the current situation;
+// i.e, if all its conditions match
+bool32 CheckMsgInfo(const struct FollowerMsgInfoExtended *info, struct Pokemon *mon, u32 species, struct ObjectEvent *obj)
+{
+    u32 i;
+
+    if (info->orFlag)
+    {
+        // any condition matches
+        for (i = 0; i < ARRAY_COUNT(info->conditions) && info->conditions[i].type; i++)
+        {
+            if (CheckMsgCondition(&info->conditions[i], mon, species, obj))
+                return TRUE;
+        }
+        return FALSE;
+    }
+    else
+    {
+        // all conditions must match
+        for (i = 0; i < ARRAY_COUNT(info->conditions) && info->conditions[i].type; i++)
+        {
+            if (!CheckMsgCondition(&info->conditions[i], mon, species, obj))
+                return FALSE;
+        }
+        return TRUE;
+    }
+}
+
+// Call an applicable follower message script
+void GetFollowerAction(struct ScriptContext *ctx) // Essentially a big switch for follower messages
+{
+    u32 species;
+    s32 multi;
+    struct SpecialEmote condEmotes[16] = {0};
+    u32 condCount = 0;
+    u32 emotion;
+    struct ObjectEvent *objEvent = GetFollowerObject();
+    struct Pokemon *mon = GetFirstLiveMon();
+    u8 emotion_weight[FOLLOWER_EMOTION_LENGTH] =
+    {
+        [FOLLOWER_EMOTION_HAPPY] = 10,
+        [FOLLOWER_EMOTION_NEUTRAL] = 15,
+        [FOLLOWER_EMOTION_SAD] = 5,
+        [FOLLOWER_EMOTION_UPSET] = 15,
+        [FOLLOWER_EMOTION_ANGRY] = 15,
+        [FOLLOWER_EMOTION_PENSIVE] = 15,
+        [FOLLOWER_EMOTION_LOVE] = 0,
+        [FOLLOWER_EMOTION_SURPRISE] = 10,
+        [FOLLOWER_EMOTION_CURIOUS] = 10,
+        [FOLLOWER_EMOTION_MUSIC] = 15,
+        [FOLLOWER_EMOTION_POISONED] = 0,
+    };
+    u32 i, j;
+    bool32 pickedCondition = FALSE;
+    if (mon == NULL) // failsafe
+    {
+        ScriptCall(ctx, EventScript_FollowerLovesYou);
+        return;
+    }
+    // Set the script to the very end; we'll be calling another script dynamically
+    ScriptJump(ctx, EventScript_FollowerEnd);
+    species = GetMonData(mon, MON_DATA_SPECIES);
+    multi = GetMonData(mon, MON_DATA_FRIENDSHIP);
+    if (multi > 80)
+    {
+        emotion_weight[FOLLOWER_EMOTION_HAPPY] = 20;
+        emotion_weight[FOLLOWER_EMOTION_UPSET] = 5;
+        emotion_weight[FOLLOWER_EMOTION_ANGRY] = 5;
+        emotion_weight[FOLLOWER_EMOTION_LOVE] = 20;
+        emotion_weight[FOLLOWER_EMOTION_MUSIC] = 20;
+    }
+    if (multi > 170)
+    {
+        emotion_weight[FOLLOWER_EMOTION_HAPPY] = 30;
+        emotion_weight[FOLLOWER_EMOTION_LOVE] = 30;
+    }
+    // Special C-based conditions follower
+    // Weather-related
+    if (GetCurrentWeather() == WEATHER_SUNNY_CLOUDS)
+        condEmotes[condCount++] = (struct SpecialEmote) {.emotion = FOLLOWER_EMOTION_HAPPY, .index = 31};
+    // Health & status-related
+    multi = SAFE_DIV(mon->hp * 100, mon->maxHP);
+    if (multi < 20)
+    {
+        emotion_weight[FOLLOWER_EMOTION_SAD] = 30;
+        condEmotes[condCount++] = (struct SpecialEmote) {.emotion = FOLLOWER_EMOTION_SAD, .index = 4};
+        condEmotes[condCount++] = (struct SpecialEmote) {.emotion = FOLLOWER_EMOTION_SAD, .index = 5};
+    }
+    if (multi < 50 || mon->status & STATUS1_PARALYSIS)
+    {
+        emotion_weight[FOLLOWER_EMOTION_SAD] = 30;
+        condEmotes[condCount++] = (struct SpecialEmote) {.emotion = FOLLOWER_EMOTION_SAD, .index = 6};
+    }
+    // Gym type advantage/disadvantage
+    if (GetCurrentMapMusic() == MUS_GYM || GetCurrentMapMusic() == MUS_RG_GYM)
+    {
+        switch (gMapHeader.regionMapSectionId)
+        {
+        case MAPSEC_RUSTBORO_CITY:
+        case MAPSEC_PEWTER_CITY:
+            multi = TYPE_ROCK;
+            break;
+        case MAPSEC_DEWFORD_TOWN:
+            multi = TYPE_FIGHTING;
+            break;
+        case MAPSEC_MAUVILLE_CITY:
+        case MAPSEC_VERMILION_CITY:
+            multi = TYPE_ELECTRIC;
+            break;
+        case MAPSEC_LAVARIDGE_TOWN:
+        case MAPSEC_CINNABAR_ISLAND:
+            multi = TYPE_FIRE;
+            break;
+        case MAPSEC_PETALBURG_CITY:
+            multi = TYPE_NORMAL;
+            break;
+        case MAPSEC_FORTREE_CITY:
+            multi = TYPE_FLYING;
+            break;
+        case MAPSEC_MOSSDEEP_CITY:
+        case MAPSEC_SAFFRON_CITY:
+            multi = TYPE_PSYCHIC;
+            break;
+        case MAPSEC_SOOTOPOLIS_CITY:
+        case MAPSEC_CERULEAN_CITY:
+            multi = TYPE_WATER;
+            break;
+        case MAPSEC_CELADON_CITY:
+            multi = TYPE_GRASS;
+            break;
+        case MAPSEC_FUCHSIA_CITY:
+            multi = TYPE_POISON;
+            break;
+        case MAPSEC_VIRIDIAN_CITY:
+            multi = TYPE_GROUND;
+            break;
+        default:
+            multi = NUMBER_OF_MON_TYPES;
+        }
+        if (multi < NUMBER_OF_MON_TYPES)
+        {
+            multi = GetTypeEffectiveness(mon, multi);
+            if (multi <= UQ_4_12(0.5))
+                condEmotes[condCount++] = (struct SpecialEmote) {.emotion = FOLLOWER_EMOTION_HAPPY, .index = 32};
+            else if (multi >= UQ_4_12(2.0))
+                condEmotes[condCount++] = (struct SpecialEmote) {.emotion = FOLLOWER_EMOTION_SAD, .index = 7};
+        }
+    }
+
+    emotion = RandomWeightedIndex(emotion_weight, FOLLOWER_EMOTION_LENGTH);
+    if ((mon->status & STATUS1_PSN_ANY) && GetMonAbility(mon) != ABILITY_POISON_HEAL)
+        emotion = FOLLOWER_EMOTION_POISONED;
+
+    // end special conditions
+
+    // roll for basic/unconditional message
+    multi = Random() % gFollowerBasicMessages[emotion].length;
+    // (50% chance) Select special condition using reservoir sampling
+    for (i = (Random() & 1) ? condCount : 0, j = 1; i < condCount; i++)
+    {
+        if (condEmotes[i].emotion == emotion && (Random() < 0x10000 / (j++)))  // Replace each item with 1/j chance
+            multi = condEmotes[i].index;
+    }
+    // (50% chance) Match *scripted* conditional messages, from follower_helper.c
+    for (i = (Random() & 1) ? COND_MSG_COUNT : 0, j = 1; i < COND_MSG_COUNT; i++)
+    {
+        const struct FollowerMsgInfoExtended *info = &gFollowerConditionalMessages[i];
+        if (!CheckMsgInfo(info, mon, species, objEvent))
+            continue;
+
+        // replace choice with weight/j chance
+        if (Random() < (0x10000 / (j++)) * (info->weight ? info->weight : 1))
+        {
+            multi = i;
+            pickedCondition = TRUE;
+        }
+    }
+    // condition message was chosen
+    if (pickedCondition)
+    {
+        emotion = gFollowerConditionalMessages[multi].emotion;
+        ObjectEventEmote(objEvent, emotion);
+        ctx->data[0] = (u32) gFollowerConditionalMessages[multi].text;
+        // text choices are spread across array; pick a random one
+        if (gFollowerConditionalMessages[multi].textSpread)
+        {
+            for (i = 0; i < 4; i++)
+            {
+                if (!((u32*)gFollowerConditionalMessages[multi].text)[i])
+                    break;
+            }
+            ctx->data[0] = i ? ((u32*)gFollowerConditionalMessages[multi].text)[Random() % i] : 0;
+        }
+        ScriptCall(ctx, gFollowerConditionalMessages[multi].script ? gFollowerConditionalMessages[multi].script : gFollowerBasicMessages[emotion].script);
+        return;
+    }
+    // otherwise, a basic or C-based message was picked
+    ObjectEventEmote(objEvent, emotion);
+    ctx->data[0] = (u32) gFollowerBasicMessages[emotion].messages[multi].text; // Load message text
+    ScriptCall(ctx, gFollowerBasicMessages[emotion].messages[multi].script ?
+                        gFollowerBasicMessages[emotion].messages[multi].script :
+                        gFollowerBasicMessages[emotion].script);
+}
+
 void TrySpawnObjectEvents(s16 cameraX, s16 cameraY)
 {
     u8 i;
@@ -3590,7 +2690,9 @@ void RemoveObjectEventsOutsideView(void)
         {
             struct ObjectEvent *objectEvent = &gObjectEvents[i];
 
-            if (objectEvent->active && !objectEvent->isPlayer)
+            // Followers should not go OOB, or their sprites may be freed early during a cross-map scripting event,
+            // such as Wally's Ralts catch sequence
+            if (objectEvent->active && !objectEvent->isPlayer && objectEvent->localId != OBJ_EVENT_ID_FOLLOWER)
                 RemoveObjectEventIfOutsideView(objectEvent);
         }
     }
@@ -3614,7 +2716,7 @@ static void RemoveObjectEventIfOutsideView(struct ObjectEvent *objectEvent)
 
 void SpawnObjectEventsOnReturnToField(s16 x, s16 y)
 {
-    u8 i;
+    u32 i;
 
     ClearPlayerAvatarInfo();
     for (i = 0; i < OBJECT_EVENTS_COUNT; i++)
@@ -3628,8 +2730,7 @@ void SpawnObjectEventsOnReturnToField(s16 x, s16 y)
 
 static void SpawnObjectEventOnReturnToField(u8 objectEventId, s16 x, s16 y)
 {
-    u8 i;
-    //u8 paletteSlot;
+    u32 i;
     struct Sprite *sprite;
     struct ObjectEvent *objectEvent;
     struct SpriteTemplate spriteTemplate;
@@ -3646,19 +2747,24 @@ static void SpawnObjectEventOnReturnToField(u8 objectEventId, s16 x, s16 y)
     objectEvent = &gObjectEvents[objectEventId];
     subspriteTables = NULL;
     graphicsInfo = GetObjectEventGraphicsInfo(objectEvent->graphicsId);
-    spriteFrameImage.size = graphicsInfo->size;
     CopyObjectGraphicsInfoToSpriteTemplate_WithMovementType(objectEvent->graphicsId, objectEvent->movementType, &spriteTemplate, &subspriteTables);
+    spriteFrameImage.size = graphicsInfo->size;
     spriteTemplate.images = &spriteFrameImage;
-    if (spriteTemplate.paletteTag != TAG_NONE)
-    {
+
+    if (OW_GFX_COMPRESS)
+        spriteTemplate.tileTag = LoadSheetGraphicsInfo(graphicsInfo, objectEvent->graphicsId, NULL);
+    if (spriteTemplate.paletteTag != TAG_NONE && spriteTemplate.paletteTag != OBJ_EVENT_PAL_TAG_DYNAMIC)
         LoadObjectEventPalette(spriteTemplate.paletteTag);
-        UpdatePaletteGammaType(IndexOfSpritePaletteTag(spriteTemplate.paletteTag), GAMMA_ALT);
-    }
 
     i = CreateSprite(&spriteTemplate, 0, 0, 0);
     if (i != MAX_SPRITES)
     {
         sprite = &gSprites[i];
+        // Use palette from species palette table
+        if (spriteTemplate.paletteTag == OBJ_EVENT_PAL_TAG_DYNAMIC)
+            sprite->oam.paletteNum = LoadDynamicFollowerPalette(OW_SPECIES(objectEvent), OW_FORM(objectEvent), objectEvent->shiny);
+        if (OW_GFX_COMPRESS && sprite->usingSheet)
+            sprite->sheetSpan = GetSpanPerImage(sprite->oam.shape, sprite->oam.size);
         GetMapCoordsFromSpritePos(x + objectEvent->currentCoords.x, y + objectEvent->currentCoords.y, &sprite->x, &sprite->y);
         sprite->centerToCornerVecX = -(graphicsInfo->width >> 1);
         sprite->centerToCornerVecY = -(graphicsInfo->height >> 1);
@@ -3673,7 +2779,6 @@ static void SpawnObjectEventOnReturnToField(u8 objectEventId, s16 x, s16 y)
         if (subspriteTables != NULL)
             SetSubspriteTables(sprite, subspriteTables);
 
-        sprite->oam.paletteNum = IndexOfSpritePaletteTag(spriteTemplate.paletteTag);
         sprite->coordOffsetEnabled = TRUE;
         sprite->sObjEventId = objectEventId;
         objectEvent->spriteId = i;
@@ -3706,42 +2811,99 @@ static void SetPlayerAvatarObjectEventIdAndObjectId(u8 objectEventId, u8 spriteI
     SetPlayerAvatarExtraStateTransition(gObjectEvents[objectEventId].graphicsId, PLAYER_AVATAR_FLAG_CONTROLLABLE);
 }
 
-void ObjectEventSetGraphicsId(struct ObjectEvent *objectEvent, u16 graphicsId)
+// Update sprite's palette, freeing old palette if necessary
+static u8 UpdateSpritePalette(const struct SpritePalette *spritePalette, struct Sprite *sprite)
 {
-    const struct ObjectEventGraphicsInfo *graphicsInfo;
-    struct Sprite *sprite;
-    u8 paletteSlot;
-    graphicsInfo = GetObjectEventGraphicsInfo(graphicsId);
-    sprite = &gSprites[objectEvent->spriteId];
-    paletteSlot = graphicsInfo->paletteSlot;
-    if (paletteSlot == PALSLOT_PLAYER)
-    {
-        PatchObjectPalette(graphicsInfo->paletteTag, graphicsInfo->paletteSlot);
-    }
-    else if (paletteSlot >= 16)
-    {
-        paletteSlot -= 16;
-        _PatchObjectPalette(graphicsInfo->paletteTag, paletteSlot);
-    }
+    // Free palette if otherwise unused
+    sprite->inUse = FALSE;
+    FieldEffectFreePaletteIfUnused(sprite->oam.paletteNum);
+    sprite->inUse = TRUE;
+    return sprite->oam.paletteNum = LoadSpritePalette(spritePalette);
+}
+
+// Find and update based on template's paletteTag
+u8 UpdateSpritePaletteByTemplate(const struct SpriteTemplate *template, struct Sprite *sprite)
+{
+    u8 i = FindObjectEventPaletteIndexByTag(template->paletteTag);
+    if (i == 0xFF)
+        return i;
+    return UpdateSpritePalette(&sObjectEventSpritePalettes[i], sprite);
+}
+
+// Set graphics *by info*
+static void ObjectEventSetGraphics(struct ObjectEvent *objectEvent, const struct ObjectEventGraphicsInfo *graphicsInfo)
+{
+    struct Sprite *sprite = &gSprites[objectEvent->spriteId];
+    u32 i = FindObjectEventPaletteIndexByTag(graphicsInfo->paletteTag);
+    if (i != 0xFF)
+        UpdateSpritePalette(&sObjectEventSpritePalettes[i], sprite);
+
+    // If gfx size changes, we need to reallocate tiles
+    if (OW_LARGE_OW_SUPPORT && !OW_GFX_COMPRESS && graphicsInfo->oam->size != sprite->oam.size)
+        ReallocSpriteTiles(sprite, graphicsInfo->images->size);
+
+    #if OW_GFX_COMPRESS
+    LoadSheetGraphicsInfo(graphicsInfo, objectEvent->graphicsId, sprite);
+    #endif
+
     sprite->oam.shape = graphicsInfo->oam->shape;
     sprite->oam.size = graphicsInfo->oam->size;
     sprite->images = graphicsInfo->images;
     sprite->anims = graphicsInfo->anims;
     sprite->subspriteTables = graphicsInfo->subspriteTables;
-    sprite->oam.paletteNum = paletteSlot;
     objectEvent->inanimate = graphicsInfo->inanimate;
-    objectEvent->graphicsId = graphicsId;
     SetSpritePosToMapCoords(objectEvent->currentCoords.x, objectEvent->currentCoords.y, &sprite->x, &sprite->y);
     sprite->centerToCornerVecX = -(graphicsInfo->width >> 1);
     sprite->centerToCornerVecY = -(graphicsInfo->height >> 1);
     sprite->x += 8;
     sprite->y += 16 + sprite->centerToCornerVecY;
-    UpdateSpritePaletteWithWeather(IndexOfSpritePaletteTag(graphicsInfo->paletteTag)); //not paletteSlot in case of dynamic ow pals
-
     if (objectEvent->trackedByCamera)
         CameraObjectReset();
 }
 
+
+void ObjectEventSetGraphicsId(struct ObjectEvent *objectEvent, u16 graphicsId)
+{
+    objectEvent->graphicsId = graphicsId;
+    ObjectEventSetGraphics(objectEvent, GetObjectEventGraphicsInfo(graphicsId));
+    objectEvent->graphicsId = graphicsId;
+}
+
+//NOTE: This function removed / heavily scaled by in rhh master branch. Expanded in dynamic palettes. Currently have both, only really need one. But the way it is now there's two :D -1.9.0 240802
+//void ObjectEventSetGraphicsId(struct ObjectEvent *objectEvent, u16 graphicsId)
+//{
+//    const struct ObjectEventGraphicsInfo *graphicsInfo;
+//    struct Sprite *sprite;
+//    u8 paletteSlot;
+//    graphicsInfo = GetObjectEventGraphicsInfo(graphicsId);
+//    sprite = &gSprites[objectEvent->spriteId];
+//    paletteSlot = graphicsInfo->paletteSlot;
+//    if (paletteSlot == PALSLOT_PLAYER)
+//    {
+//        PatchObjectPalette(graphicsInfo->paletteTag, graphicsInfo->paletteSlot);
+//    }
+//    else if (paletteSlot >= 16)
+//    {
+//        paletteSlot -= 16;
+//        _PatchObjectPalette(graphicsInfo->paletteTag, paletteSlot);
+//    }
+//    sprite->oam.shape = graphicsInfo->oam->shape;
+//    sprite->oam.size = graphicsInfo->oam->size;
+//    sprite->images = graphicsInfo->images;
+//    sprite->anims = graphicsInfo->anims;
+//    sprite->subspriteTables = graphicsInfo->subspriteTables;
+//    objectEvent->inanimate = graphicsInfo->inanimate;
+//    SetSpritePosToMapCoords(objectEvent->currentCoords.x, objectEvent->currentCoords.y, &sprite->x, &sprite->y);
+//    sprite->centerToCornerVecX = -(graphicsInfo->width >> 1);
+//    sprite->centerToCornerVecY = -(graphicsInfo->height >> 1);
+//    sprite->x += 8;
+//    sprite->y += 16 + sprite->centerToCornerVecY;
+//    UpdateSpritePaletteWithWeather(IndexOfSpritePaletteTag(graphicsInfo->paletteTag)); //not paletteSlot in case of dynamic ow pals
+//
+//    if (objectEvent->trackedByCamera)
+//        CameraObjectReset();
+//}
+
 void ObjectEventSetGraphicsIdByLocalIdAndMap(u8 localId, u8 mapNum, u8 mapGroup, u16 graphicsId)
 {
     u8 objectEventId;
@@ -3773,6 +2935,29 @@ void PlayerObjectTurn(struct PlayerAvatar *playerAvatar, u8 direction)
     ObjectEventTurn(&gObjectEvents[playerAvatar->objectEventId], direction);
 }
 
+static void SetBerryTreeGraphicsById(struct ObjectEvent *objectEvent, u8 berryId, u8 berryStage)
+{
+    const u16 graphicsId = gBerryTreeObjectEventGraphicsIdTable[berryStage];
+    const struct ObjectEventGraphicsInfo *graphicsInfo = GetObjectEventGraphicsInfo(graphicsId);
+    struct Sprite *sprite = &gSprites[objectEvent->spriteId];
+    //UpdateSpritePalette(&sObjectEventSpritePalettes[gBerryTreePaletteSlotTablePointers[berryId][berryStage]-2], sprite);
+    UpdateSpritePalette(&sObjectEventSpritePalettes[gBerryTreePaletteTagTablePointers[berryId][berryStage]-2], sprite);
+    sprite->oam.shape = graphicsInfo->oam->shape;
+    sprite->oam.size = graphicsInfo->oam->size;
+    sprite->images = gBerryTreePicTablePointers[berryId];
+    sprite->anims = graphicsInfo->anims;
+    sprite->subspriteTables = graphicsInfo->subspriteTables;
+    objectEvent->inanimate = graphicsInfo->inanimate;
+    objectEvent->graphicsId = graphicsId;
+    SetSpritePosToMapCoords(objectEvent->currentCoords.x, objectEvent->currentCoords.y, &sprite->x, &sprite->y);
+    sprite->centerToCornerVecX = -(graphicsInfo->width >> 1);
+    sprite->centerToCornerVecY = -(graphicsInfo->height >> 1);
+    sprite->x += 8;
+    sprite->y += 16 + sprite->centerToCornerVecY;
+    if (objectEvent->trackedByCamera)
+        CameraObjectReset();
+}
+
 static void SetBerryTreeGraphics(struct ObjectEvent *objectEvent, struct Sprite *sprite)
 {
     u8 berryStage;
@@ -3792,28 +2977,39 @@ static void SetBerryTreeGraphics(struct ObjectEvent *objectEvent, struct Sprite
 
         LoadObjectEventPalette(gBerryTreePaletteTagTablePointers[berryId][berryStage]);
         ObjectEventSetGraphicsId(objectEvent, gBerryTreeObjectEventGraphicsIdTablePointers[berryId][berryStage]);
-		// The redundant table was removed from the berry thing. I kept it old school for Dynamic Palette fix
-//      ObjectEventSetGraphicsId(objectEvent, gBerryTreeObjectEventGraphicsIdTable[berryStage]);
+
         sprite->images = gBerryTreePicTablePointers[berryId];
         sprite->oam.paletteNum = IndexOfSpritePaletteTag(gBerryTreePaletteTagTablePointers[berryId][berryStage]);
         UpdatePaletteGammaType(sprite->oam.paletteNum, GAMMA_ALT);
+        SetBerryTreeGraphicsById(objectEvent, berryId, berryStage);
         StartSpriteAnim(sprite, berryStage);
     }
 }
 
 const struct ObjectEventGraphicsInfo *GetObjectEventGraphicsInfo(u16 graphicsId)
 {
-    u8 bard;
+    u32 form = 0;
 
-    if (graphicsId >= OBJ_EVENT_GFX_VARS)
+    if (graphicsId >= OBJ_EVENT_GFX_VARS && graphicsId <= OBJ_EVENT_GFX_VAR_F)
         graphicsId = VarGetObjectEventGraphicsId(graphicsId - OBJ_EVENT_GFX_VARS);
 
+    if (graphicsId >= OBJ_EVENT_GFX_MON_BASE + SPECIES_SHINY_TAG)
+        graphicsId -= SPECIES_SHINY_TAG;
+    // graphicsId may contain mon form info
+    if (graphicsId > OBJ_EVENT_GFX_SPECIES_MASK)
+    {
+        form = graphicsId >> OBJ_EVENT_GFX_SPECIES_BITS;
+        graphicsId = graphicsId & OBJ_EVENT_GFX_SPECIES_MASK;
+    }
+
     if (graphicsId == OBJ_EVENT_GFX_BARD)
     {
-        bard = GetCurrentMauvilleOldMan();
-        return gMauvilleOldManGraphicsInfoPointers[bard];
+        return gMauvilleOldManGraphicsInfoPointers[GetCurrentMauvilleOldMan()];
     }
 
+    if (graphicsId >= OBJ_EVENT_GFX_MON_BASE)
+        return SpeciesToGraphicsInfo(graphicsId - OBJ_EVENT_GFX_MON_BASE, form);
+
     if (graphicsId >= NUM_OBJ_EVENT_GFX)
         graphicsId = OBJ_EVENT_GFX_NINJA_BOY;
 
@@ -3822,7 +3018,7 @@ const struct ObjectEventGraphicsInfo *GetObjectEventGraphicsInfo(u16 graphicsId)
 
 static void SetObjectEventDynamicGraphicsId(struct ObjectEvent *objectEvent)
 {
-    if (objectEvent->graphicsId >= OBJ_EVENT_GFX_VARS)
+    if (objectEvent->graphicsId >= OBJ_EVENT_GFX_VARS && objectEvent->graphicsId <= OBJ_EVENT_GFX_VAR_F)
         objectEvent->graphicsId = VarGetObjectEventGraphicsId(objectEvent->graphicsId - OBJ_EVENT_GFX_VARS);
 }
 
@@ -3901,17 +3097,28 @@ void FreeAndReserveObjectSpritePalettes(void)
     gReservedSpritePaletteCount = OBJ_PALSLOT_COUNT;
 }
 
-void LoadObjectEventPalette(u16 paletteTag)
+u8 LoadObjectEventPalette(u16 paletteTag)
 {
     u16 i = FindObjectEventPaletteIndexByTag(paletteTag);
+    if (i == 0xFF)
+        return i;
+    return LoadSpritePaletteIfTagExists(&sObjectEventSpritePalettes[i]);
+}
 
-// FindObjectEventPaletteIndexByTag returns 0xFF on failure, not OBJ_EVENT_PAL_TAG_NONE.
-#ifdef BUGFIX
-    if (i != 0xFF)
-#else
-    if (i != OBJ_EVENT_PAL_TAG_NONE)
-#endif
-        LoadSpritePaletteIfTagExists(&sObjectEventSpritePalettes[i]);
+u8 LoadPlayerObjectEventPalette(u8 gender)
+{
+    u16 paletteTag;
+    switch (gender)
+    {
+        default:
+        case MALE:
+            paletteTag = OBJ_EVENT_PAL_TAG_BRENDAN;
+            break;
+        case FEMALE:
+            paletteTag = OBJ_EVENT_PAL_TAG_MAY;
+            break;
+    }
+    return LoadObjectEventPalette(paletteTag);
 }
 
 static void UNUSED LoadObjectEventPaletteSet(u16 *paletteTags)
@@ -3924,10 +3131,11 @@ static void UNUSED LoadObjectEventPaletteSet(u16 *paletteTags)
 
 static u8 LoadSpritePaletteIfTagExists(const struct SpritePalette *spritePalette)
 {
-    if (IndexOfSpritePaletteTag(spritePalette->tag) != 0xFF)
-        return 0xFF;
-
-    return LoadSpritePalette(spritePalette);
+    u8 paletteNum = IndexOfSpritePaletteTag(spritePalette->tag);
+    if (paletteNum != 0xFF) // don't load twice; return
+        return paletteNum;
+    paletteNum = LoadSpritePalette(spritePalette);
+    return paletteNum;
 }
 
 void PatchObjectPalette(u16 paletteTag, u8 paletteSlot)
@@ -4007,11 +3215,6 @@ void LoadSpecialObjectReflectionPalette(u16 tag, u8 slot)
 }
 */
 
-static void _PatchObjectPalette(u16 tag, u8 slot)
-{
-    PatchObjectPalette(tag, slot);
-}
-
 static void UNUSED IncrementObjectEventCoords(struct ObjectEvent *objectEvent, s16 x, s16 y)
 {
     objectEvent->previousCoords.x = objectEvent->currentCoords.x;
@@ -4278,7 +3481,9 @@ void SetObjectEventDirection(struct ObjectEvent *objectEvent, u8 direction)
 
 static const u8 *GetObjectEventScriptPointerByLocalIdAndMap(u8 localId, u8 mapNum, u8 mapGroup)
 {
-    return GetObjectEventTemplateByLocalIdAndMap(localId, mapNum, mapGroup)->script;  
+    if (localId == OBJ_EVENT_ID_FOLLOWER)
+        return EventScript_Follower;
+    return GetObjectEventTemplateByLocalIdAndMap(localId, mapNum, mapGroup)->script;
 }
 
 const u8 *GetObjectEventScriptPointerByObjectEventId(u8 objectEventId)
@@ -6040,74 +5245,475 @@ bool8 MovementType_CopyPlayer_Step0(struct ObjectEvent *objectEvent, struct Spri
     return TRUE;
 }
 
-bool8 MovementType_CopyPlayer_Step1(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+bool8 MovementType_CopyPlayer_Step1(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    if (gObjectEvents[gPlayerAvatar.objectEventId].movementActionId == MOVEMENT_ACTION_NONE || gPlayerAvatar.tileTransitionState == T_TILE_CENTER)
+        return FALSE;
+
+    return gCopyPlayerMovementFuncs[PlayerGetCopyableMovement()](objectEvent, sprite, GetPlayerMovementDirection(), NULL);
+}
+
+bool8 MovementType_CopyPlayer_Step2(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    if (ObjectEventExecSingleMovementAction(objectEvent, sprite))
+    {
+        objectEvent->singleMovementActive = FALSE;
+        sprite->sTypeFuncId = 1;
+    }
+    return FALSE;
+}
+
+bool8 CopyablePlayerMovement_None(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+{
+    return FALSE;
+}
+
+bool8 CopyablePlayerMovement_FaceDirection(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+{
+    ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, playerDirection)));
+    objectEvent->singleMovementActive = TRUE;
+    sprite->sTypeFuncId = 2;
+    return TRUE;
+}
+
+bool8 CopyablePlayerMovement_WalkNormal(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+{
+    u32 direction;
+    s16 x;
+    s16 y;
+
+    direction = playerDirection;
+    if (ObjectEventIsFarawayIslandMew(objectEvent))
+    {
+        direction = GetMewMoveDirection();
+        if (direction == DIR_NONE)
+        {
+            direction = playerDirection;
+            direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
+            ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
+            ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
+            objectEvent->singleMovementActive = TRUE;
+            sprite->sTypeFuncId = 2;
+            return TRUE;
+        }
+    }
+    else
+    {
+        direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
+    }
+    ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
+    ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkNormalMovementAction(direction));
+
+    if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
+
+    objectEvent->singleMovementActive = TRUE;
+    sprite->sTypeFuncId = 2;
+    return TRUE;
+}
+
+bool8 CopyablePlayerMovement_WalkFast(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+{
+    u32 direction;
+    s16 x;
+    s16 y;
+
+    direction = playerDirection;
+    direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
+    ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
+    ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkFastMovementAction(direction));
+
+    if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
+
+    objectEvent->singleMovementActive = TRUE;
+    sprite->sTypeFuncId = 2;
+    return TRUE;
+}
+
+bool8 CopyablePlayerMovement_WalkFaster(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+{
+    u32 direction;
+    s16 x;
+    s16 y;
+
+    direction = playerDirection;
+    direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
+    ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
+    ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkFasterMovementAction(direction));
+
+    if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
+
+    objectEvent->singleMovementActive = TRUE;
+    sprite->sTypeFuncId = 2;
+    return TRUE;
+}
+
+bool8 CopyablePlayerMovement_Slide(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+{
+    u32 direction;
+    s16 x;
+    s16 y;
+
+    direction = playerDirection;
+    direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
+    ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
+    ObjectEventSetSingleMovement(objectEvent, sprite, GetSlideMovementAction(direction));
+
+    if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
+
+    objectEvent->singleMovementActive = TRUE;
+    sprite->sTypeFuncId = 2;
+    return TRUE;
+}
+
+bool8 CopyablePlayerMovement_JumpInPlace(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+{
+    u32 direction;
+
+    direction = playerDirection;
+    direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
+    ObjectEventSetSingleMovement(objectEvent, sprite, GetJumpInPlaceMovementAction(direction));
+    objectEvent->singleMovementActive = TRUE;
+    sprite->sTypeFuncId = 2;
+    return TRUE;
+}
+
+bool8 CopyablePlayerMovement_Jump(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+{
+    u32 direction;
+    s16 x;
+    s16 y;
+
+    direction = playerDirection;
+    direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
+    ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
+    ObjectEventSetSingleMovement(objectEvent, sprite, GetJumpMovementAction(direction));
+
+    if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
+
+    objectEvent->singleMovementActive = TRUE;
+    sprite->sTypeFuncId = 2;
+    return TRUE;
+}
+
+bool8 CopyablePlayerMovement_Jump2(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+{
+    u32 direction;
+    s16 x;
+    s16 y;
+
+    direction = playerDirection;
+    direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
+    x = objectEvent->currentCoords.x;
+    y = objectEvent->currentCoords.y;
+    MoveCoordsInDirection(direction, &x, &y, 2, 2);
+    ObjectEventSetSingleMovement(objectEvent, sprite, GetJump2MovementAction(direction));
+
+    if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
+
+    objectEvent->singleMovementActive = TRUE;
+    sprite->sTypeFuncId = 2;
+    return TRUE;
+}
+
+static bool32 EndFollowerTransformEffect(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    if (!sprite)
+        return FALSE;
+    SetGpuReg(REG_OFFSET_MOSAIC, 0);
+    if (!sprite->data[7])
+        return FALSE;
+    sprite->oam.mosaic = FALSE;
+    sprite->data[7] = 0;
+    return FALSE;
+}
+
+static bool32 TryStartFollowerTransformEffect(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    u32 multi;
+    if (GET_BASE_SPECIES_ID(OW_SPECIES(objectEvent)) == SPECIES_CASTFORM
+        && OW_SPECIES(objectEvent) != (multi = GetOverworldCastformSpecies()))
+    {
+        sprite->data[7] = TRANSFORM_TYPE_WEATHER << 8;
+        return TRUE;
+    }
+    else if ((Random() & 0xFFFF) < 18 && GetLocalWildMon(FALSE)
+            && (OW_SPECIES(objectEvent) == SPECIES_MEW || OW_SPECIES(objectEvent) == SPECIES_DITTO))
+    {
+        sprite->data[7] = TRANSFORM_TYPE_RANDOM_WILD << 8;
+        PlaySE(SE_M_MINIMIZE);
+        return TRUE;
+    }
+    return FALSE;
+}
+
+static bool8 UpdateFollowerTransformEffect(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    u8 type = sprite->data[7] >> 8;
+    u8 frames = sprite->data[7] & 0xFF;
+    u8 stretch;
+    u32 multi;
+    if (!type)
+        return TryStartFollowerTransformEffect(objectEvent, sprite);
+    sprite->oam.mosaic = TRUE;
+    if (frames < 8)
+        stretch = frames >> 1;
+    else if (frames < 16)
+        stretch = (16 - frames) >> 1;
+    else
+        return EndFollowerTransformEffect(objectEvent, sprite);
+
+    if (frames == 8)
+    {
+        switch (type)
+        {
+        case TRANSFORM_TYPE_PERMANENT:
+            RefreshFollowerGraphics(objectEvent);
+            break;
+        case TRANSFORM_TYPE_WEATHER:
+            multi = objectEvent->graphicsId;
+            objectEvent->graphicsId = GetOverworldCastformSpecies();
+            if (!objectEvent->graphicsId)
+            {
+                objectEvent->graphicsId = multi;
+                break;
+            }
+            objectEvent->graphicsId += OBJ_EVENT_GFX_MON_BASE;
+            RefreshFollowerGraphics(objectEvent);
+            break;
+        case TRANSFORM_TYPE_RANDOM_WILD:
+            multi = objectEvent->graphicsId;
+            objectEvent->graphicsId = GetLocalWildMon(FALSE);
+            if (!objectEvent->graphicsId)
+            {
+                objectEvent->graphicsId = multi;
+                break;
+            }
+            objectEvent->graphicsId += OBJ_EVENT_GFX_MON_BASE;
+            RefreshFollowerGraphics(objectEvent);
+            objectEvent->graphicsId = multi;
+            break;
+        }
+    }
+
+    SetGpuReg(REG_OFFSET_MOSAIC, (stretch << 12) | (stretch << 8));
+    frames++;
+    sprite->data[7] = (sprite->data[7] & 0xFF00) | frames;
+    return TRUE;
+}
+
+movement_type_def(MovementType_FollowPlayer, gMovementTypeFuncs_FollowPlayer)
+
+bool8 MovementType_FollowPlayer_Shadow(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    ClearObjectEventMovement(objectEvent, sprite);
+    if (!IsFollowerVisible())
+    {
+        // Shadow player's position
+        objectEvent->invisible = TRUE;
+        MoveObjectEventToMapCoords(objectEvent,
+                                   gObjectEvents[gPlayerAvatar.objectEventId].currentCoords.x,
+                                   gObjectEvents[gPlayerAvatar.objectEventId].currentCoords.y);
+        objectEvent->triggerGroundEffectsOnMove = FALSE; // Stop endless reflection spawning
+        return FALSE;
+    }
+    // Move follower to player, in case we end up in the shadowing state for only 1 frame
+    // This way the player cannot talk to the invisible follower before it appears
+    if (objectEvent->invisible)
+    {
+        MoveObjectEventToMapCoords(objectEvent,
+                                   gObjectEvents[gPlayerAvatar.objectEventId].currentCoords.x,
+                                   gObjectEvents[gPlayerAvatar.objectEventId].currentCoords.y);
+        objectEvent->triggerGroundEffectsOnMove = FALSE; // Stop endless reflection spawning
+    }
+    sprite->sTypeFuncId = 1; // Enter active state; if the player moves the follower will appear
+    return TRUE;
+}
+
+bool8 MovementType_FollowPlayer_Active(struct ObjectEvent *objectEvent, struct Sprite *sprite)
 {
-    if (gObjectEvents[gPlayerAvatar.objectEventId].movementActionId == MOVEMENT_ACTION_NONE || gPlayerAvatar.tileTransitionState == T_TILE_CENTER)
-        return FALSE;
-
-    return gCopyPlayerMovementFuncs[PlayerGetCopyableMovement()](objectEvent, sprite, GetPlayerMovementDirection(), NULL);
+    if (!IsFollowerVisible())
+    {
+        if (objectEvent->invisible)
+        {
+            // Return to shadowing state
+            sprite->sTypeFuncId = 0;
+            return FALSE;
+        }
+        // Animate entering pokeball
+        ClearObjectEventMovement(objectEvent, sprite);
+        ObjectEventSetSingleMovement(objectEvent, sprite, MOVEMENT_ACTION_ENTER_POKEBALL);
+        objectEvent->singleMovementActive = 1;
+        sprite->sTypeFuncId = 2; // movement action sets state to 0
+        return TRUE;
+    }
+    return gFollowPlayerMovementFuncs[PlayerGetCopyableMovement()](objectEvent, sprite, GetPlayerMovementDirection(), NULL);
 }
 
-bool8 MovementType_CopyPlayer_Step2(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+bool8 MovementType_FollowPlayer_Moving(struct ObjectEvent *objectEvent, struct Sprite *sprite)
 {
+    #ifdef MB_SIDEWAYS_STAIRS_RIGHT_SIDE
+    // Copied from ObjectEventExecSingleMovementAction
+    if (gMovementActionFuncs[objectEvent->movementActionId][sprite->sActionFuncId](objectEvent, sprite))
+    {
+        objectEvent->movementActionId = MOVEMENT_ACTION_NONE;
+        sprite->sActionFuncId = 0;
+    #else
     if (ObjectEventExecSingleMovementAction(objectEvent, sprite))
     {
-        objectEvent->singleMovementActive = FALSE;
-        sprite->sTypeFuncId = 1;
+    #endif
+        objectEvent->singleMovementActive = 0;
+        if (sprite->sTypeFuncId) // restore nonzero state
+            sprite->sTypeFuncId = 1;
+    }
+    else if (objectEvent->movementActionId < MOVEMENT_ACTION_EXIT_POKEBALL)
+    {
+        UpdateFollowerTransformEffect(objectEvent, sprite);
+        if (OW_FOLLOWERS_BOBBING == TRUE && (sprite->data[5] & 7) == 2)
+            sprite->y2 ^= -1;
     }
     return FALSE;
 }
 
-bool8 CopyablePlayerMovement_None(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+bool8 FollowablePlayerMovement_Idle(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
 {
+    if (!objectEvent->singleMovementActive)
+    {
+        // walk in place
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkInPlaceNormalMovementAction(objectEvent->facingDirection));
+        sprite->sTypeFuncId = 1;
+        objectEvent->singleMovementActive = 1;
+        return TRUE;
+    }
+    else if (ObjectEventExecSingleMovementAction(objectEvent, sprite))
+    {
+        // finish movement action
+        objectEvent->singleMovementActive = 0;
+    }
+    else if (OW_FOLLOWERS_BOBBING == TRUE && (sprite->data[3] & 7) == 2)
+    {
+        sprite->y2 ^= -1;
+    }
+    UpdateFollowerTransformEffect(objectEvent, sprite);
     return FALSE;
 }
 
-bool8 CopyablePlayerMovement_FaceDirection(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
-{
-    ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, playerDirection)));
-    objectEvent->singleMovementActive = TRUE;
-    sprite->sTypeFuncId = 2;
-    return TRUE;
-}
-
-bool8 CopyablePlayerMovement_WalkNormal(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+bool8 FollowablePlayerMovement_Step(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
 {
     u32 direction;
     s16 x;
     s16 y;
+    s16 targetX;
+    s16 targetY;
+    #ifdef MB_SIDEWAYS_STAIRS_RIGHT_SIDE
+    u32 playerAction = gObjectEvents[gPlayerAvatar.objectEventId].movementActionId;
+    #endif
 
-    direction = playerDirection;
-    if (ObjectEventIsFarawayIslandMew(objectEvent))
+    targetX = gObjectEvents[gPlayerAvatar.objectEventId].previousCoords.x;
+    targetY = gObjectEvents[gPlayerAvatar.objectEventId].previousCoords.y;
+    x = gObjectEvents[gPlayerAvatar.objectEventId].currentCoords.x;
+    y = gObjectEvents[gPlayerAvatar.objectEventId].currentCoords.y;
+
+    if ((x == targetX && y == targetY) || !IsFollowerVisible()) // don't move on player collision or if not visible
+        return FALSE;
+
+    x = objectEvent->currentCoords.x;
+    y = objectEvent->currentCoords.y;
+    ClearObjectEventMovement(objectEvent, sprite);
+
+    if (objectEvent->invisible)
     {
-        direction = GetMewMoveDirection();
-        if (direction == DIR_NONE)
+        // Animate exiting pokeball
+        // Player is jumping, but follower is invisible
+        if (PlayerGetCopyableMovement() == COPY_MOVE_JUMP2)
         {
-            direction = playerDirection;
-            direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
-            ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
-            ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
-            objectEvent->singleMovementActive = TRUE;
-            sprite->sTypeFuncId = 2;
-            return TRUE;
+            sprite->sTypeFuncId = 0; // return to shadowing state
+            return FALSE;
         }
+        MoveObjectEventToMapCoords(objectEvent, targetX, targetY);
+        ObjectEventSetSingleMovement(objectEvent, sprite, MOVEMENT_ACTION_EXIT_POKEBALL);
+        objectEvent->singleMovementActive = 1;
+        sprite->sTypeFuncId = 2;
+        if (OW_FOLLOWERS_BOBBING == TRUE)
+            sprite->y2 = 0;
+        return TRUE;
     }
-    else
+    else if (x == targetX && y == targetY)
     {
-        direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
+        // don't move if already in the player's last position
+        return FALSE;
     }
-    ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
-    ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkNormalMovementAction(direction));
 
-    if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
-        ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
-
-    objectEvent->singleMovementActive = TRUE;
+    // Follow player
+    direction = GetDirectionToFace(x, y, targetX, targetY);
+    MoveCoords(direction, &x, &y);
+    #ifdef MB_SIDEWAYS_STAIRS_RIGHT_SIDE // https://github.com/ghoulslash/pokeemerald/tree/sideways_stairs
+    GetCollisionAtCoords(objectEvent, x, y, direction); // Sets directionOverwrite for stairs
+    if (GetLedgeJumpDirection(x, y, direction) != DIR_NONE)
+	{
+        // InitJumpRegular will set the proper speed
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetJump2MovementAction(direction));
+	}
+    else if (TestPlayerAvatarFlags(PLAYER_AVATAR_FLAG_DASH))
+    {
+        // Set follow speed according to player's speed
+        if (playerAction >= MOVEMENT_ACTION_RUN_DOWN_SLOW && playerAction <= MOVEMENT_ACTION_RUN_RIGHT_SLOW)
+            objectEvent->movementActionId = GetWalkNormalMovementAction(direction);
+        else
+            objectEvent->movementActionId = GetWalkFastMovementAction(direction);
+    }
+    else if (PlayerGetCopyableMovement() == COPY_MOVE_JUMP2)
+    {
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkSlowMovementAction(direction));
+    }
+    else
+    {
+        if (playerAction >= MOVEMENT_ACTION_WALK_SLOW_DOWN && playerAction <= MOVEMENT_ACTION_WALK_SLOW_RIGHT)
+        {
+            ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkSlowMovementAction(direction));
+        }
+        else
+        {
+            objectEvent->movementActionId = GetWalkNormalMovementAction(direction);
+            if (OW_FOLLOWERS_BOBBING == TRUE)
+                sprite->y2 = -1;
+        }
+    }
+    sprite->sActionFuncId = 0;
+    #else
+    if (GetLedgeJumpDirection(x, y, direction) != DIR_NONE)
+    {
+        // InitJumpRegular will set the proper speed
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetJump2MovementAction(direction));
+    }
+    else if (TestPlayerAvatarFlags(PLAYER_AVATAR_FLAG_DASH))
+    {
+        // Set follow speed according to player's speed
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkFastMovementAction(direction));
+    }
+    else if (PlayerGetCopyableMovement() == COPY_MOVE_JUMP2)
+    {
+        // If *player* jumps, make step take twice as long
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkSlowMovementAction(direction));
+    }
+    else
+    {
+        ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkNormalMovementAction(direction));
+        if (OW_FOLLOWERS_BOBBING == TRUE)
+            sprite->y2 = -1;
+    }
+    #endif
+    objectEvent->singleMovementActive = 1;
     sprite->sTypeFuncId = 2;
     return TRUE;
 }
 
-bool8 CopyablePlayerMovement_WalkFast(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+bool8 FollowablePlayerMovement_GoSpeed1(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
 {
     u32 direction;
     s16 x;
@@ -6117,16 +5723,14 @@ bool8 CopyablePlayerMovement_WalkFast(struct ObjectEvent *objectEvent, struct Sp
     direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
     ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
     ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkFastMovementAction(direction));
-
     if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
         ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
-
     objectEvent->singleMovementActive = TRUE;
     sprite->sTypeFuncId = 2;
     return TRUE;
 }
 
-bool8 CopyablePlayerMovement_WalkFaster(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+bool8 FollowablePlayerMovement_GoSpeed2(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
 {
     u32 direction;
     s16 x;
@@ -6136,16 +5740,14 @@ bool8 CopyablePlayerMovement_WalkFaster(struct ObjectEvent *objectEvent, struct
     direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
     ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
     ObjectEventSetSingleMovement(objectEvent, sprite, GetWalkFasterMovementAction(direction));
-
     if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
         ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
-
     objectEvent->singleMovementActive = TRUE;
     sprite->sTypeFuncId = 2;
     return TRUE;
 }
 
-bool8 CopyablePlayerMovement_Slide(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+bool8 FollowablePlayerMovement_Slide(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
 {
     u32 direction;
     s16 x;
@@ -6155,16 +5757,14 @@ bool8 CopyablePlayerMovement_Slide(struct ObjectEvent *objectEvent, struct Sprit
     direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
     ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
     ObjectEventSetSingleMovement(objectEvent, sprite, GetSlideMovementAction(direction));
-
     if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
         ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
-
     objectEvent->singleMovementActive = TRUE;
     sprite->sTypeFuncId = 2;
     return TRUE;
 }
 
-bool8 CopyablePlayerMovement_JumpInPlace(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+bool8 FollowablePlayerMovement_JumpInPlace(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
 {
     u32 direction;
 
@@ -6176,7 +5776,7 @@ bool8 CopyablePlayerMovement_JumpInPlace(struct ObjectEvent *objectEvent, struct
     return TRUE;
 }
 
-bool8 CopyablePlayerMovement_Jump(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+bool8 FollowablePlayerMovement_GoSpeed4(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
 {
     u32 direction;
     s16 x;
@@ -6186,31 +5786,24 @@ bool8 CopyablePlayerMovement_Jump(struct ObjectEvent *objectEvent, struct Sprite
     direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
     ObjectEventMoveDestCoords(objectEvent, direction, &x, &y);
     ObjectEventSetSingleMovement(objectEvent, sprite, GetJumpMovementAction(direction));
-
     if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
         ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
-
     objectEvent->singleMovementActive = TRUE;
     sprite->sTypeFuncId = 2;
     return TRUE;
 }
 
-bool8 CopyablePlayerMovement_Jump2(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
+bool8 FollowablePlayerMovement_Jump(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 playerDirection, bool8 tileCallback(u8))
 {
     u32 direction;
     s16 x;
     s16 y;
 
     direction = playerDirection;
-    direction = GetCopyDirection(gInitialMovementTypeFacingDirections[objectEvent->movementType], objectEvent->directionSequenceIndex, direction);
     x = objectEvent->currentCoords.x;
     y = objectEvent->currentCoords.y;
     MoveCoordsInDirection(direction, &x, &y, 2, 2);
     ObjectEventSetSingleMovement(objectEvent, sprite, GetJump2MovementAction(direction));
-
-    if (GetCollisionAtCoords(objectEvent, x, y, direction) || (tileCallback != NULL && !tileCallback(MapGridGetMetatileBehaviorAt(x, y))))
-        ObjectEventSetSingleMovement(objectEvent, sprite, GetFaceDirectionMovementAction(direction));
-
     objectEvent->singleMovementActive = TRUE;
     sprite->sTypeFuncId = 2;
     return TRUE;
@@ -6466,7 +6059,7 @@ bool8 MovementType_Invisible_Step2(struct ObjectEvent *objectEvent, struct Sprit
     return FALSE;
 }
 
-static void ClearObjectEventMovement(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+void ClearObjectEventMovement(struct ObjectEvent *objectEvent, struct Sprite *sprite)
 {
     objectEvent->singleMovementActive = FALSE;
     objectEvent->heldMovementActive = FALSE;
@@ -6621,6 +6214,41 @@ u8 GetDirectionToFace(s16 x, s16 y, s16 targetX, s16 targetY)
     return DIR_SOUTH;
 }
 
+// Uses the above, but script accessible, and uses localIds
+void GetDirectionToFaceScript(struct ScriptContext *ctx)
+{
+    u16 *var = GetVarPointer(ScriptReadHalfword(ctx));
+    u8 sourceId = GetObjectEventIdByLocalId(ScriptReadByte(ctx));
+    u8 targetId = GetObjectEventIdByLocalId(ScriptReadByte(ctx));
+    if (var == NULL)
+        return;
+    if (sourceId >= OBJECT_EVENTS_COUNT || targetId >= OBJECT_EVENTS_COUNT)
+        *var = DIR_NONE;
+    else
+        *var = GetDirectionToFace(gObjectEvents[sourceId].currentCoords.x,
+                                  gObjectEvents[sourceId].currentCoords.y,
+                                  gObjectEvents[targetId].currentCoords.x,
+                                  gObjectEvents[targetId].currentCoords.y);
+}
+
+// Whether following pokemon is also the user of the field move
+// Intended to be called before the field effect itself
+void IsFollowerFieldMoveUser(struct ScriptContext *ctx)
+{
+    u16 *var = GetVarPointer(ScriptReadHalfword(ctx));
+    u16 userIndex = gFieldEffectArguments[0]; // field move user index
+    struct Pokemon *follower = GetFirstLiveMon();
+    struct ObjectEvent *obj = GetFollowerObject();
+    if (var == NULL)
+        return;
+    *var = FALSE;
+    if (follower && obj && !obj->invisible)
+    {
+        u16 followIndex = ((u32)follower - (u32)gPlayerParty) / sizeof(struct Pokemon);
+        *var = userIndex == followIndex;
+    }
+}
+
 void SetTrainerMovementType(struct ObjectEvent *objectEvent, u8 movementType)
 {
     objectEvent->movementType = movementType;
@@ -6852,11 +6480,11 @@ static bool8 IsSpecialCollisionWithPlayer(struct ObjectEvent *objectEvent, s16 x
 		if (AreElevationsCompatible(objectEvent->currentElevation, playerObject->currentElevation))
 		{
 			//Check if it's a special Object Event and call correct script
-			if (objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_RAT
-                    || objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_YOUNGSTER
-                    || objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_YOUNGSTER_2
-					|| objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_SNAKE
-					|| objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_DRIFBLIM)
+			if    (objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_RATTATA
+				|| objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_EKANS
+                || objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_YOUNGSTER
+                || objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_YOUNGSTER_2
+				|| objectEvent->graphicsId == OBJ_EVENT_GFX_COLLISION_DRIFBLIM)
 			{
 				//Yes, it's a special collision with player do script
 				script = GetObjectEventScriptPointerByLocalIdAndMap(objectEvent->localId, objectEvent->mapNum, objectEvent->mapGroup);
@@ -6873,12 +6501,14 @@ static bool8 DoesObjectCollideWithObjectAt(struct ObjectEvent *objectEvent, s16
     u8 i;
     struct ObjectEvent *curObject;
 
+    if (objectEvent->localId == OBJ_EVENT_ID_FOLLOWER)
+        return FALSE; // follower cannot collide with other objects, but they can collide with it
+
     for (i = 0; i < OBJECT_EVENTS_COUNT; i++)
     {
         curObject = &gObjectEvents[i];
-        if (curObject->active && curObject != objectEvent)
-        {            
-            // check for collision if curObject is active, not the object in question, and not exempt from collisions
+        if (curObject->active && (curObject->movementType != MOVEMENT_TYPE_FOLLOW_PLAYER || objectEvent != &gObjectEvents[gPlayerAvatar.objectEventId]) && curObject != objectEvent)
+        {
             if ((curObject->currentCoords.x == x && curObject->currentCoords.y == y) || (curObject->previousCoords.x == x && curObject->previousCoords.y == y))
             {
                 if (AreElevationsCompatible(objectEvent->currentElevation, curObject->currentElevation))
@@ -7617,6 +7247,8 @@ enum {
     JUMP_TYPE_HIGH,
     JUMP_TYPE_LOW,
     JUMP_TYPE_NORMAL,
+    JUMP_TYPE_FAST,
+    JUMP_TYPE_FASTER,
 };
 
 static void InitJump(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 direction, u8 distance, u8 type)
@@ -7640,6 +7272,13 @@ static void InitJump(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8
 
 static void InitJumpRegular(struct ObjectEvent *objectEvent, struct Sprite *sprite, u8 direction, u8 distance, u8 type)
 {
+    // For follower only, match the anim duration of the player's movement, whether dashing, walking or jumping
+    if (objectEvent->localId == OBJ_EVENT_ID_FOLLOWER
+      && type == JUMP_TYPE_HIGH
+      && distance == JUMP_DISTANCE_FAR
+      // In some areas (i.e Meteor Falls), the player can jump as the follower jumps, so preserve type in this case
+      && PlayerGetCopyableMovement() != COPY_MOVE_JUMP2)
+        type = TestPlayerAvatarFlags(PLAYER_AVATAR_FLAG_DASH) ? JUMP_TYPE_FASTER : JUMP_TYPE_FAST;
     InitJump(objectEvent, sprite, direction, distance, type);
     SetStepAnimHandleAlternation(objectEvent, sprite, GetMoveDirectionAnimNum(objectEvent->facingDirection));
     DoShadowFieldEffect(objectEvent);
@@ -7936,6 +7575,211 @@ bool8 MovementAction_WalkInPlaceSlowDown_Step0(struct ObjectEvent *objectEvent,
     return MovementAction_WalkInPlaceSlow_Step1(objectEvent, sprite);
 }
 
+// Update sprite with a palette filled with a solid color
+static u8 LoadFillColorPalette(u16 color, u16 paletteTag, struct Sprite *sprite)
+{
+    u16 paletteData[16];
+    struct SpritePalette dynamicPalette = {.tag = paletteTag, .data = paletteData};
+    CpuFill16(color, paletteData, PLTT_SIZE_4BPP);
+    return UpdateSpritePalette(&dynamicPalette, sprite);
+}
+
+static void ObjectEventSetPokeballGfx(struct ObjectEvent *objEvent)
+{
+  #if OW_FOLLOWERS_POKEBALLS
+  u32 ball = BALL_POKE;
+  if (objEvent->localId == OBJ_EVENT_ID_FOLLOWER)
+  {
+      struct Pokemon *mon = GetFirstLiveMon();
+      if (mon)
+          ball = ItemIdToBallId(GetMonData(mon, MON_DATA_POKEBALL));
+  }
+
+  if (ball != BALL_POKE && ball < POKEBALL_COUNT)
+  {
+      const struct ObjectEventGraphicsInfo *info = &gPokeballGraphics[ball];
+      if (info->tileTag == TAG_NONE)
+      {
+          ObjectEventSetGraphics(objEvent, info);
+          return;
+      }
+  }
+  #endif //OW_FOLLOWERS_POKEBALLS
+    ObjectEventSetGraphicsId(objEvent, OBJ_EVENT_GFX_POKE_BALL);
+}
+
+#define sDuration   data[3]
+#define sSpeedFlip  data[6]
+
+bool8 MovementAction_ExitPokeball_Step0(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    u32 direction = gObjectEvents[gPlayerAvatar.objectEventId].facingDirection;
+    u16 graphicsId = objectEvent->graphicsId;
+    objectEvent->invisible = FALSE;
+    if (TestPlayerAvatarFlags(PLAYER_AVATAR_FLAG_DASH))
+    {
+        // If player is dashing, the pokemon must come out faster
+        StartSpriteAnimInDirection(objectEvent, sprite, direction, GetJumpSpecialDirectionAnimNum(direction));
+        sprite->sDuration = 8;
+        sprite->sSpeedFlip = 0; // fast speed
+    }
+    else
+    {
+        StartSpriteAnimInDirection(objectEvent, sprite, direction, GetMoveDirectionFastestAnimNum(direction));
+        sprite->sDuration = 16;
+        sprite->sSpeedFlip = 1; // normal speed
+    }
+    // If mon's right-facing sprite is h-flipped, we need to use a different affine anim
+    if (direction == DIR_EAST && sprite->anims[ANIM_STD_FACE_EAST]->frame.hFlip)
+        sprite->sSpeedFlip |= 1 << 4;
+    ObjectEventSetPokeballGfx(objectEvent);
+    objectEvent->graphicsId = graphicsId;
+    objectEvent->inanimate = FALSE;
+    return MovementAction_ExitPokeball_Step1(objectEvent, sprite);
+}
+
+static const union AffineAnimCmd sAffineAnim_PokeballExit[] =
+{
+    AFFINEANIMCMD_FRAME(0x40, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0x80, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0xC0, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0x100, 0x100, 0, 0),
+    AFFINEANIMCMD_END,
+};
+
+static const union AffineAnimCmd sAffineAnim_PokeballExitEast[] = // sprite is h-flipped when east
+{
+    AFFINEANIMCMD_FRAME(0xFFC0, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0xFF80, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0xFF40, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0xFF00, 0x100, 0, 0),
+    AFFINEANIMCMD_END,
+};
+
+static const union AffineAnimCmd sAffineAnim_PokeballEnter[] =
+{
+    AFFINEANIMCMD_FRAME(0x100, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0xC0, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0x80, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0x40, 0x100, 0, 0),
+    AFFINEANIMCMD_END,
+};
+
+static const union AffineAnimCmd sAffineAnim_PokeballEnterEast[] = // sprtie is h-flipped when east
+{
+    AFFINEANIMCMD_FRAME(0xFF00, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0xFF40, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0xFF80, 0x100, 0, 0),
+    AFFINEANIMCMD_FRAME(0xFFC0, 0x100, 0, 0),
+    AFFINEANIMCMD_END,
+};
+
+static const union AffineAnimCmd *const sAffineAnims_PokeballFollower[] =
+{
+    sAffineAnim_PokeballExit,
+    sAffineAnim_PokeballExitEast,
+    sAffineAnim_PokeballEnter,
+    sAffineAnim_PokeballEnterEast,
+};
+
+bool8 MovementAction_ExitPokeball_Step1(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    // for different speeds, anim steps occur on different frame #s
+    u32 animStepFrame = (sprite->sSpeedFlip & 1) ? 7 : 3; // 0 -> 3, 1 -> 7
+    if (--sprite->sDuration == 0)
+    {
+        sprite->sActionFuncId = 2;
+        sprite->animCmdIndex = 0;
+        sprite->animPaused = TRUE;
+        return TRUE;
+    }
+    // Set graphics, palette, and affine animation
+    else if (sprite->sDuration == animStepFrame)
+    {
+        FollowerSetGraphics(objectEvent, OW_SPECIES(objectEvent), OW_FORM(objectEvent), objectEvent->shiny);
+        LoadFillColorPalette(RGB_WHITE, OBJ_EVENT_PAL_TAG_WHITE, sprite);
+        // Initialize affine animation
+        sprite->affineAnims = sAffineAnims_PokeballFollower;
+        if (OW_LARGE_OW_SUPPORT && !IS_POW_OF_TWO(-sprite->centerToCornerVecX))
+            return FALSE;
+        sprite->affineAnims = sAffineAnims_PokeballFollower;
+        sprite->oam.affineMode = ST_OAM_AFFINE_NORMAL;
+        InitSpriteAffineAnim(sprite);
+        StartSpriteAffineAnim(sprite, sprite->sSpeedFlip >> 4);
+    // Restore original palette & disable affine
+    }
+    else if (sprite->sDuration == (animStepFrame >> 1))
+    {
+        sprite->affineAnimEnded = TRUE;
+        FreeSpriteOamMatrix(sprite);
+        sprite->oam.affineMode = ST_OAM_AFFINE_OFF;
+        FollowerSetGraphics(objectEvent, OW_SPECIES(objectEvent), OW_FORM(objectEvent), objectEvent->shiny);
+    }
+    return FALSE;
+}
+
+bool8 MovementAction_EnterPokeball_Step0(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    u32 direction = objectEvent->facingDirection;
+    StartSpriteAnimInDirection(objectEvent, sprite, direction, GetMoveDirectionFasterAnimNum(direction));
+    sprite->sDuration = 16;
+    // If mon's right-facing sprite is h-flipped, we need to use a different affine anim
+    if (direction == DIR_EAST && sprite->anims[ANIM_STD_FACE_EAST]->frame.hFlip)
+        sprite->sSpeedFlip = 3;
+    else
+        sprite->sSpeedFlip = 2;
+    EndFollowerTransformEffect(objectEvent, sprite);
+    return MovementAction_EnterPokeball_Step1(objectEvent, sprite);
+}
+
+bool8 MovementAction_EnterPokeball_Step1(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    u16 graphicsId = objectEvent->graphicsId;
+    if (--sprite->sDuration == 0)
+    {
+        sprite->sActionFuncId = 2;
+        return FALSE;
+    }
+    else if (sprite->sDuration == 11)
+    {
+        // Set palette to white & start affine
+        LoadFillColorPalette(RGB_WHITE, OBJ_EVENT_PAL_TAG_WHITE, sprite);
+        sprite->subspriteTableNum = 0;
+        // Only do affine if sprite width is power of 2
+        // (effect looks weird on sprites composed of subsprites like 48x48, etc)
+        if (OW_LARGE_OW_SUPPORT && !IS_POW_OF_TWO(-sprite->centerToCornerVecX))
+            return FALSE;
+        sprite->affineAnims = sAffineAnims_PokeballFollower;
+        sprite->oam.affineMode = ST_OAM_AFFINE_NORMAL;
+        InitSpriteAffineAnim(sprite);
+        StartSpriteAffineAnim(sprite, sprite->sSpeedFlip);
+    }
+    else if (sprite->sDuration == 7)
+    {
+        // Free white palette and change to pokeball, disable affine
+        sprite->affineAnimEnded = TRUE;
+        FreeSpriteOamMatrix(sprite);
+        sprite->oam.affineMode = ST_OAM_AFFINE_OFF;
+        ObjectEventSetPokeballGfx(objectEvent);
+        objectEvent->graphicsId = graphicsId;
+        objectEvent->inanimate = FALSE;
+    }
+    return FALSE;
+}
+
+bool8 MovementAction_EnterPokeball_Step2(struct ObjectEvent *objectEvent, struct Sprite *sprite)
+{
+    FollowerSetGraphics(objectEvent, OW_SPECIES(objectEvent), OW_FORM(objectEvent), objectEvent->shiny);
+    objectEvent->invisible = TRUE;
+    sprite->sTypeFuncId = 0;
+    sprite->sSpeedFlip = 0;
+    sprite->animPaused = TRUE;
+    return TRUE;
+}
+
+#undef sDuration
+#undef sSpeedFlip
+
 bool8 MovementAction_WalkInPlaceSlowUp_Step0(struct ObjectEvent *objectEvent, struct Sprite *sprite)
 {
     InitMoveInPlace(objectEvent, sprite, DIR_NORTH, GetMoveDirectionAnimNum(DIR_NORTH), 32);
@@ -8718,6 +8562,7 @@ bool8 MovementAction_EmoteExclamationMark_Step0(struct ObjectEvent *objectEvent,
 bool8 MovementAction_EmoteQuestionMark_Step0(struct ObjectEvent *objectEvent, struct Sprite *sprite)
 {
     ObjectEventGetLocalIdAndMap(objectEvent, &gFieldEffectArguments[0], &gFieldEffectArguments[1], &gFieldEffectArguments[2]);
+    gFieldEffectArguments[7] = -1;
     FieldEffectStart(FLDEFF_QUESTION_MARK_ICON);
     sprite->sActionFuncId = 1;
     return TRUE;
@@ -10012,7 +9857,17 @@ static void UpdateObjectEventElevationAndPriority(struct ObjectEvent *objEvent,
     if (objEvent->fixedPriority)
         return;
 
-    ObjectEventUpdateElevation(objEvent);
+    ObjectEventUpdateElevation(objEvent, sprite);
+    if (objEvent->localId == OBJ_EVENT_ID_FOLLOWER)
+    {
+        // keep subspriteMode synced with player's
+        // so that it disappears under bridges when they do
+        if (OW_LARGE_OW_SUPPORT)
+            sprite->subspriteMode |= gSprites[gPlayerAvatar.spriteId].subspriteMode & SUBSPRITES_IGNORE_PRIORITY;
+        // if transitioning between elevations, use the player's elevation
+        if (!objEvent->currentElevation)
+            objEvent = &gObjectEvents[gPlayerAvatar.objectEventId];
+    }
 
     sprite->subspriteTableNum = sElevationToSubspriteTableNum[objEvent->previousElevation];
     sprite->oam.priority = sElevationToPriority[objEvent->previousElevation];
@@ -10029,13 +9884,20 @@ u8 ElevationToPriority(u8 elevation)
     return sElevationToPriority[elevation];
 }
 
-void ObjectEventUpdateElevation(struct ObjectEvent *objEvent)
+// Returns current elevation, or 15 for bridges
+void ObjectEventUpdateElevation(struct ObjectEvent *objEvent, struct Sprite *sprite)
 {
     u8 curElevation = MapGridGetElevationAt(objEvent->currentCoords.x, objEvent->currentCoords.y);
     u8 prevElevation = MapGridGetElevationAt(objEvent->previousCoords.x, objEvent->previousCoords.y);
 
     if (curElevation == 15 || prevElevation == 15)
+    {
+        // Ignore subsprite priorities under bridges
+        // so all subsprites will display below it
+        if (OW_LARGE_OW_SUPPORT)
+            sprite->subspriteMode = SUBSPRITES_IGNORE_PRIORITY;
         return;
+    }
 
     objEvent->currentElevation = curElevation;
 
@@ -10058,6 +9920,10 @@ static void ObjectEventUpdateSubpriority(struct ObjectEvent *objEvent, struct Sp
     if (objEvent->fixedPriority)
         return;
 
+    // If transitioning between elevations, use the player's elevation
+    if (!objEvent->currentElevation && objEvent->localId == OBJ_EVENT_ID_FOLLOWER)
+        objEvent = &gObjectEvents[gPlayerAvatar.objectEventId];
+
     SetObjectSubpriorityByElevation(objEvent->previousElevation, sprite, 1);
 }
 
@@ -10143,18 +10009,21 @@ static void (*const sGroundEffectTracksFuncs[])(struct ObjectEvent *objEvent, st
     [TRACKS_NONE] = DoTracksGroundEffect_None,
     [TRACKS_FOOT] = DoTracksGroundEffect_Footprints,
     [TRACKS_BIKE_TIRE] = DoTracksGroundEffect_BikeTireTracks,
+    [TRACKS_SLITHER] = DoTracksGroundEffect_SlitherTracks,
+    [TRACKS_SPOT] = DoTracksGroundEffect_FootprintsC,
+    [TRACKS_BUG] = DoTracksGroundEffect_FootprintsB,
 };
 
 void GroundEffect_SandTracks(struct ObjectEvent *objEvent, struct Sprite *sprite)
 {
     const struct ObjectEventGraphicsInfo *info = GetObjectEventGraphicsInfo(objEvent->graphicsId);
-    sGroundEffectTracksFuncs[info->tracks](objEvent, sprite, FALSE);
+    sGroundEffectTracksFuncs[objEvent->invisible ? TRACKS_NONE : info->tracks](objEvent, sprite, FALSE);
 }
 
 void GroundEffect_DeepSandTracks(struct ObjectEvent *objEvent, struct Sprite *sprite)
 {
     const struct ObjectEventGraphicsInfo *info = GetObjectEventGraphicsInfo(objEvent->graphicsId);
-    sGroundEffectTracksFuncs[info->tracks](objEvent, sprite, TRUE);
+    sGroundEffectTracksFuncs[objEvent->invisible ? TRACKS_NONE : info->tracks](objEvent, sprite, TRUE);
 }
 
 static void DoTracksGroundEffect_None(struct ObjectEvent *objEvent, struct Sprite *sprite, bool8 isDeepSand)
@@ -10177,6 +10046,40 @@ static void DoTracksGroundEffect_Footprints(struct ObjectEvent *objEvent, struct
     FieldEffectStart(sandFootprints_FieldEffectData[isDeepSand]);
 }
 
+static void DoTracksGroundEffect_FootprintsB(struct ObjectEvent *objEvent, struct Sprite *sprite, bool8 isDeepSand)
+{
+    // First half-word is a Field Effect script id. (gFieldEffectScriptPointers)
+    u16 otherFootprintsA_FieldEffectData[2] = {
+        FLDEFF_TRACKS_SPOT,
+        FLDEFF_TRACKS_SPOT
+    };
+
+    gFieldEffectArguments[0] = objEvent->previousCoords.x;
+    gFieldEffectArguments[1] = objEvent->previousCoords.y;
+    gFieldEffectArguments[2] = 149;
+    gFieldEffectArguments[3] = 2;
+    gFieldEffectArguments[4] = objEvent->facingDirection;
+    gFieldEffectArguments[5] = objEvent->previousMetatileBehavior;
+    FieldEffectStart(otherFootprintsA_FieldEffectData[isDeepSand]);
+}
+
+static void DoTracksGroundEffect_FootprintsC(struct ObjectEvent *objEvent, struct Sprite *sprite, bool8 isDeepSand)
+{
+    // First half-word is a Field Effect script id. (gFieldEffectScriptPointers)
+    u16 otherFootprintsB_FieldEffectData[2] = {
+        FLDEFF_TRACKS_BUG,
+        FLDEFF_TRACKS_BUG
+    };
+
+    gFieldEffectArguments[0] = objEvent->previousCoords.x;
+    gFieldEffectArguments[1] = objEvent->previousCoords.y;
+    gFieldEffectArguments[2] = 149;
+    gFieldEffectArguments[3] = 2;
+    gFieldEffectArguments[4] = objEvent->facingDirection;
+    gFieldEffectArguments[5] = objEvent->previousMetatileBehavior;
+    FieldEffectStart(otherFootprintsB_FieldEffectData[isDeepSand]);
+}
+
 static void DoTracksGroundEffect_BikeTireTracks(struct ObjectEvent *objEvent, struct Sprite *sprite, bool8 isDeepSand)
 {
     //  Specifies which bike track shape to show next.
@@ -10204,6 +10107,34 @@ static void DoTracksGroundEffect_BikeTireTracks(struct ObjectEvent *objEvent, st
     }
 }
 
+static void DoTracksGroundEffect_SlitherTracks(struct ObjectEvent *objEvent, struct Sprite *sprite, u8 a)
+{
+	//  Specifies which bike track shape to show next.
+	//  For example, when the bike turns from up to right, it will show
+	//  a track that curves to the right.
+	//  Each 4-byte row corresponds to the initial direction of the bike, and
+	//  each byte in that row is for the next direction of the bike in the order
+	//  of down, up, left, right.
+	static const u8 slitherTracks_Transitions[4][4] = {
+		{1, 2, 7, 8},
+		{1, 2, 6, 5},
+		{5, 8, 3, 4},
+		{6, 7, 3, 4},
+	};
+
+	if (objEvent->currentCoords.x != objEvent->previousCoords.x || objEvent->currentCoords.y != objEvent->previousCoords.y)
+	{
+		gFieldEffectArguments[0] = objEvent->previousCoords.x;
+		gFieldEffectArguments[1] = objEvent->previousCoords.y;
+		gFieldEffectArguments[2] = 149;
+		gFieldEffectArguments[3] = 2;
+		gFieldEffectArguments[4] =
+			slitherTracks_Transitions[objEvent->previousMovementDirection][objEvent->facingDirection - 5];
+        gFieldEffectArguments[5] = objEvent->previousMetatileBehavior;
+		FieldEffectStart(FLDEFF_TRACKS_SLITHER);
+	}
+}
+
 void GroundEffect_Ripple(struct ObjectEvent *objEvent, struct Sprite *sprite)
 {
     DoRippleFieldEffect(objEvent, sprite);
@@ -10361,6 +10292,8 @@ static void DoGroundEffects_OnSpawn(struct ObjectEvent *objEvent, struct Sprite
 #endif
     {
         flags = 0;
+        if (OW_LARGE_OW_SUPPORT && !sprite->oam.affineMode)
+            sprite->subspriteMode = SUBSPRITES_ON;
         UpdateObjectEventElevationAndPriority(objEvent, sprite);
         GetAllGroundEffectFlags_OnSpawn(objEvent, &flags);
         SetObjectEventSpriteOamTableForLongGrass(objEvent, sprite);
@@ -10381,6 +10314,8 @@ static void DoGroundEffects_OnBeginStep(struct ObjectEvent *objEvent, struct Spr
 #endif
     {
         flags = 0;
+        if (OW_LARGE_OW_SUPPORT && !sprite->oam.affineMode)
+            sprite->subspriteMode = SUBSPRITES_ON;
         UpdateObjectEventElevationAndPriority(objEvent, sprite);
         GetAllGroundEffectFlags_OnBeginStep(objEvent, &flags);
         SetObjectEventSpriteOamTableForLongGrass(objEvent, sprite);
@@ -10736,12 +10671,14 @@ static void SetJumpSpriteData(struct Sprite *sprite, u8 direction, u8 distance,
 
 static u8 DoJumpSpriteMovement(struct Sprite *sprite)
 {
-    s16 distanceToTime[] = {
+    s16 distanceToTime[] =
+    {
         [JUMP_DISTANCE_IN_PLACE] = 16,
         [JUMP_DISTANCE_NORMAL] = 16,
         [JUMP_DISTANCE_FAR] = 32,
     };
-    u8 distanceToShift[] = {
+    u8 distanceToShift[] =
+    {
         [JUMP_DISTANCE_IN_PLACE] = 0,
         [JUMP_DISTANCE_NORMAL] = 0,
         [JUMP_DISTANCE_FAR] = 1,
@@ -10751,7 +10688,22 @@ static u8 DoJumpSpriteMovement(struct Sprite *sprite)
     if (sprite->sDistance != JUMP_DISTANCE_IN_PLACE)
         Step1(sprite, sprite->sDirection);
 
-    sprite->y2 = GetJumpY(sprite->sTimer >> distanceToShift[sprite->sDistance], sprite->sJumpType);
+    if (sprite->sJumpType == JUMP_TYPE_FASTER)
+    {
+        Step3(sprite, sprite->sDirection);
+        sprite->y2 = GetJumpY(sprite->sTimer >> distanceToShift[sprite->sDistance], JUMP_TYPE_NORMAL);
+        sprite->sTimer += 3;
+    }
+    else if (sprite->sJumpType == JUMP_TYPE_FAST)
+    {
+        Step1(sprite, sprite->sDirection);
+        sprite->y2 = GetJumpY(sprite->sTimer >> distanceToShift[sprite->sDistance], JUMP_TYPE_NORMAL);
+        sprite->sTimer++;
+    }
+    else
+    {
+        sprite->y2 = GetJumpY(sprite->sTimer >> distanceToShift[sprite->sDistance], sprite->sJumpType);
+    }
 
     sprite->sTimer++;
 
@@ -10912,10 +10864,12 @@ void SetVirtualObjectGraphics(u8 virtualObjId, u16 graphicsId)
         struct Sprite *sprite = &gSprites[spriteId];
         const struct ObjectEventGraphicsInfo *graphicsInfo = GetObjectEventGraphicsInfo(graphicsId);
         u16 tileNum = sprite->oam.tileNum;
+        u8 i = FindObjectEventPaletteIndexByTag(graphicsInfo->paletteTag);
+        if (i != 0xFF)
+            UpdateSpritePalette(&sObjectEventSpritePalettes[i], sprite);
 
         sprite->oam = *graphicsInfo->oam;
         sprite->oam.tileNum = tileNum;
-        sprite->oam.paletteNum = graphicsInfo->paletteSlot;
         sprite->images = graphicsInfo->images;
 
         if (graphicsInfo->subspriteTables == NULL)
@@ -11452,3 +11406,25 @@ u8 MovementAction_SpinRight_Step1(struct ObjectEvent *objectEvent, struct Sprite
 
 // END CUSTOM
 
+// Get gfx data from daycare pokemon and store it in vars
+void GetDaycareGraphics(struct ScriptContext *ctx)
+{
+    u16 varGfx[] = {ScriptReadHalfword(ctx), ScriptReadHalfword(ctx)};
+    u16 varForm[] = {ScriptReadHalfword(ctx), ScriptReadHalfword(ctx)};
+    u16 specGfx;
+    u8 form;
+    u8 shiny;
+    s32 i;
+    for (i = 0; i < 2; i++)
+    {
+        GetMonInfo((struct Pokemon *) &gSaveBlock1Ptr->daycare.mons[i].mon, &specGfx, &form, &shiny);
+        if (specGfx == SPECIES_NONE)
+            break;
+        // Assemble gfx ID like FollowerSetGraphics
+        specGfx = (OBJ_EVENT_GFX_MON_BASE + specGfx) & OBJ_EVENT_GFX_SPECIES_MASK;
+        specGfx |= form << OBJ_EVENT_GFX_SPECIES_BITS;
+        VarSet(varGfx[i], specGfx);
+        VarSet(varForm[i], form | (shiny << 5));
+    }
+    gSpecialVar_Result = i;
+}
